{"ast":null,"code":"\"use strict\";\n\nvar b = Object.defineProperty;\n\nvar c = (E, e) => b(E, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst C = require(\"../abstract/connection-manager\"),\n      N = require(\"./async-queue\").default,\n      {\n  logger: p\n} = require(\"../../utils/logger\"),\n      o = require(\"../../errors\"),\n      O = require(\"../../data-types\").mssql,\n      w = require(\"../parserStore\")(\"mssql\"),\n      h = p.debugContext(\"connection:mssql\"),\n      m = p.debugContext(\"connection:mssql:tedious\");\n\nclass i extends C {\n  constructor(e, n) {\n    n.config.port = n.config.port || 1433;\n    super(e, n);\n    this.lib = this._loadDialectModule(\"tedious\"), this.refreshTypeParser(O);\n  }\n\n  _refreshTypeParser(e) {\n    w.refresh(e);\n  }\n\n  _clearTypeParser() {\n    w.clear();\n  }\n\n  async connect(e) {\n    const n = {\n      server: e.host,\n      authentication: {\n        type: \"default\",\n        options: {\n          userName: e.username || void 0,\n          password: e.password || void 0\n        }\n      },\n      options: {\n        port: parseInt(e.port, 10),\n        database: e.database,\n        trustServerCertificate: !0\n      }\n    };\n    e.dialectOptions && (e.dialectOptions.options && e.dialectOptions.options.instanceName && delete n.options.port, e.dialectOptions.authentication && Object.assign(n.authentication, e.dialectOptions.authentication), Object.assign(n.options, e.dialectOptions.options));\n\n    try {\n      return await new Promise((t, a) => {\n        const r = new this.lib.Connection(n);\n        r.state === r.STATE.INITIALIZED && r.connect(), r.queue = new N(), r.lib = this.lib;\n        const d = c(s => {\n          if (r.removeListener(\"end\", u), r.removeListener(\"error\", l), s) return a(s);\n          h(\"connection acquired\"), t(r);\n        }, \"connectHandler\"),\n              u = c(() => {\n          r.removeListener(\"connect\", d), r.removeListener(\"error\", l), a(new Error(\"Connection was closed by remote server\"));\n        }, \"endHandler\"),\n              l = c(s => {\n          r.removeListener(\"connect\", d), r.removeListener(\"end\", u), a(s);\n        }, \"errorHandler\");\n        r.once(\"error\", l), r.once(\"end\", u), r.once(\"connect\", d), r.on(\"error\", s => {\n          switch (s.code) {\n            case \"ESOCKET\":\n            case \"ECONNRESET\":\n              this.pool.destroy(r);\n          }\n        }), e.dialectOptions && e.dialectOptions.debug && r.on(\"debug\", m.log.bind(m));\n      });\n    } catch (t) {\n      if (!t.code) throw new o.ConnectionError(t);\n\n      switch (t.code) {\n        case \"ESOCKET\":\n          throw t.message.includes(\"connect EHOSTUNREACH\") ? new o.HostNotReachableError(t) : t.message.includes(\"connect ENETUNREACH\") ? new o.HostNotReachableError(t) : t.message.includes(\"connect EADDRNOTAVAIL\") ? new o.HostNotReachableError(t) : t.message.includes(\"getaddrinfo ENOTFOUND\") ? new o.HostNotFoundError(t) : t.message.includes(\"connect ECONNREFUSED\") ? new o.ConnectionRefusedError(t) : new o.ConnectionError(t);\n\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ELOGIN\":\n          throw new o.AccessDeniedError(t);\n\n        case \"EINVAL\":\n          throw new o.InvalidConnectionError(t);\n\n        default:\n          throw new o.ConnectionError(t);\n      }\n    }\n  }\n\n  async disconnect(e) {\n    if (!e.closed) return e.queue.close(), new Promise(n => {\n      e.on(\"end\", n), e.close(), h(\"connection closed\");\n    });\n  }\n\n  validate(e) {\n    return e && e.loggedIn;\n  }\n\n}\n\nc(i, \"ConnectionManager\"), module.exports = i, module.exports.ConnectionManager = i, module.exports.default = i;","map":{"version":3,"sources":["../../../../lib/dialects/mssql/connection-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst AsyncQueue = require('./async-queue').default;\nconst { logger } = require('../../utils/logger');\nconst sequelizeErrors = require('../../errors');\nconst DataTypes = require('../../data-types').mssql;\nconst parserStore = require('../parserStore')('mssql');\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (\n        config.dialectOptions.options &&\n        config.dialectOptions.options.instanceName\n      ) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n\n        const connectHandler = error => {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n\n          if (error) return reject(error);\n\n          debug('connection acquired');\n          resolve(connection);\n        };\n\n        const endHandler = () => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        const errorHandler = error => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n        connection.on('error', error => {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              this.pool.destroy(connection);\n          }\n        });\n\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return;\n    }\n\n    connection.queue.close();\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connection) {\n    return connection && connection.loggedIn;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}