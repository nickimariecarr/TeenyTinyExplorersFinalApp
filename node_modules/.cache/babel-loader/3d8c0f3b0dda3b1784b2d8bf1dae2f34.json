{"ast":null,"code":"\"use strict\";\n\nvar q = Object.defineProperty;\n\nvar w = (_, i) => q(_, \"name\", {\n  value: i,\n  configurable: !0\n});\n\nconst A = require(\"../abstract/query\"),\n      R = require(\"../../query-types\"),\n      m = require(\"../../errors\"),\n      p = require(\"lodash\"),\n      {\n  logger: F\n} = require(\"../../utils/logger\"),\n      O = F.debugContext(\"sql:pg\");\n\nclass C extends A {\n  static formatBindParameters(i, o, c) {\n    const l = w(n => typeof n == \"string\" ? n.replace(/\\0/g, \"\\\\0\") : n, \"stringReplaceFunc\");\n    let u;\n    if (Array.isArray(o)) u = o.map(l), i = A.formatBindParameters(i, o, c, {\n      skipValueReplace: !0\n    })[0];else {\n      u = [];\n      let n = 0;\n      const h = {},\n            s = w((E, d, y) => {\n        if (h[d] !== void 0) return h[d];\n        if (y[d] !== void 0) return n = n + 1, u.push(l(y[d])), h[d] = `$${n}`, `$${n}`;\n      }, \"replacementFunc\");\n      i = A.formatBindParameters(i, o, c, s)[0];\n    }\n    return [i, u];\n  }\n\n  async run(i, o) {\n    const {\n      connection: c\n    } = this;\n    p.isEmpty(this.options.searchPath) || (i = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + i), this.sequelize.options.minifyAliases && this.options.includeAliases && p.toPairs(this.options.includeAliases).sort((e, t) => t[1].length - e[1].length).forEach(_ref => {\n      let [e, t] = _ref;\n      const r = new RegExp(p.escapeRegExp(t), \"g\");\n      i = i.replace(r, e);\n    }), this.sql = i;\n\n    const l = o && o.length ? new Promise((e, t) => c.query(i, o, (r, a) => r ? t(r) : e(a))) : new Promise((e, t) => c.query(i, (r, a) => r ? t(r) : e(a))),\n          u = this._logQuery(i, O, o);\n\n    let n;\n    const h = new Error();\n\n    try {\n      n = await l;\n    } catch (e) {\n      throw e.code === \"ECONNRESET\" && (c._invalid = !0), e.sql = i, e.parameters = o, this.formatError(e, h.stack);\n    }\n\n    u();\n    let s = Array.isArray(n) ? n.reduce((e, t) => e.concat(t.rows || []), []) : n.rows;\n    const E = Array.isArray(n) ? n.reduce((e, t) => Number.isFinite(t.rowCount) ? e + t.rowCount : e, 0) : n.rowCount || 0;\n    this.sequelize.options.minifyAliases && this.options.aliasesMapping && (s = s.map(e => p.toPairs(e).reduce((t, _ref2) => {\n      let [r, a] = _ref2;\n      const f = this.options.aliasesMapping.get(r);\n      return t[f || r] = a, t;\n    }, {})));\n    const d = i.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    if (i.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\")) return s.map(e => ({\n      name: e.relname,\n      tableName: e.relname.split(\"_\")[0]\n    }));\n    if (d) return s.map(e => Object.values(e));\n\n    if (s[0] && s[0].sequelize_caught_exception !== void 0) {\n      if (s[0].sequelize_caught_exception !== null) throw this.formatError({\n        sql: i,\n        parameters: o,\n        code: \"23505\",\n        detail: s[0].sequelize_caught_exception\n      });\n\n      for (const e of s) delete e.sequelize_caught_exception;\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const e of s) {\n        const t = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(e.definition)[1].split(\",\"),\n              r = p.zipObject(e.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(e.column_names));\n        delete e.column_indexes, delete e.column_names;\n        let a, f;\n        e.fields = e.indkey.split(\" \").map((g, b) => (a = r[g], a ? (f = t[b], {\n          attribute: a,\n          collate: f.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(f)[1] : void 0,\n          order: f.includes(\"DESC\") ? \"DESC\" : f.includes(\"ASC\") ? \"ASC\" : void 0,\n          length: void 0\n        }) : null)).filter(g => g !== null), delete e.columns;\n      }\n\n      return s;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      const e = [];\n\n      for (const t of s) {\n        let r;\n\n        if (t.condef !== void 0 && (r = t.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          t.id = t.constraint_name, t.table = r[2], t.from = r[1], t.to = r[3];\n          let a;\n\n          for (a = 5; a <= 8; a += 3) /(UPDATE|DELETE)/.test(r[a]) && (t[`on_${r[a].toLowerCase()}`] = r[a + 1]);\n        }\n\n        e.push(t);\n      }\n\n      return e;\n    }\n\n    if (this.isSelectQuery()) {\n      let e = s;\n\n      if (this.options.raw === !1 && this.sequelize.options.quoteIdentifiers === !1) {\n        const t = p.reduce(this.model.rawAttributes, (r, a, f) => (r[f.toLowerCase()] = f, r), {});\n        e = s.map(r => p.mapKeys(r, (a, f) => {\n          const g = t[f];\n          return typeof g == \"string\" && g !== f ? g : f;\n        }));\n      }\n\n      return this.handleSelectQuery(e);\n    }\n\n    if (R.DESCRIBE === this.options.type) {\n      const e = {};\n\n      for (const t of s) if (e[t.Field] = {\n        type: t.Type.toUpperCase(),\n        allowNull: t.Null === \"YES\",\n        defaultValue: t.Default,\n        comment: t.Comment,\n        special: t.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(t.special) : [],\n        primaryKey: t.Constraint === \"PRIMARY KEY\"\n      }, e[t.Field].type === \"BOOLEAN\" && (e[t.Field].defaultValue = {\n        false: !1,\n        true: !0\n      }[e[t.Field].defaultValue], e[t.Field].defaultValue === void 0 && (e[t.Field].defaultValue = null)), typeof e[t.Field].defaultValue == \"string\" && (e[t.Field].defaultValue = e[t.Field].defaultValue.replace(/'/g, \"\"), e[t.Field].defaultValue.includes(\"::\"))) {\n        const r = e[t.Field].defaultValue.split(\"::\");\n        r[1].toLowerCase() !== \"regclass)\" && (e[t.Field].defaultValue = r[0]);\n      }\n\n      return e;\n    }\n\n    if (this.isVersionQuery()) return s[0].server_version;\n    if (this.isShowOrDescribeQuery()) return s;\n    if (R.BULKUPDATE === this.options.type) return this.options.returning ? this.handleSelectQuery(s) : parseInt(E, 10);\n    if (R.BULKDELETE === this.options.type) return parseInt(E, 10);\n\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && E === 0) throw new m.EmptyResultError();\n\n        for (const e in s[0]) if (Object.prototype.hasOwnProperty.call(s[0], e)) {\n          const t = s[0][e],\n                r = p.find(this.model.rawAttributes, a => a.fieldName === e || a.field === e);\n          this.instance.dataValues[r && r.fieldName || e] = t;\n        }\n      }\n\n      return this.isUpsertQuery() ? [this.instance, null] : [this.instance || s && (this.options.plain && s[0] || s) || void 0, E];\n    }\n\n    return this.isRawQuery() ? [s, n] : s;\n  }\n\n  formatError(i, o) {\n    let c, l, u, n, h, s;\n    const E = i.code || i.sqlState,\n          d = i.message || i.messagePrimary,\n          y = i.detail || i.messageDetail;\n\n    switch (E) {\n      case \"23503\":\n        return u = d.match(/violates foreign key constraint \"(.+?)\"/), u = u ? u[1] : void 0, l = d.match(/on table \"(.+?)\"/), l = l ? l[1] : void 0, new m.ForeignKeyConstraintError({\n          message: d,\n          fields: null,\n          index: u,\n          table: l,\n          parent: i,\n          stack: o\n        });\n\n      case \"23505\":\n        return y && (c = y.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/)) ? (n = p.zipObject(c[1].split(\", \"), c[2].split(\", \")), h = [], s = \"Validation error\", p.forOwn(n, (e, t) => {\n          h.push(new m.ValidationErrorItem(this.getUniqueConstraintErrorMessage(t), \"unique violation\", t, e, this.instance, \"not_unique\"));\n        }), this.model && this.model.uniqueKeys && p.forOwn(this.model.uniqueKeys, e => {\n          if (p.isEqual(e.fields, Object.keys(n)) && !!e.msg) return s = e.msg, !1;\n        }), new m.UniqueConstraintError({\n          message: s,\n          errors: h,\n          parent: i,\n          fields: n,\n          stack: o\n        })) : new m.UniqueConstraintError({\n          message: d,\n          parent: i,\n          stack: o\n        });\n\n      case \"23P01\":\n        return c = y.match(/Key \\((.*?)\\)=\\((.*?)\\)/), c && (n = p.zipObject(c[1].split(\", \"), c[2].split(\", \"))), s = \"Exclusion constraint error\", new m.ExclusionConstraintError({\n          message: s,\n          constraint: i.constraint,\n          fields: n,\n          table: i.table,\n          parent: i,\n          stack: o\n        });\n\n      case \"42704\":\n        if (i.sql && /(CONSTRAINT|INDEX)/gi.test(i.sql)) throw s = \"Unknown constraint error\", u = d.match(/(?:constraint|index) \"(.+?)\"/i), u = u ? u[1] : void 0, l = d.match(/relation \"(.+?)\"/i), l = l ? l[1] : void 0, new m.UnknownConstraintError({\n          message: s,\n          constraint: u,\n          fields: n,\n          table: l,\n          parent: i,\n          stack: o\n        });\n\n      default:\n        return new m.DatabaseError(i, {\n          stack: o\n        });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return \"id\";\n  }\n\n}\n\nw(C, \"Query\"), module.exports = C, module.exports.Query = C, module.exports.default = C;","map":{"version":3,"sources":["../../../../lib/dialects/postgres/query.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAgB,OAAA,CAAQ,mBAAR,CAAtB;AAAA,MACM,CAAA,GAAa,OAAA,CAAQ,mBAAR,CADnB;AAAA,MAEM,CAAA,GAAkB,OAAA,CAAQ,cAAR,CAFxB;AAAA,MAGM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAHV;AAAA,MAIM;AAAE,EAAA,MAAA,EAAA;AAAF,IAAa,OAAA,CAAQ,oBAAR,CAJnB;AAAA,MAMM,CAAA,GAAQ,CAAA,CAAO,YAAP,CAAoB,QAApB,CANd;;AASA,MAAA,CAAA,SAAoB,CAApB,CAAkC;AASzB,SAAA,oBAAA,CAAqB,CAArB,EAA0B,CAA1B,EAAkC,CAAlC,EAA2C;AAChD,UAAM,CAAA,GAAoB,CAAA,CAAA,CAAA,IAAS,OAAO,CAAP,IAAiB,QAAjB,GAA4B,CAAA,CAAM,OAAN,CAAc,KAAd,EAAqB,KAArB,CAA5B,GAA0D,CAAnE,EAAA,mBAAA,CAA1B;AAEA,QAAI,CAAJ;AACA,QAAI,KAAA,CAAM,OAAN,CAAc,CAAd,CAAJ,EACE,CAAA,GAAY,CAAA,CAAO,GAAP,CAAW,CAAX,CAAZ,EACA,CAAA,GAAM,CAAA,CAAc,oBAAd,CAAmC,CAAnC,EAAwC,CAAxC,EAAgD,CAAhD,EAAyD;AAAE,MAAA,gBAAA,EAAkB,CAAA;AAApB,KAAzD,EAAqF,CAArF,CADN,CADF,KAGO;AACL,MAAA,CAAA,GAAY,EAAZ;AACA,UAAI,CAAA,GAAI,CAAR;AACA,YAAM,CAAA,GAAO,EAAb;AAAA,YACM,CAAA,GAAkB,CAAA,CAAA,CAAC,CAAD,EAAQ,CAAR,EAAa,CAAb,KAAwB;AAC9C,YAAI,CAAA,CAAK,CAAL,CAAA,KAAc,KAAA,CAAlB,EACE,OAAO,CAAA,CAAK,CAAL,CAAP;AAEF,YAAI,CAAA,CAAO,CAAP,CAAA,KAAgB,KAAA,CAApB,EACE,OAAA,CAAA,GAAI,CAAA,GAAI,CAAR,EACA,CAAA,CAAU,IAAV,CAAe,CAAA,CAAkB,CAAA,CAAO,CAAP,CAAlB,CAAf,CADA,EAEA,CAAA,CAAK,CAAL,CAAA,GAAY,IAAI,CAAA,EAFhB,EAGO,IAAI,CAAA,EAHX;AAGW,OARS,EAAA,iBAAA,CADxB;AAaA,MAAA,CAAA,GAAM,CAAA,CAAc,oBAAd,CAAmC,CAAnC,EAAwC,CAAxC,EAAgD,CAAhD,EAAyD,CAAzD,EAA0E,CAA1E,CAAN;AAEF;AAAA,WAAO,CAAC,CAAD,EAAM,CAAN,CAAP;AAAa;;AAGT,QAAA,GAAA,CAAI,CAAJ,EAAS,CAAT,EAAqB;AACzB,UAAM;AAAE,MAAA,UAAA,EAAA;AAAF,QAAiB,IAAvB;AAEK,IAAA,CAAA,CAAE,OAAF,CAAU,KAAK,OAAL,CAAa,UAAvB,MACH,CAAA,GAAM,KAAK,SAAL,CAAe,iBAAf,GAAmC,cAAnC,CAAkD,aAAlD,CAAgE,KAAK,OAAL,CAAa,UAA7E,IAA2F,CAD9F,GAID,KAAK,SAAL,CAAe,OAAf,CAAuB,aAAvB,IAAwC,KAAK,OAAL,CAAa,cAArD,IACF,CAAA,CAAE,OAAF,CAAU,KAAK,OAAL,CAAa,cAAvB,EAEG,IAFH,CAEQ,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAA,CAAE,CAAF,CAAA,CAAK,MAAL,GAAc,CAAA,CAAE,CAAF,CAAA,CAAK,MAFrC,EAGG,OAHH,CAGW,QAAuB;AAAA,UAAtB,CAAC,CAAD,EAAQ,CAAR,CAAsB;AAC9B,YAAM,CAAA,GAAM,IAAI,MAAJ,CAAW,CAAA,CAAE,YAAF,CAAe,CAAf,CAAX,EAAqC,GAArC,CAAZ;AAEA,MAAA,CAAA,GAAM,CAAA,CAAI,OAAJ,CAAY,CAAZ,EAAiB,CAAjB,CAAN;AAAuB,KAN3B,CALG,EAeL,KAAK,GAAL,GAAW,CAfN;;AAiBL,UAAM,CAAA,GAAQ,CAAA,IAAc,CAAA,CAAW,MAAzB,GACV,IAAI,OAAJ,CAAY,CAAC,CAAD,EAAU,CAAV,KAAqB,CAAA,CAAW,KAAX,CAAiB,CAAjB,EAAsB,CAAtB,EAAkC,CAAC,CAAD,EAAQ,CAAR,KAAmB,CAAA,GAAQ,CAAA,CAAO,CAAP,CAAR,GAAwB,CAAA,CAAQ,CAAR,CAA7E,CAAjC,CADU,GAEV,IAAI,OAAJ,CAAY,CAAC,CAAD,EAAU,CAAV,KAAqB,CAAA,CAAW,KAAX,CAAiB,CAAjB,EAAsB,CAAC,CAAD,EAAQ,CAAR,KAAmB,CAAA,GAAQ,CAAA,CAAO,CAAP,CAAR,GAAwB,CAAA,CAAQ,CAAR,CAAjE,CAAjC,CAFJ;AAAA,UAIM,CAAA,GAAW,KAAK,SAAL,CAAe,CAAf,EAAoB,CAApB,EAA2B,CAA3B,CAJjB;;AAMA,QAAI,CAAJ;AACA,UAAM,CAAA,GAAc,IAAI,KAAJ,EAApB;;AAEA,QAAI;AACF,MAAA,CAAA,GAAc,MAAM,CAApB;AAAoB,KADtB,CACsB,OACb,CADa,EACpB;AAEA,YAAI,CAAA,CAAI,IAAJ,KAAa,YAAb,KACF,CAAA,CAAW,QAAX,GAAsB,CAAA,CADpB,GAIJ,CAAA,CAAI,GAAJ,GAAU,CAJN,EAKJ,CAAA,CAAI,UAAJ,GAAiB,CALb,EAME,KAAK,WAAL,CAAiB,CAAjB,EAAsB,CAAA,CAAY,KAAlC,CANN;AASF;;AAAA,IAAA,CAAA;AAEA,QAAI,CAAA,GAAO,KAAA,CAAM,OAAN,CAAc,CAAd,IACP,CAAA,CAAY,MAAZ,CAAmB,CAAC,CAAD,EAAU,CAAV,KAAgB,CAAA,CAAQ,MAAR,CAAe,CAAA,CAAE,IAAF,IAAU,EAAzB,CAAnC,EAAiE,EAAjE,CADO,GAEP,CAAA,CAAY,IAFhB;AAGA,UAAM,CAAA,GAAW,KAAA,CAAM,OAAN,CAAc,CAAd,IACb,CAAA,CAAY,MAAZ,CACA,CAAC,CAAD,EAAQ,CAAR,KAAc,MAAA,CAAO,QAAP,CAAgB,CAAA,CAAE,QAAlB,IAA8B,CAAA,GAAQ,CAAA,CAAE,QAAxC,GAAmD,CADjE,EAEA,CAFA,CADa,GAKb,CAAA,CAAY,QAAZ,IAAwB,CAL5B;AAOI,SAAK,SAAL,CAAe,OAAf,CAAuB,aAAvB,IAAwC,KAAK,OAAL,CAAa,cAArD,KACF,CAAA,GAAO,CAAA,CACJ,GADI,CACA,CAAA,IAAO,CAAA,CAAE,OAAF,CAAU,CAAV,EACT,MADS,CACF,CAAC,CAAD,YAAuB;AAAA,UAAjB,CAAC,CAAD,EAAM,CAAN,CAAiB;AAC7B,YAAM,CAAA,GAAU,KAAK,OAAL,CAAa,cAAb,CAA4B,GAA5B,CAAgC,CAAhC,CAAhB;AACA,aAAA,CAAA,CAAI,CAAA,IAAW,CAAf,CAAA,GAAsB,CAAtB,EACO,CADP;AACO,KAJC,EAKP,EALO,CADP,CADL;AAWJ,UAAM,CAAA,GAAmB,CAAA,CAAI,UAAJ,CAAe,kDAAf,CAAzB;AAGA,QAFuB,CAAA,CAAI,UAAJ,CAAe,2CAAf,CAEvB,EACE,OAAO,CAAA,CAAK,GAAL,CAAS,CAAA,KAAQ;AACtB,MAAA,IAAA,EAAM,CAAA,CAAI,OADY;AAEtB,MAAA,SAAA,EAAW,CAAA,CAAI,OAAJ,CAAY,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB;AAFW,KAAR,CAAT,CAAP;AAKF,QAAI,CAAJ,EACE,OAAO,CAAA,CAAK,GAAL,CAAS,CAAA,IAAO,MAAA,CAAO,MAAP,CAAc,CAAd,CAAhB,CAAP;;AAGF,QAAI,CAAA,CAAK,CAAL,CAAA,IAAW,CAAA,CAAK,CAAL,CAAA,CAAQ,0BAAR,KAAuC,KAAA,CAAtD,EAAiE;AAC/D,UAAI,CAAA,CAAK,CAAL,CAAA,CAAQ,0BAAR,KAAuC,IAA3C,EACE,MAAM,KAAK,WAAL,CAAiB;AACrB,QAAA,GAAA,EAAA,CADqB;AAErB,QAAA,UAAA,EAAA,CAFqB;AAGrB,QAAA,IAAA,EAAM,OAHe;AAIrB,QAAA,MAAA,EAAQ,CAAA,CAAK,CAAL,CAAA,CAAQ;AAJK,OAAjB,CAAN;;AAOF,WAAA,MAAW,CAAX,IAAkB,CAAlB,EACE,OAAO,CAAA,CAAI,0BAAX;AAIJ;;AAAA,QAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B,WAAA,MAAW,CAAX,IAAkB,CAAlB,EAAwB;AACtB,cAAM,CAAA,GAAa,sCAAsC,IAAtC,CAA2C,CAAA,CAAI,UAA/C,EAA2D,CAA3D,EAA8D,KAA9D,CAAoE,GAApE,CAAnB;AAAA,cAGM,CAAA,GAAU,CAAA,CAAE,SAAF,CACd,CAAA,CAAI,cADU,EAEd,KAAK,SAAL,CAAe,iBAAf,GAAmC,cAAnC,CAAkD,SAAlD,CAA4D,CAAA,CAAI,YAAhE,CAFc,CAHhB;AAOA,eAAO,CAAA,CAAI,cAAX,EACA,OAAO,CAAA,CAAI,YADX;AAGA,YAAI,CAAJ,EACI,CADJ;AAIA,QAAA,CAAA,CAAI,MAAJ,GAAa,CAAA,CAAI,MAAJ,CAAW,KAAX,CAAiB,GAAjB,EAAsB,GAAtB,CAA0B,CAAC,CAAD,EAAS,CAAT,MACrC,CAAA,GAAQ,CAAA,CAAQ,CAAR,CAAR,EAEK,CAAA,IAGL,CAAA,GAAY,CAAA,CAAW,CAAX,CAAZ,EACO;AACL,UAAA,SAAA,EAAW,CADN;AAEL,UAAA,OAAA,EAAS,CAAA,CAAU,KAAV,CAAgB,iBAAhB,IAAqC,kBAAkB,IAAlB,CAAuB,CAAvB,EAAkC,CAAlC,CAArC,GAA4E,KAAA,CAFhF;AAGL,UAAA,KAAA,EAAO,CAAA,CAAU,QAAV,CAAmB,MAAnB,IAA6B,MAA7B,GAAsC,CAAA,CAAU,QAAV,CAAmB,KAAnB,IAA4B,KAA5B,GAAoC,KAAA,CAH5E;AAIL,UAAA,MAAA,EAAQ,KAAA;AAJH,SAJF,IACI,IAJ4B,CAA1B,EAaV,MAbU,CAaH,CAAA,IAAK,CAAA,KAAM,IAbR,CAAb,EAcA,OAAO,CAAA,CAAI,OAdX;AAgBF;;AAAA,aAAO,CAAP;AAEF;;AAAA,QAAI,KAAK,kBAAL,EAAJ,EAA+B;AAC7B,YAAM,CAAA,GAAS,EAAf;;AACA,WAAA,MAAW,CAAX,IAAkB,CAAlB,EAAwB;AACtB,YAAI,CAAJ;;AACA,YAAI,CAAA,CAAI,MAAJ,KAAe,KAAA,CAAf,KAA6B,CAAA,GAAW,CAAA,CAAI,MAAJ,CAAW,KAAX,CAAiB,gIAAjB,CAAxC,CAAJ,EAAiM;AAC/L,UAAA,CAAA,CAAI,EAAJ,GAAS,CAAA,CAAI,eAAb,EACA,CAAA,CAAI,KAAJ,GAAY,CAAA,CAAS,CAAT,CADZ,EAEA,CAAA,CAAI,IAAJ,GAAW,CAAA,CAAS,CAAT,CAFX,EAGA,CAAA,CAAI,EAAJ,GAAS,CAAA,CAAS,CAAT,CAHT;AAIA,cAAI,CAAJ;;AACA,eAAK,CAAA,GAAI,CAAT,EAAY,CAAA,IAAK,CAAjB,EAAoB,CAAA,IAAK,CAAzB,EACM,kBAAkB,IAAlB,CAAuB,CAAA,CAAS,CAAT,CAAvB,MACF,CAAA,CAAI,MAAM,CAAA,CAAS,CAAT,CAAA,CAAY,WAAZ,EAAY,EAAtB,CAAA,GAAyC,CAAA,CAAS,CAAA,GAAI,CAAb,CADvC;AAKR;;AAAA,QAAA,CAAA,CAAO,IAAP,CAAY,CAAZ;AAEF;;AAAA,aAAO,CAAP;AAEF;;AAAA,QAAI,KAAK,aAAL,EAAJ,EAA0B;AACxB,UAAI,CAAA,GAAS,CAAb;;AAGA,UAAI,KAAK,OAAL,CAAa,GAAb,KAAqB,CAAA,CAArB,IAA8B,KAAK,SAAL,CAAe,OAAf,CAAuB,gBAAvB,KAA4C,CAAA,CAA9E,EAAqF;AACnF,cAAM,CAAA,GAAW,CAAA,CAAE,MAAF,CAAS,KAAK,KAAL,CAAW,aAApB,EAAmC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,MAClD,CAAA,CAAE,CAAA,CAAE,WAAF,EAAF,CAAA,GAAqB,CAArB,EACO,CAF2C,CAAnC,EAGd,EAHc,CAAjB;AAIA,QAAA,CAAA,GAAS,CAAA,CAAK,GAAL,CAAS,CAAA,IACT,CAAA,CAAE,OAAF,CAAU,CAAV,EAAe,CAAC,CAAD,EAAQ,CAAR,KAAgB;AACpC,gBAAM,CAAA,GAAa,CAAA,CAAS,CAAT,CAAnB;AACA,iBAAI,OAAO,CAAP,IAAsB,QAAtB,IAAkC,CAAA,KAAe,CAAjD,GACK,CADL,GAGG,CAHP;AAGO,SALF,CADA,CAAT;AAUF;;AAAA,aAAO,KAAK,iBAAL,CAAuB,CAAvB,CAAP;AAEF;;AAAA,QAAI,CAAA,CAAW,QAAX,KAAwB,KAAK,OAAL,CAAa,IAAzC,EAA+C;AAC7C,YAAM,CAAA,GAAS,EAAf;;AAEA,WAAA,MAAW,CAAX,IAAkB,CAAlB,EAkBE,IAjBA,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,GAAoB;AAClB,QAAA,IAAA,EAAM,CAAA,CAAI,IAAJ,CAAS,WAAT,EADY;AAElB,QAAA,SAAA,EAAW,CAAA,CAAI,IAAJ,KAAa,KAFN;AAGlB,QAAA,YAAA,EAAc,CAAA,CAAI,OAHA;AAIlB,QAAA,OAAA,EAAS,CAAA,CAAI,OAJK;AAKlB,QAAA,OAAA,EAAS,CAAA,CAAI,OAAJ,GAAc,KAAK,SAAL,CAAe,iBAAf,GAAmC,cAAnC,CAAkD,SAAlD,CAA4D,CAAA,CAAI,OAAhE,CAAd,GAAyF,EALhF;AAMlB,QAAA,UAAA,EAAY,CAAA,CAAI,UAAJ,KAAmB;AANb,OAApB,EASI,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,IAAlB,KAA2B,SAA3B,KACF,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,GAAiC;AAAE,QAAA,KAAA,EAAS,CAAA,CAAX;AAAkB,QAAA,IAAA,EAAQ,CAAA;AAA1B,QAAiC,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAnD,CAAjC,EAEI,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,KAAmC,KAAA,CAAnC,KACF,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,GAAiC,IAD/B,CAHF,CATJ,EAiBI,OAAO,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAzB,IAA0C,QAA1C,KACF,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,GAAiC,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,CAA+B,OAA/B,CAAuC,IAAvC,EAA6C,EAA7C,CAAjC,EAEI,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,CAA+B,QAA/B,CAAwC,IAAxC,CAHF,CAAJ,EAGqD;AACjD,cAAM,CAAA,GAAQ,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,CAA+B,KAA/B,CAAqC,IAArC,CAAd;AACI,QAAA,CAAA,CAAM,CAAN,CAAA,CAAS,WAAT,OAA2B,WAA3B,KACF,CAAA,CAAO,CAAA,CAAI,KAAX,CAAA,CAAkB,YAAlB,GAAiC,CAAA,CAAM,CAAN,CAD/B;AAOV;;AAAA,aAAO,CAAP;AAEF;;AAAA,QAAI,KAAK,cAAL,EAAJ,EACE,OAAO,CAAA,CAAK,CAAL,CAAA,CAAQ,cAAf;AAEF,QAAI,KAAK,qBAAL,EAAJ,EACE,OAAO,CAAP;AAEF,QAAI,CAAA,CAAW,UAAX,KAA0B,KAAK,OAAL,CAAa,IAA3C,EACE,OAAK,KAAK,OAAL,CAAa,SAAb,GAGE,KAAK,iBAAL,CAAuB,CAAvB,CAHF,GACI,QAAA,CAAS,CAAT,EAAmB,EAAnB,CADT;AAKF,QAAI,CAAA,CAAW,UAAX,KAA0B,KAAK,OAAL,CAAa,IAA3C,EACE,OAAO,QAAA,CAAS,CAAT,EAAmB,EAAnB,CAAP;;AAEF,QAAI,KAAK,aAAL,MAAwB,KAAK,aAAL,EAAxB,IAAgD,KAAK,aAAL,EAApD,EAA0E;AACxE,UAAI,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,UAAnC,EAA+C;AAG7C,YAAI,KAAK,aAAL,MAAwB,CAAA,KAAa,CAAzC,EACE,MAAM,IAAI,CAAA,CAAgB,gBAApB,EAAN;;AAGF,aAAA,MAAW,CAAX,IAAkB,CAAA,CAAK,CAAL,CAAlB,EACE,IAAI,MAAA,CAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,CAAA,CAAK,CAAL,CAArC,EAA8C,CAA9C,CAAJ,EAAwD;AACtD,gBAAM,CAAA,GAAS,CAAA,CAAK,CAAL,CAAA,CAAQ,CAAR,CAAf;AAAA,gBAEM,CAAA,GAAO,CAAA,CAAE,IAAF,CAAO,KAAK,KAAL,CAAW,aAAlB,EAAiC,CAAA,IAAa,CAAA,CAAU,SAAV,KAAwB,CAAxB,IAA+B,CAAA,CAAU,KAAV,KAAoB,CAAjG,CAFb;AAIA,eAAK,QAAL,CAAc,UAAd,CAAyB,CAAA,IAAQ,CAAA,CAAK,SAAb,IAA0B,CAAnD,IAA0D,CAA1D;AAA0D;AAKhE;;AAAA,aAAI,KAAK,aAAL,KACK,CACL,KAAK,QADA,EAEL,IAFK,CADL,GAOG,CACL,KAAK,QAAL,IAAiB,CAAA,KAAS,KAAK,OAAL,CAAa,KAAb,IAAsB,CAAA,CAAK,CAAL,CAAtB,IAAiC,CAA1C,CAAjB,IAAoE,KAAA,CAD/D,EAEL,CAFK,CAPP;AAYF;;AAAA,WAAI,KAAK,UAAL,KACK,CAAC,CAAD,EAAO,CAAP,CADL,GAGG,CAHP;AAMF;;AAAA,EAAA,WAAA,CAAY,CAAZ,EAAiB,CAAjB,EAA2B;AACzB,QAAI,CAAJ,EACI,CADJ,EAEI,CAFJ,EAGI,CAHJ,EAII,CAJJ,EAKI,CALJ;AAOA,UAAM,CAAA,GAAO,CAAA,CAAI,IAAJ,IAAY,CAAA,CAAI,QAA7B;AAAA,UACM,CAAA,GAAa,CAAA,CAAI,OAAJ,IAAe,CAAA,CAAI,cADtC;AAAA,UAEM,CAAA,GAAY,CAAA,CAAI,MAAJ,IAAc,CAAA,CAAI,aAFpC;;AAIA,YAAQ,CAAR;AAAQ,WACD,OADC;AAEJ,eAAA,CAAA,GAAQ,CAAA,CAAW,KAAX,CAAiB,yCAAjB,CAAR,EACA,CAAA,GAAQ,CAAA,GAAQ,CAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CAD3B,EAEA,CAAA,GAAQ,CAAA,CAAW,KAAX,CAAiB,kBAAjB,CAFR,EAGA,CAAA,GAAQ,CAAA,GAAQ,CAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CAH3B,EAKO,IAAI,CAAA,CAAgB,yBAApB,CAA8C;AACnD,UAAA,OAAA,EAAS,CAD0C;AAEnD,UAAA,MAAA,EAAQ,IAF2C;AAGnD,UAAA,KAAA,EAAA,CAHmD;AAInD,UAAA,KAAA,EAAA,CAJmD;AAKnD,UAAA,MAAA,EAAQ,CAL2C;AAMnD,UAAA,KAAA,EAAO;AAN4C,SAA9C,CALP;;AAWS,WAEN,OAFM;AAKT,eAAI,CAAA,KAAc,CAAA,GAAQ,CAAA,CAAU,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,EAA4B,KAA5B,CAAkC,yBAAlC,CAAtB,CAAA,IACF,CAAA,GAAS,CAAA,CAAE,SAAF,CAAY,CAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,IAAf,CAAZ,EAAkC,CAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,IAAf,CAAlC,CAAT,EACA,CAAA,GAAS,EADT,EAEA,CAAA,GAAU,kBAFV,EAIA,CAAA,CAAE,MAAF,CAAS,CAAT,EAAiB,CAAC,CAAD,EAAQ,CAAR,KAAkB;AACjC,UAAA,CAAA,CAAO,IAAP,CAAY,IAAI,CAAA,CAAgB,mBAApB,CACV,KAAK,+BAAL,CAAqC,CAArC,CADU,EAEV,kBAFU,EAGV,CAHU,EAIV,CAJU,EAKV,KAAK,QALK,EAMV,YANU,CAAZ;AAME,SAPJ,CAJA,EAeI,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,UAAzB,IACF,CAAA,CAAE,MAAF,CAAS,KAAK,KAAL,CAAW,UAApB,EAAgC,CAAA,IAAc;AAC5C,cAAI,CAAA,CAAE,OAAF,CAAU,CAAA,CAAW,MAArB,EAA6B,MAAA,CAAO,IAAP,CAAY,CAAZ,CAA7B,KAAqD,CAAC,CAAC,CAAA,CAAW,GAAtE,EACE,OAAA,CAAA,GAAU,CAAA,CAAW,GAArB,EACO,CAAA,CADP;AACO,SAHX,CAhBF,EAwBO,IAAI,CAAA,CAAgB,qBAApB,CAA0C;AAAE,UAAA,OAAA,EAAA,CAAF;AAAW,UAAA,MAAA,EAAA,CAAX;AAAmB,UAAA,MAAA,EAAQ,CAA3B;AAAgC,UAAA,MAAA,EAAA,CAAhC;AAAwC,UAAA,KAAA,EAAO;AAA/C,SAA1C,CAzBL,IA4BG,IAAI,CAAA,CAAgB,qBAApB,CAA0C;AAC/C,UAAA,OAAA,EAAS,CADsC;AAE/C,UAAA,MAAA,EAAQ,CAFuC;AAG/C,UAAA,KAAA,EAAO;AAHwC,SAA1C,CA5BP;;AA+BS,WAGN,OAHM;AAIT,eAAA,CAAA,GAAQ,CAAA,CAAU,KAAV,CAAgB,yBAAhB,CAAR,EAEI,CAAA,KACF,CAAA,GAAS,CAAA,CAAE,SAAF,CAAY,CAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,IAAf,CAAZ,EAAkC,CAAA,CAAM,CAAN,CAAA,CAAS,KAAT,CAAe,IAAf,CAAlC,CADP,CAFJ,EAKA,CAAA,GAAU,4BALV,EAOO,IAAI,CAAA,CAAgB,wBAApB,CAA6C;AAClD,UAAA,OAAA,EAAA,CADkD;AAElD,UAAA,UAAA,EAAY,CAAA,CAAI,UAFkC;AAGlD,UAAA,MAAA,EAAA,CAHkD;AAIlD,UAAA,KAAA,EAAO,CAAA,CAAI,KAJuC;AAKlD,UAAA,MAAA,EAAQ,CAL0C;AAMlD,UAAA,KAAA,EAAO;AAN2C,SAA7C,CAPP;;AAaS,WAGN,OAHM;AAIT,YAAI,CAAA,CAAI,GAAJ,IAAW,uBAAuB,IAAvB,CAA4B,CAAA,CAAI,GAAhC,CAAf,EACE,MAAA,CAAA,GAAU,0BAAV,EACA,CAAA,GAAQ,CAAA,CAAW,KAAX,CAAiB,+BAAjB,CADR,EAEA,CAAA,GAAQ,CAAA,GAAQ,CAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CAF3B,EAGA,CAAA,GAAQ,CAAA,CAAW,KAAX,CAAiB,mBAAjB,CAHR,EAIA,CAAA,GAAQ,CAAA,GAAQ,CAAA,CAAM,CAAN,CAAR,GAAmB,KAAA,CAJ3B,EAMM,IAAI,CAAA,CAAgB,sBAApB,CAA2C;AAC/C,UAAA,OAAA,EAAA,CAD+C;AAE/C,UAAA,UAAA,EAAY,CAFmC;AAG/C,UAAA,MAAA,EAAA,CAH+C;AAI/C,UAAA,KAAA,EAAA,CAJ+C;AAK/C,UAAA,MAAA,EAAQ,CALuC;AAM/C,UAAA,KAAA,EAAO;AANwC,SAA3C,CANN;;AAYS;AAKX,eAAO,IAAI,CAAA,CAAgB,aAApB,CAAkC,CAAlC,EAAuC;AAAE,UAAA,KAAA,EAAO;AAAT,SAAvC,CAAP;AAxFJ;AA4FF;;AAAA,EAAA,kBAAA,GAAqB;AACnB,WAAO,gPAAgP,IAAhP,CAAqP,KAAK,GAA1P,CAAP;AAGF;;AAAA,EAAA,gBAAA,GAAmB;AACjB,WAAO,IAAP;AAAO;;AAhZuB;;AAAlC,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAoZA,MAAA,CAAO,OAAP,GAAiB,CApZjB,EAqZA,MAAA,CAAO,OAAP,CAAe,KAAf,GAAuB,CArZvB,EAsZA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,CAtZzB","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (err) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}