{"ast":null,"code":"var m = Object.create;\nvar r = Object.defineProperty;\nvar C = Object.getOwnPropertyDescriptor;\nvar $ = Object.getOwnPropertyNames,\n    g = Object.getOwnPropertySymbols,\n    D = Object.getPrototypeOf,\n    i = Object.prototype.hasOwnProperty,\n    f = Object.prototype.propertyIsEnumerable;\n\nvar s = (e, n, t) => n in e ? r(e, n, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : e[n] = t,\n    d = (e, n) => {\n  for (var t in n || (n = {})) i.call(n, t) && s(e, t, n[t]);\n\n  if (g) for (var t of g(n)) f.call(n, t) && s(e, t, n[t]);\n  return e;\n};\n\nvar p = e => r(e, \"__esModule\", {\n  value: !0\n}),\n    a = (e, n) => r(e, \"name\", {\n  value: n,\n  configurable: !0\n});\n\nvar l = (e, n) => {\n  var t = {};\n\n  for (var o in e) i.call(e, o) && n.indexOf(o) < 0 && (t[o] = e[o]);\n\n  if (e != null && g) for (var o of g(e)) n.indexOf(o) < 0 && f.call(e, o) && (t[o] = e[o]);\n  return t;\n};\n\nvar L = (e, n) => {\n  p(e);\n\n  for (var t in n) r(e, t, {\n    get: n[t],\n    enumerable: !0\n  });\n},\n    k = (e, n, t) => {\n  if (n && typeof n == \"object\" || typeof n == \"function\") for (let o of $(n)) !i.call(e, o) && o !== \"default\" && r(e, o, {\n    get: () => n[o],\n    enumerable: !(t = C(n, o)) || t.enumerable\n  });\n  return e;\n},\n    x = e => k(p(r(e != null ? m(D(e)) : {}, \"default\", e && e.__esModule && \"default\" in e ? {\n  get: () => e.default,\n  enumerable: !0\n} : {\n  value: e,\n  enumerable: !0\n})), e);\n\nvar b = (e, n, t) => (s(e, typeof n != \"symbol\" ? n + \"\" : n, t), t);\n\nL(exports, {\n  Logger: () => c,\n  logger: () => q\n});\nvar h = x(require(\"debug\")),\n    w = x(require(\"util\"));\n\nclass c {\n  constructor() {\n    let o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    b(this, \"config\");\n    var u = o,\n        {\n      context: n = \"sequelize\"\n    } = u,\n        t = l(u, [\"context\"]);\n    this.config = d({\n      context: n\n    }, t);\n  }\n\n  warn(n) {\n    console.warn(`(${this.config.context}) Warning: ${n}`);\n  }\n\n  inspect(n) {\n    return w.default.inspect(n, {\n      showHidden: !1,\n      depth: 1\n    });\n  }\n\n  debugContext(n) {\n    return (0, h.default)(`${this.config.context}:${n}`);\n  }\n\n}\n\na(c, \"Logger\");\nconst q = new c();","map":{"version":3,"sources":["../../../lib/utils/logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,CAAA,CAAA,OAAA,EAAA;AAAA,EAAA,MAAA,EAAA,MAAA,CAAA;AAAA,EAAA,MAAA,EAAA,MAAA;AAAA,CAAA,CAAA;AAOA,IAAA,CAAA,GAAsB,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAtB;AAAA,IACA,CAAA,GAAiB,CAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CADjB;;AAiBO,MAAA,CAAA,CAAa;AAGlB,EAAA,WAAA,GAA4E;AAAA,QAAhE,CAAgE,uEAAJ,EAAI;AAFlE,IAAA,CAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAEE,QAAA,CAAA,GAAA,CAAA;AAAA,QAAE;AAAA,MAAA,OAAA,EAAA,CAAA,GAAU;AAAV,QAAF,CAAA;AAAA,QAA4B,CAAA,GAAA,CAAA,CAA5B,CAA4B,EAAA,CAA1B,SAA0B,CAAA,CAA5B;AACV,SAAK,MAAL,GAAc,CAAA,CAAA;AACZ,MAAA,OAAA,EAAA;AADY,KAAA,EAET,CAFS,CAAd;AAWF;;AAAA,EAAA,IAAA,CAAK,CAAL,EAA4B;AAC1B,IAAA,OAAA,CAAQ,IAAR,CAAa,IAAI,KAAK,MAAL,CAAY,OAAA,cAAqB,CAAA,EAAlD;AASF;;AAAA,EAAA,OAAA,CAAQ,CAAR,EAAgC;AAC9B,WAAO,CAAA,CAAA,OAAA,CAAK,OAAL,CAAa,CAAb,EAAoB;AACzB,MAAA,UAAA,EAAY,CAAA,CADa;AAEzB,MAAA,KAAA,EAAO;AAFkB,KAApB,CAAP;AAYF;;AAAA,EAAA,YAAA,CAAa,CAAb,EAA+C;AAC7C,WAAO,CAAA,GAAA,CAAA,CAAA,OAAA,EAAU,GAAG,KAAK,MAAL,CAAY,OAAA,IAAW,CAAA,EAApC,CAAP;AAA2C;;AAvC3B;;AAAb,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA;AA2CA,MAAM,CAAA,GAAS,IAAI,CAAJ,EAAf","sourcesContent":["/**\n * @file Sequelize module for debug and deprecation messages.\n * It require a `context` for which messages will be printed.\n *\n * @module logging\n * @access package\n */\nimport nodeDebug from 'debug';\nimport util from 'util';\n\n/**\n * The configuration for sequelize's logging interface.\n *\n * @access package\n */\nexport interface LoggerConfig {\n  /**\n   * The context which the logger should log in.\n   *\n   * @default 'sequelize'\n   */\n  context?: string;\n}\n\nexport class Logger {\n  protected config: LoggerConfig;\n\n  constructor({ context = 'sequelize', ...rest }: Partial<LoggerConfig> = {}) {\n    this.config = {\n      context,\n      ...rest\n    };\n  }\n\n  /**\n   * Logs a warning in the logger's context.\n   *\n   * @param message The message of the warning.\n   */\n  warn(message: string): void {\n    console.warn(`(${this.config.context}) Warning: ${message}`);\n  }\n\n  /**\n   * Uses node's util.inspect to stringify a value.\n   *\n   * @param value The value which should be inspected.\n   * @returns The string of the inspected value.\n   */\n  inspect(value: unknown): string {\n    return util.inspect(value, {\n      showHidden: false,\n      depth: 1\n    });\n  }\n\n  /**\n   * Gets a debugger for a context.\n   *\n   * @param name The name of the context.\n   * @returns A debugger interace which can be used to debug.\n   */\n  debugContext(name: string): nodeDebug.Debugger {\n    return nodeDebug(`${this.config.context}:${name}`);\n  }\n}\n\nexport const logger = new Logger();\n"]},"metadata":{},"sourceType":"script"}