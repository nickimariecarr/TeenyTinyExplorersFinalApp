{"ast":null,"code":"\"use strict\";\n\nvar q = Object.defineProperty;\n\nvar e = (t, i) => q(t, \"name\", {\n  value: i,\n  configurable: !0\n});\n\nconst I = require(\"moment\");\n\nmodule.exports = t => {\n  const i = t.ABSTRACT.warn.bind(void 0, \"https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx\");\n\n  function o(s) {\n    (s._length || s.options.length || s._unsigned || s._zerofill) && (i(`MSSQL does not support '${s.key}' with options. Plain '${s.key}' will be used instead.`), s._length = void 0, s.options.length = void 0, s._unsigned = void 0, s._zerofill = void 0);\n  }\n\n  e(o, \"removeUnsupportedIntegerOptions\"), t.DATE.types.mssql = [43], t.STRING.types.mssql = [231, 173], t.CHAR.types.mssql = [175], t.TEXT.types.mssql = !1, t.TINYINT.types.mssql = [30], t.SMALLINT.types.mssql = [34], t.MEDIUMINT.types.mssql = !1, t.INTEGER.types.mssql = [38], t.BIGINT.types.mssql = !1, t.FLOAT.types.mssql = [109], t.TIME.types.mssql = [41], t.DATEONLY.types.mssql = [40], t.BOOLEAN.types.mssql = [104], t.BLOB.types.mssql = [165], t.DECIMAL.types.mssql = [106], t.UUID.types.mssql = !1, t.ENUM.types.mssql = !1, t.REAL.types.mssql = [109], t.DOUBLE.types.mssql = [109], t.GEOMETRY.types.mssql = !1;\n\n  class r extends t.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") return i(\"MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.\"), \"VARBINARY(256)\";\n        i(\"MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.\");\n      }\n\n      return \"VARBINARY(MAX)\";\n    }\n\n    _hexify(n) {\n      return `0x${n}`;\n    }\n\n  }\n\n  e(r, \"BLOB\");\n\n  class d extends t.STRING {\n    toSql() {\n      return this._binary ? `BINARY(${this._length})` : `NVARCHAR(${this._length})`;\n    }\n\n    _stringify(n, l) {\n      return this._binary ? r.prototype._stringify(n) : l.escape(n);\n    }\n\n    _bindParam(n, l) {\n      return l.bindParam(this._binary ? Buffer.from(n) : n);\n    }\n\n  }\n\n  e(d, \"STRING\"), d.prototype.escape = !1;\n\n  class u extends t.TEXT {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === \"tiny\") return i(\"MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.\"), \"NVARCHAR(256)\";\n        i(\"MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.\");\n      }\n\n      return \"NVARCHAR(MAX)\";\n    }\n\n  }\n\n  e(u, \"TEXT\");\n\n  class h extends t.BOOLEAN {\n    toSql() {\n      return \"BIT\";\n    }\n\n  }\n\n  e(h, \"BOOLEAN\");\n\n  class f extends t.UUID {\n    toSql() {\n      return \"CHAR(36)\";\n    }\n\n  }\n\n  e(f, \"UUID\");\n\n  class A extends t.NOW {\n    toSql() {\n      return \"GETDATE()\";\n    }\n\n  }\n\n  e(A, \"NOW\");\n\n  class c extends t.DATE {\n    toSql() {\n      return \"DATETIMEOFFSET\";\n    }\n\n  }\n\n  e(c, \"DATE\");\n\n  class m extends t.DATEONLY {\n    static parse(n) {\n      return I(n).format(\"YYYY-MM-DD\");\n    }\n\n  }\n\n  e(m, \"DATEONLY\");\n\n  class L extends t.INTEGER {\n    constructor(n) {\n      super(n);\n      o(this);\n    }\n\n  }\n\n  e(L, \"INTEGER\");\n\n  class R extends t.TINYINT {\n    constructor(n) {\n      super(n);\n      o(this);\n    }\n\n  }\n\n  e(R, \"TINYINT\");\n\n  class E extends t.SMALLINT {\n    constructor(n) {\n      super(n);\n      o(this);\n    }\n\n  }\n\n  e(E, \"SMALLINT\");\n\n  class S extends t.BIGINT {\n    constructor(n) {\n      super(n);\n      o(this);\n    }\n\n  }\n\n  e(S, \"BIGINT\");\n\n  class N extends t.REAL {\n    constructor(n, l) {\n      super(n, l);\n      (this._length || this.options.length || this._unsigned || this._zerofill) && (i(\"MSSQL does not support REAL with options. Plain `REAL` will be used instead.\"), this._length = void 0, this.options.length = void 0, this._unsigned = void 0, this._zerofill = void 0);\n    }\n\n  }\n\n  e(N, \"REAL\");\n\n  class _ extends t.FLOAT {\n    constructor(n, l) {\n      super(n, l);\n      this._decimals && (i(\"MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.\"), this._length = void 0, this.options.length = void 0), this._unsigned && (i(\"MSSQL does not support Float unsigned. `UNSIGNED` was removed.\"), this._unsigned = void 0), this._zerofill && (i(\"MSSQL does not support Float zerofill. `ZEROFILL` was removed.\"), this._zerofill = void 0);\n    }\n\n  }\n\n  e(_, \"FLOAT\");\n\n  class g extends t.ENUM {\n    toSql() {\n      return \"VARCHAR(255)\";\n    }\n\n  }\n\n  return e(g, \"ENUM\"), {\n    BLOB: r,\n    BOOLEAN: h,\n    ENUM: g,\n    STRING: d,\n    UUID: f,\n    DATE: c,\n    DATEONLY: m,\n    NOW: A,\n    TINYINT: R,\n    SMALLINT: E,\n    INTEGER: L,\n    BIGINT: S,\n    REAL: N,\n    FLOAT: _,\n    TEXT: u\n  };\n};","map":{"version":3,"sources":["../../../../lib/dialects/mssql/data-types.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAS,OAAA,CAAQ,QAAR,CAAf;;AAEA,MAAA,CAAO,OAAP,GAAiB,CAAA,IAAa;AAC5B,QAAM,CAAA,GAAO,CAAA,CAAU,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,CAA6B,KAAA,CAA7B,EAAwC,uEAAxC,CAAb;;AAQA,WAAA,CAAA,CAAyC,CAAzC,EAAmD;AAC7C,KAAA,CAAA,CAAS,OAAT,IAAoB,CAAA,CAAS,OAAT,CAAiB,MAArC,IAA+C,CAAA,CAAS,SAAxD,IAAqE,CAAA,CAAS,SAA9E,MACF,CAAA,CAAK,2BAA2B,CAAA,CAAS,GAAA,0BAA6B,CAAA,CAAS,GAAA,yBAA/E,CAAA,EACA,CAAA,CAAS,OAAT,GAAmB,KAAA,CADnB,EAEA,CAAA,CAAS,OAAT,CAAiB,MAAjB,GAA0B,KAAA,CAF1B,EAGA,CAAA,CAAS,SAAT,GAAqB,KAAA,CAHrB,EAIA,CAAA,CAAS,SAAT,GAAqB,KAAA,CALnB;AADG;;AAAA,EAAA,CAAA,CAAA,CAAA,EAAA,iCAAA,CAAA,EAgBT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAC,EAAD,CAhBpB,EAiBT,CAAA,CAAU,MAAV,CAAiB,KAAjB,CAAuB,KAAvB,GAA+B,CAAC,GAAD,EAAM,GAAN,CAjBtB,EAkBT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAC,GAAD,CAlBpB,EAmBT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAA,CAnBpB,EAqBT,CAAA,CAAU,OAAV,CAAkB,KAAlB,CAAwB,KAAxB,GAAgC,CAAC,EAAD,CArBvB,EAsBT,CAAA,CAAU,QAAV,CAAmB,KAAnB,CAAyB,KAAzB,GAAiC,CAAC,EAAD,CAtBxB,EAuBT,CAAA,CAAU,SAAV,CAAoB,KAApB,CAA0B,KAA1B,GAAkC,CAAA,CAvBzB,EAwBT,CAAA,CAAU,OAAV,CAAkB,KAAlB,CAAwB,KAAxB,GAAgC,CAAC,EAAD,CAxBvB,EAyBT,CAAA,CAAU,MAAV,CAAiB,KAAjB,CAAuB,KAAvB,GAA+B,CAAA,CAzBtB,EA0BT,CAAA,CAAU,KAAV,CAAgB,KAAhB,CAAsB,KAAtB,GAA8B,CAAC,GAAD,CA1BrB,EA2BT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAC,EAAD,CA3BpB,EA4BT,CAAA,CAAU,QAAV,CAAmB,KAAnB,CAAyB,KAAzB,GAAiC,CAAC,EAAD,CA5BxB,EA6BT,CAAA,CAAU,OAAV,CAAkB,KAAlB,CAAwB,KAAxB,GAAgC,CAAC,GAAD,CA7BvB,EA8BT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAC,GAAD,CA9BpB,EA+BT,CAAA,CAAU,OAAV,CAAkB,KAAlB,CAAwB,KAAxB,GAAgC,CAAC,GAAD,CA/BvB,EAgCT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAA,CAhCpB,EAiCT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAA,CAjCpB,EAkCT,CAAA,CAAU,IAAV,CAAe,KAAf,CAAqB,KAArB,GAA6B,CAAC,GAAD,CAlCpB,EAmCT,CAAA,CAAU,MAAV,CAAiB,KAAjB,CAAuB,KAAvB,GAA+B,CAAC,GAAD,CAnCtB,EAqCT,CAAA,CAAU,QAAV,CAAmB,KAAnB,CAAyB,KAAzB,GAAiC,CAAA,CArCxB;;AAuCT,QAAA,CAAA,SAAmB,CAAA,CAAU,IAA7B,CAAkC;AAChC,IAAA,KAAA,GAAQ;AACN,UAAI,KAAK,OAAT,EAAkB;AAChB,YAAI,KAAK,OAAL,CAAa,WAAb,OAA+B,MAAnC,EACE,OAAA,CAAA,CAAK,uGAAL,CAAA,EACO,gBADP;AAGF,QAAA,CAAA,CAAK,8FAAL,CAAA;AAEF;;AAAA,aAAO,gBAAP;AAEF;;AAAA,IAAA,OAAA,CAAQ,CAAR,EAAa;AACX,aAAO,KAAK,CAAA,EAAZ;AAAY;;AAZkB;;AAAlC,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA;;AAiBA,QAAA,CAAA,SAAqB,CAAA,CAAU,MAA/B,CAAsC;AACpC,IAAA,KAAA,GAAQ;AACN,aAAK,KAAK,OAAL,GAGE,UAAU,KAAK,OAFb,GADJ,GACI,YAAY,KAAK,OAAA,GAD1B;AAKF;;AAAA,IAAA,UAAA,CAAW,CAAX,EAAkB,CAAlB,EAA2B;AACzB,aAAI,KAAK,OAAL,GACK,CAAA,CAAK,SAAL,CAAe,UAAf,CAA0B,CAA1B,CADL,GAGG,CAAA,CAAQ,MAAR,CAAe,CAAf,CAHP;AAKF;;AAAA,IAAA,UAAA,CAAW,CAAX,EAAkB,CAAlB,EAA2B;AACzB,aAAO,CAAA,CAAQ,SAAR,CAAkB,KAAK,OAAL,GAAe,MAAA,CAAO,IAAP,CAAY,CAAZ,CAAf,GAAoC,CAAtD,CAAP;AAA6D;;AAd3B;;AAAtC,EAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAkBA,CAAA,CAAO,SAAP,CAAiB,MAAjB,GAA0B,CAAA,CAlB1B;;AAoBA,QAAA,CAAA,SAAmB,CAAA,CAAU,IAA7B,CAAkC;AAChC,IAAA,KAAA,GAAQ;AAGN,UAAI,KAAK,OAAT,EAAkB;AAChB,YAAI,KAAK,OAAL,CAAa,WAAb,OAA+B,MAAnC,EACE,OAAA,CAAA,CAAK,sGAAL,CAAA,EACO,eADP;AAGF,QAAA,CAAA,CAAK,6FAAL,CAAA;AAEF;;AAAA,aAAO,eAAP;AAAO;;AAXuB;;AAAlC,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA;;AAeA,QAAA,CAAA,SAAsB,CAAA,CAAU,OAAhC,CAAwC;AACtC,IAAA,KAAA,GAAQ;AACN,aAAO,KAAP;AAAO;;AAF6B;;AAAxC,EAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA;;AAMA,QAAA,CAAA,SAAmB,CAAA,CAAU,IAA7B,CAAkC;AAChC,IAAA,KAAA,GAAQ;AACN,aAAO,UAAP;AAAO;;AAFuB;;AAAlC,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA;;AAMA,QAAA,CAAA,SAAkB,CAAA,CAAU,GAA5B,CAAgC;AAC9B,IAAA,KAAA,GAAQ;AACN,aAAO,WAAP;AAAO;;AAFqB;;AAAhC,EAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA;;AAMA,QAAA,CAAA,SAAmB,CAAA,CAAU,IAA7B,CAAkC;AAChC,IAAA,KAAA,GAAQ;AACN,aAAO,gBAAP;AAAO;;AAFuB;;AAAlC,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA;;AAMA,QAAA,CAAA,SAAuB,CAAA,CAAU,QAAjC,CAA0C;AACjC,WAAA,KAAA,CAAM,CAAN,EAAa;AAClB,aAAO,CAAA,CAAO,CAAP,CAAA,CAAc,MAAd,CAAqB,YAArB,CAAP;AAA4B;;AAFU;;AAA1C,EAAA,CAAA,CAAA,CAAA,EAAA,UAAA,CAAA;;AAMA,QAAA,CAAA,SAAsB,CAAA,CAAU,OAAhC,CAAwC;AACtC,IAAA,WAAA,CAAY,CAAZ,EAAoB;AAClB,YAAM,CAAN;AACA,MAAA,CAAA,CAAgC,IAAhC,CAAA;AAAgC;;AAHI;;AAAxC,EAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA;;AAMA,QAAA,CAAA,SAAsB,CAAA,CAAU,OAAhC,CAAwC;AACtC,IAAA,WAAA,CAAY,CAAZ,EAAoB;AAClB,YAAM,CAAN;AACA,MAAA,CAAA,CAAgC,IAAhC,CAAA;AAAgC;;AAHI;;AAAxC,EAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA;;AAMA,QAAA,CAAA,SAAuB,CAAA,CAAU,QAAjC,CAA0C;AACxC,IAAA,WAAA,CAAY,CAAZ,EAAoB;AAClB,YAAM,CAAN;AACA,MAAA,CAAA,CAAgC,IAAhC,CAAA;AAAgC;;AAHM;;AAA1C,EAAA,CAAA,CAAA,CAAA,EAAA,UAAA,CAAA;;AAMA,QAAA,CAAA,SAAqB,CAAA,CAAU,MAA/B,CAAsC;AACpC,IAAA,WAAA,CAAY,CAAZ,EAAoB;AAClB,YAAM,CAAN;AACA,MAAA,CAAA,CAAgC,IAAhC,CAAA;AAAgC;;AAHE;;AAAtC,EAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA;;AAMA,QAAA,CAAA,SAAmB,CAAA,CAAU,IAA7B,CAAkC;AAChC,IAAA,WAAA,CAAY,CAAZ,EAAoB,CAApB,EAA8B;AAC5B,YAAM,CAAN,EAAc,CAAd;AAEI,OAAA,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAA7B,IAAuC,KAAK,SAA5C,IAAyD,KAAK,SAA9D,MACF,CAAA,CAAK,8EAAL,CAAA,EACA,KAAK,OAAL,GAAe,KAAA,CADf,EAEA,KAAK,OAAL,CAAa,MAAb,GAAsB,KAAA,CAFtB,EAGA,KAAK,SAAL,GAAiB,KAAA,CAHjB,EAIA,KAAK,SAAL,GAAiB,KAAA,CALf;AAKe;;AATW;;AAAlC,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA;;AAaA,QAAA,CAAA,SAAoB,CAAA,CAAU,KAA9B,CAAoC;AAClC,IAAA,WAAA,CAAY,CAAZ,EAAoB,CAApB,EAA8B;AAC5B,YAAM,CAAN,EAAc,CAAd;AAKI,WAAK,SAAL,KACF,CAAA,CAAK,iFAAL,CAAA,EACA,KAAK,OAAL,GAAe,KAAA,CADf,EAEA,KAAK,OAAL,CAAa,MAAb,GAAsB,KAAA,CAHpB,GAKA,KAAK,SAAL,KACF,CAAA,CAAK,gEAAL,CAAA,EACA,KAAK,SAAL,GAAiB,KAAA,CAFf,CALA,EASA,KAAK,SAAL,KACF,CAAA,CAAK,gEAAL,CAAA,EACA,KAAK,SAAL,GAAiB,KAAA,CAFf,CATA;AAWe;;AAlBa;;AAApC,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA;;AAsBA,QAAA,CAAA,SAAmB,CAAA,CAAU,IAA7B,CAAkC;AAChC,IAAA,KAAA,GAAQ;AACN,aAAO,cAAP;AAAO;;AAFuB;;AAAlC,SAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAMO;AACL,IAAA,IAAA,EAAA,CADK;AAEL,IAAA,OAAA,EAAA,CAFK;AAGL,IAAA,IAAA,EAAA,CAHK;AAIL,IAAA,MAAA,EAAA,CAJK;AAKL,IAAA,IAAA,EAAA,CALK;AAML,IAAA,IAAA,EAAA,CANK;AAOL,IAAA,QAAA,EAAA,CAPK;AAQL,IAAA,GAAA,EAAA,CARK;AASL,IAAA,OAAA,EAAA,CATK;AAUL,IAAA,QAAA,EAAA,CAVK;AAWL,IAAA,OAAA,EAAA,CAXK;AAYL,IAAA,MAAA,EAAA,CAZK;AAaL,IAAA,IAAA,EAAA,CAbK;AAcL,IAAA,KAAA,EAAA,CAdK;AAeL,IAAA,IAAA,EAAA;AAfK,GANP;AAqBE,CAlNJ","sourcesContent":["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\n\n  /**\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types: [hex, ...]\n   *\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\n   */\n\n  BaseTypes.DATE.types.mssql = [43];\n  BaseTypes.STRING.types.mssql = [231, 173];\n  BaseTypes.CHAR.types.mssql = [175];\n  BaseTypes.TEXT.types.mssql = false;\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\n  BaseTypes.TINYINT.types.mssql = [30];\n  BaseTypes.SMALLINT.types.mssql = [34];\n  BaseTypes.MEDIUMINT.types.mssql = false;\n  BaseTypes.INTEGER.types.mssql = [38];\n  BaseTypes.BIGINT.types.mssql = false;\n  BaseTypes.FLOAT.types.mssql = [109];\n  BaseTypes.TIME.types.mssql = [41];\n  BaseTypes.DATEONLY.types.mssql = [40];\n  BaseTypes.BOOLEAN.types.mssql = [104];\n  BaseTypes.BLOB.types.mssql = [165];\n  BaseTypes.DECIMAL.types.mssql = [106];\n  BaseTypes.UUID.types.mssql = false;\n  BaseTypes.ENUM.types.mssql = false;\n  BaseTypes.REAL.types.mssql = [109];\n  BaseTypes.DOUBLE.types.mssql = [109];\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\n  BaseTypes.GEOMETRY.types.mssql = false;\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\n          return 'VARBINARY(256)';\n        }\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\n      }\n      return 'VARBINARY(MAX)';\n    }\n    _hexify(hex) {\n      return `0x${hex}`;\n    }\n  }\n\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (!this._binary) {\n        return `NVARCHAR(${this._length})`;\n      }\n      return `BINARY(${this._length})`;\n    }\n    _stringify(value, options) {\n      if (this._binary) {\n        return BLOB.prototype._stringify(value);\n      }\n      return options.escape(value);\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\n    }\n  }\n\n  STRING.prototype.escape = false;\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\n      // Using unicode is just future proof\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\n          return 'NVARCHAR(256)';\n        }\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\n      }\n      return 'NVARCHAR(MAX)';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BIT';\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class NOW extends BaseTypes.NOW {\n    toSql() {\n      return 'GETDATE()';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'DATETIMEOFFSET';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class REAL extends BaseTypes.REAL {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does not support any options for real\n      if (this._length || this.options.length || this._unsigned || this._zerofill) {\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._unsigned = undefined;\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // MSSQL does only support lengths as option.\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n      }\n      if (this._unsigned) {\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  return {\n    BLOB,\n    BOOLEAN,\n    ENUM,\n    STRING,\n    UUID,\n    DATE,\n    DATEONLY,\n    NOW,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    REAL,\n    FLOAT,\n    TEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}