{"ast":null,"code":"\"use strict\";\n\nvar c = Object.defineProperty;\n\nvar s = (e, r) => c(e, \"name\", {\n  value: r,\n  configurable: !0\n});\n\nconst i = require(\"./base-error\");\n\nclass t extends i {\n  constructor(r, o) {\n    super(r.message);\n    this.name = \"SequelizeBulkRecordError\", this.errors = r, this.record = o;\n  }\n\n}\n\ns(t, \"BulkRecordError\"), module.exports = t;","map":{"version":3,"sources":["../../../lib/errors/bulk-record-error.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAY,OAAA,CAAQ,cAAR,CAAlB;;AASA,MAAA,CAAA,SAA8B,CAA9B,CAAwC;AACtC,EAAA,WAAA,CAAY,CAAZ,EAAmB,CAAnB,EAA2B;AACzB,UAAM,CAAA,CAAM,OAAZ;AACA,SAAK,IAAL,GAAY,0BAAZ,EACA,KAAK,MAAL,GAAc,CADd,EAEA,KAAK,MAAL,GAAc,CAFd;AAEc;;AALsB;;AAAxC,CAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EASA,MAAA,CAAO,OAAP,GAAiB,CATjB","sourcesContent":["'use strict';\n\nconst BaseError = require('./base-error');\n\n/**\n * Thrown when bulk operation fails, it represent per record level error.\n * Used with AggregateError\n *\n * @param {Error}  error   Error for a given record/instance\n * @param {object} record  DAO instance that error belongs to\n */\nclass BulkRecordError extends BaseError {\n  constructor(error, record) {\n    super(error.message);\n    this.name = 'SequelizeBulkRecordError';\n    this.errors = error;\n    this.record = record;\n  }\n}\n\nmodule.exports = BulkRecordError;\n"]},"metadata":{},"sourceType":"script"}