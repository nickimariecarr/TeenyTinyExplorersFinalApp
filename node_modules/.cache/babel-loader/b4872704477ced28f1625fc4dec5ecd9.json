{"ast":null,"code":"\"use strict\";\n\nvar a = Object.defineProperty;\n\nvar r = (t, s) => a(t, \"name\", {\n  value: s,\n  configurable: !0\n});\n\nclass e {}\n\nr(e, \"AbstractDialect\"), e.prototype.supports = {\n  DEFAULT: !0,\n  \"DEFAULT VALUES\": !1,\n  \"VALUES ()\": !1,\n  \"LIMIT ON UPDATE\": !1,\n  \"ORDER NULLS\": !1,\n  UNION: !0,\n  \"UNION ALL\": !0,\n  \"RIGHT JOIN\": !0,\n  returnValues: !1,\n  autoIncrement: {\n    identityInsert: !1,\n    defaultValue: !0,\n    update: !0\n  },\n  bulkDefault: !1,\n  schemas: !1,\n  transactions: !0,\n  settingIsolationLevelDuringTransaction: !0,\n  transactionOptions: {\n    type: !1\n  },\n  migrations: !0,\n  upserts: !0,\n  inserts: {\n    ignoreDuplicates: \"\",\n    updateOnDuplicate: !1,\n    onConflictDoNothing: \"\"\n  },\n  constraints: {\n    restrict: !0,\n    addConstraint: !0,\n    dropConstraint: !0,\n    unique: !0,\n    default: !1,\n    check: !0,\n    foreignKey: !0,\n    primaryKey: !0\n  },\n  index: {\n    collate: !0,\n    length: !1,\n    parser: !1,\n    concurrently: !1,\n    type: !1,\n    using: !0,\n    functionBased: !1,\n    operator: !1\n  },\n  groupedLimit: !0,\n  indexViaAlter: !1,\n  JSON: !1,\n  deferrableConstraints: !1\n}, module.exports = e, module.exports.AbstractDialect = e, module.exports.default = e;","map":{"version":3,"sources":["../../../../lib/dialects/abstract/index.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAA,CAAA,CAAsB;;AAAtB,CAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAEA,CAAA,CAAgB,SAAhB,CAA0B,QAA1B,GAAqC;AACnC,EAAA,OAAA,EAAW,CAAA,CADwB;AAEnC,oBAAkB,CAAA,CAFiB;AAGnC,eAAa,CAAA,CAHsB;AAInC,qBAAmB,CAAA,CAJgB;AAKnC,iBAAe,CAAA,CALoB;AAMnC,EAAA,KAAA,EAAS,CAAA,CAN0B;AAOnC,eAAa,CAAA,CAPsB;AAQnC,gBAAc,CAAA,CARqB;AAWnC,EAAA,YAAA,EAAc,CAAA,CAXqB;AAcnC,EAAA,aAAA,EAAe;AAEb,IAAA,cAAA,EAAgB,CAAA,CAFH;AAKb,IAAA,YAAA,EAAc,CAAA,CALD;AAQb,IAAA,MAAA,EAAQ,CAAA;AARK,GAdoB;AAyBnC,EAAA,WAAA,EAAa,CAAA,CAzBsB;AA0BnC,EAAA,OAAA,EAAS,CAAA,CA1B0B;AA2BnC,EAAA,YAAA,EAAc,CAAA,CA3BqB;AA4BnC,EAAA,sCAAA,EAAwC,CAAA,CA5BL;AA6BnC,EAAA,kBAAA,EAAoB;AAClB,IAAA,IAAA,EAAM,CAAA;AADY,GA7Be;AAgCnC,EAAA,UAAA,EAAY,CAAA,CAhCuB;AAiCnC,EAAA,OAAA,EAAS,CAAA,CAjC0B;AAkCnC,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,EADX;AAEP,IAAA,iBAAA,EAAmB,CAAA,CAFZ;AAGP,IAAA,mBAAA,EAAqB;AAHd,GAlC0B;AAuCnC,EAAA,WAAA,EAAa;AACX,IAAA,QAAA,EAAU,CAAA,CADC;AAEX,IAAA,aAAA,EAAe,CAAA,CAFJ;AAGX,IAAA,cAAA,EAAgB,CAAA,CAHL;AAIX,IAAA,MAAA,EAAQ,CAAA,CAJG;AAKX,IAAA,OAAA,EAAS,CAAA,CALE;AAMX,IAAA,KAAA,EAAO,CAAA,CANI;AAOX,IAAA,UAAA,EAAY,CAAA,CAPD;AAQX,IAAA,UAAA,EAAY,CAAA;AARD,GAvCsB;AAiDnC,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,CAAA,CADJ;AAEL,IAAA,MAAA,EAAQ,CAAA,CAFH;AAGL,IAAA,MAAA,EAAQ,CAAA,CAHH;AAIL,IAAA,YAAA,EAAc,CAAA,CAJT;AAKL,IAAA,IAAA,EAAM,CAAA,CALD;AAML,IAAA,KAAA,EAAO,CAAA,CANF;AAOL,IAAA,aAAA,EAAe,CAAA,CAPV;AAQL,IAAA,QAAA,EAAU,CAAA;AARL,GAjD4B;AA2DnC,EAAA,YAAA,EAAc,CAAA,CA3DqB;AA4DnC,EAAA,aAAA,EAAe,CAAA,CA5DoB;AA6DnC,EAAA,IAAA,EAAM,CAAA,CA7D6B;AA8DnC,EAAA,qBAAA,EAAuB,CAAA;AA9DY,CAFrC,EAmEA,MAAA,CAAO,OAAP,GAAiB,CAnEjB,EAoEA,MAAA,CAAO,OAAP,CAAe,eAAf,GAAiC,CApEjC,EAqEA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,CArEzB","sourcesContent":["'use strict';\n\nclass AbstractDialect {}\n\nAbstractDialect.prototype.supports = {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ORDER NULLS': false,\n  'UNION': true,\n  'UNION ALL': true,\n  'RIGHT JOIN': true,\n\n  /* does the dialect support returning values for inserted/updated fields */\n  returnValues: false,\n\n  /* features specific to autoIncrement values */\n  autoIncrement: {\n    /* does the dialect require modification of insert queries when inserting auto increment fields */\n    identityInsert: false,\n\n    /* does the dialect support inserting default/null values for autoincrement fields */\n    defaultValue: true,\n\n    /* does the dialect support updating autoincrement fields */\n    update: true\n  },\n  /* Do we need to say DEFAULT for bulk insert */\n  bulkDefault: false,\n  schemas: false,\n  transactions: true,\n  settingIsolationLevelDuringTransaction: true,\n  transactionOptions: {\n    type: false\n  },\n  migrations: true,\n  upserts: true,\n  inserts: {\n    ignoreDuplicates: '', /* dialect specific words for INSERT IGNORE or DO NOTHING */\n    updateOnDuplicate: false, /* whether dialect supports ON DUPLICATE KEY UPDATE */\n    onConflictDoNothing: '' /* dialect specific words for ON CONFLICT DO NOTHING */\n  },\n  constraints: {\n    restrict: true,\n    addConstraint: true,\n    dropConstraint: true,\n    unique: true,\n    default: false,\n    check: true,\n    foreignKey: true,\n    primaryKey: true\n  },\n  index: {\n    collate: true,\n    length: false,\n    parser: false,\n    concurrently: false,\n    type: false,\n    using: true,\n    functionBased: false,\n    operator: false\n  },\n  groupedLimit: true,\n  indexViaAlter: false,\n  JSON: false,\n  deferrableConstraints: false\n};\n\nmodule.exports = AbstractDialect;\nmodule.exports.AbstractDialect = AbstractDialect;\nmodule.exports.default = AbstractDialect;\n"]},"metadata":{},"sourceType":"script"}