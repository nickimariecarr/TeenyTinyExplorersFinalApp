{"ast":null,"code":"\"use strict\";\n\nvar m = Object.defineProperty;\nvar p = Object.getOwnPropertySymbols;\nvar Q = Object.prototype.hasOwnProperty,\n    I = Object.prototype.propertyIsEnumerable;\n\nvar w = (o, e, s) => e in o ? m(o, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: s\n}) : o[e] = s,\n    g = (o, e) => {\n  for (var s in e || (e = {})) Q.call(e, s) && w(o, s, e[s]);\n\n  if (p) for (var s of p(e)) I.call(e, s) && w(o, s, e[s]);\n  return o;\n};\n\nvar h = (o, e) => m(o, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst E = require(\"../abstract/query\"),\n      c = require(\"../../errors\"),\n      R = require(\"lodash\"),\n      d = require(\"../../data-types\"),\n      {\n  logger: A\n} = require(\"../../utils/logger\"),\n      q = 1062,\n      C = 1213,\n      b = 1451,\n      O = 1452,\n      _ = A.debugContext(\"sql:mariadb\");\n\nclass N extends E {\n  constructor(e, s, t) {\n    super(e, s, g({\n      showWarnings: !1\n    }, t));\n  }\n\n  static formatBindParameters(e, s, t) {\n    const n = [],\n          r = h((a, i, l) => {\n      if (l[i] !== void 0) return n.push(l[i]), \"?\";\n    }, \"replacementFunc\");\n    return e = E.formatBindParameters(e, s, t, r)[0], [e, n.length > 0 ? n : void 0];\n  }\n\n  async run(e, s) {\n    this.sql = e;\n\n    const {\n      connection: t,\n      options: n\n    } = this,\n          r = this.sequelize.options.showWarnings || n.showWarnings,\n          a = this._logQuery(e, _, s);\n\n    s && _(\"parameters(%j)\", s);\n    let i;\n    const l = new Error();\n\n    try {\n      i = await t.query(this.sql, s);\n    } catch (u) {\n      if (n.transaction && u.errno === C) {\n        try {\n          await n.transaction.rollback();\n        } catch (f) {}\n\n        n.transaction.finished = \"rollback\";\n      }\n\n      throw u.sql = e, u.parameters = s, this.formatError(u, l.stack);\n    } finally {\n      a();\n    }\n\n    return r && i && i.warningStatus > 0 && (await this.logWarnings(i)), this.formatResults(i);\n  }\n\n  formatResults(e) {\n    let s = this.instance;\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) return e.affectedRows;\n    if (this.isUpsertQuery()) return [s, e.affectedRows === 1];\n\n    if (this.isInsertQuery(e) && (this.handleInsertQuery(e), !this.instance)) {\n      if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n        const t = e[this.getInsertIdField()];\n        s = new Array(e.affectedRows);\n        const n = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n\n        for (let r = 0; r < e.affectedRows; r++) s[r] = {\n          [n]: t + r\n        };\n\n        return [s, e.affectedRows];\n      }\n\n      return [e[this.getInsertIdField()], e.affectedRows];\n    }\n\n    if (this.isSelectQuery()) return this.handleJsonSelectQuery(e), this.handleSelectQuery(e);\n    if (this.isInsertQuery() || this.isUpdateQuery()) return [s, e.affectedRows];\n    if (this.isCallQuery()) return e[0];\n\n    if (this.isRawQuery()) {\n      const t = e.meta;\n      return delete e.meta, [e, t];\n    }\n\n    if (this.isShowIndexesQuery()) return this.handleShowIndexesQuery(e);\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) return e;\n    if (this.isShowTablesQuery()) return this.handleShowTablesQuery(e);\n\n    if (this.isDescribeQuery()) {\n      s = {};\n\n      for (const t of e) s[t.Field] = {\n        type: t.Type.toLowerCase().startsWith(\"enum\") ? t.Type.replace(/^enum/i, \"ENUM\") : t.Type.toUpperCase(),\n        allowNull: t.Null === \"YES\",\n        defaultValue: t.Default,\n        primaryKey: t.Key === \"PRI\",\n        autoIncrement: Object.prototype.hasOwnProperty.call(t, \"Extra\") && t.Extra.toLowerCase() === \"auto_increment\",\n        comment: t.Comment ? t.Comment : null\n      };\n\n      return s;\n    }\n\n    return this.isVersionQuery() ? e[0].version : s;\n  }\n\n  handleJsonSelectQuery(e) {\n    if (!(!this.model || !this.model.fieldRawAttributesMap)) for (const s of Object.keys(this.model.fieldRawAttributesMap)) {\n      const t = this.model.fieldRawAttributesMap[s];\n      t.type instanceof d.JSON && (e = e.map(n => (n[t.fieldName] && typeof n[t.fieldName] == \"string\" && (n[t.fieldName] = JSON.parse(n[t.fieldName])), d.JSON.parse ? d.JSON.parse(t, this.sequelize.options, n[t.fieldName]) : n)));\n    }\n  }\n\n  async logWarnings(e) {\n    const s = await this.run(\"SHOW WARNINGS\"),\n          t = `MariaDB Warnings (${this.connection.uuid || \"default\"}): `,\n          n = [];\n\n    for (const r of s) if (!(r === void 0 || typeof r[Symbol.iterator] != \"function\")) for (const a of r) if (Object.prototype.hasOwnProperty.call(a, \"Message\")) n.push(a.Message);else for (const i of a.keys()) n.push([i, a[i]].join(\": \"));\n\n    return this.sequelize.log(t + n.join(\"; \"), this.options), e;\n  }\n\n  formatError(e, s) {\n    switch (e.errno) {\n      case q:\n        {\n          const t = e.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let n = {},\n              r = \"Validation error\";\n          const a = t ? t[1].split(\"-\") : void 0,\n                i = t ? t[2] : void 0,\n                l = t ? t[1] : void 0,\n                u = this.model && this.model.uniqueKeys[i];\n          u ? (u.msg && (r = u.msg), n = R.zipObject(u.fields, a)) : n[i] = l;\n          const f = [];\n          return R.forOwn(n, (S, y) => {\n            f.push(new c.ValidationErrorItem(this.getUniqueConstraintErrorMessage(y), \"unique violation\", y, S, this.instance, \"not_unique\"));\n          }), new c.UniqueConstraintError({\n            message: r,\n            errors: f,\n            parent: e,\n            fields: n,\n            stack: s\n          });\n        }\n\n      case b:\n      case O:\n        {\n          const t = e.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/),\n                n = t ? t[1] : \"`\",\n                r = t ? t[3].split(new RegExp(`${n}, *${n}`)) : void 0;\n          return new c.ForeignKeyConstraintError({\n            reltype: e.errno === b ? \"parent\" : \"child\",\n            table: t ? t[4] : void 0,\n            fields: r,\n            value: r && r.length && this.instance && this.instance[r[0]] || void 0,\n            index: t ? t[2] : void 0,\n            parent: e,\n            stack: s\n          });\n        }\n\n      default:\n        return new c.DatabaseError(e, {\n          stack: s\n        });\n    }\n  }\n\n  handleShowTablesQuery(e) {\n    return e.map(s => ({\n      tableName: s.TABLE_NAME,\n      schema: s.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(e) {\n    let s;\n    const t = [];\n    return e.forEach(n => {\n      (!s || s.name !== n.Key_name) && (s = {\n        primary: n.Key_name === \"PRIMARY\",\n        fields: [],\n        name: n.Key_name,\n        tableName: n.Table,\n        unique: n.Non_unique !== 1,\n        type: n.Index_type\n      }, t.push(s)), s.fields[n.Seq_in_index - 1] = {\n        attribute: n.Column_name,\n        length: n.Sub_part || void 0,\n        order: n.Collation === \"A\" ? \"ASC\" : void 0\n      };\n    }), t;\n  }\n\n}\n\nh(N, \"Query\"), module.exports = N;","map":{"version":3,"sources":["../../../../lib/dialects/mariadb/query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === 'string') {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"]},"metadata":{},"sourceType":"script"}