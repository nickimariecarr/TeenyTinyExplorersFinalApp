{"ast":null,"code":"\"use strict\";\n\nvar p = Object.defineProperty;\n\nvar o = (r, t) => p(r, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst n = require(\"lodash\"),\n      a = require(\"../abstract\"),\n      u = require(\"./connection-manager\"),\n      i = require(\"./query\"),\n      s = require(\"./query-generator\"),\n      {\n  MySQLQueryInterface: c\n} = require(\"../mysql/query-interface\"),\n      y = require(\"../../data-types\").mariadb;\n\nclass e extends a {\n  constructor(t) {\n    super();\n    this.sequelize = t, this.connectionManager = new u(this, t), this.queryGenerator = new s({\n      _dialect: this,\n      sequelize: t\n    }), this.queryInterface = new c(t, this.queryGenerator);\n  }\n\n}\n\no(e, \"MariadbDialect\"), e.prototype.supports = n.merge(n.cloneDeep(a.prototype.supports), {\n  \"VALUES ()\": !0,\n  \"LIMIT ON UPDATE\": !0,\n  lock: !0,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: !1,\n  schemas: !0,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: \" ON DUPLICATE KEY UPDATE\"\n  },\n  index: {\n    collate: !1,\n    length: !0,\n    parser: !0,\n    type: !0,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: !1,\n    check: !1\n  },\n  indexViaAlter: !0,\n  indexHints: !0,\n  NUMERIC: !0,\n  GEOMETRY: !0,\n  JSON: !0,\n  REGEXP: !0\n}), e.prototype.defaultVersion = \"10.1.44\", e.prototype.Query = i, e.prototype.QueryGenerator = s, e.prototype.DataTypes = y, e.prototype.name = \"mariadb\", e.prototype.TICK_CHAR = \"`\", e.prototype.TICK_CHAR_LEFT = e.prototype.TICK_CHAR, e.prototype.TICK_CHAR_RIGHT = e.prototype.TICK_CHAR, module.exports = e;","map":{"version":3,"sources":["../../../../lib/dialects/mariadb/index.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;AAAA,MACM,CAAA,GAAkB,OAAA,CAAQ,aAAR,CADxB;AAAA,MAEM,CAAA,GAAoB,OAAA,CAAQ,sBAAR,CAF1B;AAAA,MAGM,CAAA,GAAQ,OAAA,CAAQ,SAAR,CAHd;AAAA,MAIM,CAAA,GAAiB,OAAA,CAAQ,mBAAR,CAJvB;AAAA,MAKM;AAAE,EAAA,mBAAA,EAAA;AAAF,IAA0B,OAAA,CAAQ,0BAAR,CALhC;AAAA,MAMM,CAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,OAN9C;;AAQA,MAAA,CAAA,SAA6B,CAA7B,CAA6C;AAC3C,EAAA,WAAA,CAAY,CAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,CAAjB,EACA,KAAK,iBAAL,GAAyB,IAAI,CAAJ,CAAsB,IAAtB,EAA4B,CAA5B,CADzB,EAEA,KAAK,cAAL,GAAsB,IAAI,CAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA,SAAA,EAAA;AAFuC,KAAnB,CAFtB,EAMA,KAAK,cAAL,GAAsB,IAAI,CAAJ,CACpB,CADoB,EAEpB,KAAK,cAFe,CANtB;AAQO;;AAXkC;;AAA7C,CAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,EAgBA,CAAA,CAAe,SAAf,CAAyB,QAAzB,GAAoC,CAAA,CAAE,KAAF,CAClC,CAAA,CAAE,SAAF,CAAY,CAAA,CAAgB,SAAhB,CAA0B,QAAtC,CADkC,EAElC;AACE,eAAa,CAAA,CADf;AAEE,qBAAmB,CAAA,CAFrB;AAGE,EAAA,IAAA,EAAM,CAAA,CAHR;AAIE,EAAA,QAAA,EAAU,oBAJZ;AAKE,EAAA,sCAAA,EAAwC,CAAA,CAL1C;AAME,EAAA,OAAA,EAAS,CAAA,CANX;AAOE,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,SADX;AAEP,IAAA,iBAAA,EAAmB;AAFZ,GAPX;AAWE,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,CAAA,CADJ;AAEL,IAAA,MAAA,EAAQ,CAAA,CAFH;AAGL,IAAA,MAAA,EAAQ,CAAA,CAHH;AAIL,IAAA,IAAA,EAAM,CAAA,CAJD;AAKL,IAAA,KAAA,EAAO;AALF,GAXT;AAkBE,EAAA,WAAA,EAAa;AACX,IAAA,cAAA,EAAgB,CAAA,CADL;AAEX,IAAA,KAAA,EAAO,CAAA;AAFI,GAlBf;AAsBE,EAAA,aAAA,EAAe,CAAA,CAtBjB;AAuBE,EAAA,UAAA,EAAY,CAAA,CAvBd;AAwBE,EAAA,OAAA,EAAS,CAAA,CAxBX;AAyBE,EAAA,QAAA,EAAU,CAAA,CAzBZ;AA0BE,EAAA,IAAA,EAAM,CAAA,CA1BR;AA2BE,EAAA,MAAA,EAAQ,CAAA;AA3BV,CAFkC,CAhBpC,EAiDA,CAAA,CAAe,SAAf,CAAyB,cAAzB,GAA0C,SAjD1C,EAkDA,CAAA,CAAe,SAAf,CAAyB,KAAzB,GAAiC,CAlDjC,EAmDA,CAAA,CAAe,SAAf,CAAyB,cAAzB,GAA0C,CAnD1C,EAoDA,CAAA,CAAe,SAAf,CAAyB,SAAzB,GAAqC,CApDrC,EAqDA,CAAA,CAAe,SAAf,CAAyB,IAAzB,GAAgC,SArDhC,EAsDA,CAAA,CAAe,SAAf,CAAyB,SAAzB,GAAqC,GAtDrC,EAuDA,CAAA,CAAe,SAAf,CAAyB,cAAzB,GAA0C,CAAA,CAAe,SAAf,CAAyB,SAvDnE,EAwDA,CAAA,CAAe,SAAf,CAAyB,eAAzB,GAA2C,CAAA,CAAe,SAAf,CAAyB,SAxDpE,EA0DA,MAAA,CAAO,OAAP,GAAiB,CA1DjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst { MySQLQueryInterface } = require('../mysql/query-interface');\nconst DataTypes = require('../../data-types').mariadb;\n\nclass MariadbDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nMariadbDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    schemas: true,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  }\n);\n\nMariadbDialect.prototype.defaultVersion = '10.1.44'; // minimum supported version\nMariadbDialect.prototype.Query = Query;\nMariadbDialect.prototype.QueryGenerator = QueryGenerator;\nMariadbDialect.prototype.DataTypes = DataTypes;\nMariadbDialect.prototype.name = 'mariadb';\nMariadbDialect.prototype.TICK_CHAR = '`';\nMariadbDialect.prototype.TICK_CHAR_LEFT = MariadbDialect.prototype.TICK_CHAR;\nMariadbDialect.prototype.TICK_CHAR_RIGHT = MariadbDialect.prototype.TICK_CHAR;\n\nmodule.exports = MariadbDialect;\n"]},"metadata":{},"sourceType":"script"}