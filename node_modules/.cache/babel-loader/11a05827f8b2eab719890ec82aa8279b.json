{"ast":null,"code":"\"use strict\";\n\nvar U = Object.defineProperty;\n\nvar s = (t, e) => U(t, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nmodule.exports = t => {\n  const e = t.ABSTRACT.warn.bind(void 0, \"https://www.sqlite.org/datatype3.html\");\n\n  function r(i) {\n    (i._zerofill || i._unsigned) && (e(`SQLite does not support '${i.key}' with UNSIGNED or ZEROFILL. Plain '${i.key}' will be used instead.`), i._unsigned = void 0, i._zerofill = void 0);\n  }\n\n  s(r, \"removeUnsupportedIntegerOptions\"), t.DATE.types.sqlite = [\"DATETIME\"], t.STRING.types.sqlite = [\"VARCHAR\", \"VARCHAR BINARY\"], t.CHAR.types.sqlite = [\"CHAR\", \"CHAR BINARY\"], t.TEXT.types.sqlite = [\"TEXT\"], t.TINYINT.types.sqlite = [\"TINYINT\"], t.SMALLINT.types.sqlite = [\"SMALLINT\"], t.MEDIUMINT.types.sqlite = [\"MEDIUMINT\"], t.INTEGER.types.sqlite = [\"INTEGER\"], t.BIGINT.types.sqlite = [\"BIGINT\"], t.FLOAT.types.sqlite = [\"FLOAT\"], t.TIME.types.sqlite = [\"TIME\"], t.DATEONLY.types.sqlite = [\"DATE\"], t.BOOLEAN.types.sqlite = [\"TINYINT\"], t.BLOB.types.sqlite = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"], t.DECIMAL.types.sqlite = [\"DECIMAL\"], t.UUID.types.sqlite = [\"UUID\"], t.ENUM.types.sqlite = !1, t.REAL.types.sqlite = [\"REAL\"], t.DOUBLE.types.sqlite = [\"DOUBLE PRECISION\"], t.GEOMETRY.types.sqlite = !1, t.JSON.types.sqlite = [\"JSON\", \"JSONB\"];\n\n  class L extends t.JSON {\n    static parse(n) {\n      return JSON.parse(n);\n    }\n\n  }\n\n  s(L, \"JSONTYPE\");\n\n  class d extends t.DATE {\n    static parse(n, M) {\n      return n.includes(\"+\") ? new Date(n) : new Date(n + M.timezone);\n    }\n\n  }\n\n  s(d, \"DATE\");\n\n  class q extends t.DATEONLY {\n    static parse(n) {\n      return n;\n    }\n\n  }\n\n  s(q, \"DATEONLY\");\n\n  class O extends t.STRING {\n    toSql() {\n      return this._binary ? `VARCHAR BINARY(${this._length})` : super.toSql(this);\n    }\n\n  }\n\n  s(O, \"STRING\");\n\n  class R extends t.TEXT {\n    toSql() {\n      return this._length && (e(\"SQLite does not support TEXT with options. Plain `TEXT` will be used instead.\"), this._length = void 0), \"TEXT\";\n    }\n\n  }\n\n  s(R, \"TEXT\");\n\n  class h extends t.CITEXT {\n    toSql() {\n      return \"TEXT COLLATE NOCASE\";\n    }\n\n  }\n\n  s(h, \"CITEXT\");\n\n  class S extends t.CHAR {\n    toSql() {\n      return this._binary ? `CHAR BINARY(${this._length})` : super.toSql();\n    }\n\n  }\n\n  s(S, \"CHAR\");\n\n  class N extends t.NUMBER {\n    toSql() {\n      let n = this.key;\n      return this._unsigned && (n += \" UNSIGNED\"), this._zerofill && (n += \" ZEROFILL\"), this._length && (n += `(${this._length}`, typeof this._decimals == \"number\" && (n += `,${this._decimals}`), n += \")\"), n;\n    }\n\n  }\n\n  s(N, \"NUMBER\");\n\n  class E extends t.TINYINT {\n    constructor(n) {\n      super(n);\n      r(this);\n    }\n\n  }\n\n  s(E, \"TINYINT\");\n\n  class u extends t.SMALLINT {\n    constructor(n) {\n      super(n);\n      r(this);\n    }\n\n  }\n\n  s(u, \"SMALLINT\");\n\n  class c extends t.MEDIUMINT {\n    constructor(n) {\n      super(n);\n      r(this);\n    }\n\n  }\n\n  s(c, \"MEDIUMINT\");\n\n  class A extends t.INTEGER {\n    constructor(n) {\n      super(n);\n      r(this);\n    }\n\n  }\n\n  s(A, \"INTEGER\");\n\n  class f extends t.BIGINT {\n    constructor(n) {\n      super(n);\n      r(this);\n    }\n\n  }\n\n  s(f, \"BIGINT\");\n\n  class l extends t.FLOAT {}\n\n  s(l, \"FLOAT\");\n\n  class o extends t.DOUBLE {}\n\n  s(o, \"DOUBLE\");\n\n  class I extends t.REAL {}\n\n  s(I, \"REAL\");\n\n  function x(i) {\n    if (typeof i != \"string\") return i;\n    if (i === \"NaN\") return NaN;\n    if (i === \"Infinity\") return 1 / 0;\n    if (i === \"-Infinity\") return -1 / 0;\n  }\n\n  s(x, \"parseFloating\");\n\n  for (const i of [l, o, I]) i.parse = x;\n\n  for (const i of [l, o, I, E, u, c, A, f]) i.prototype.toSql = N.prototype.toSql;\n\n  class D extends t.ENUM {\n    toSql() {\n      return \"TEXT\";\n    }\n\n  }\n\n  return s(D, \"ENUM\"), {\n    DATE: d,\n    DATEONLY: q,\n    STRING: O,\n    CHAR: S,\n    NUMBER: N,\n    FLOAT: l,\n    REAL: I,\n    \"DOUBLE PRECISION\": o,\n    TINYINT: E,\n    SMALLINT: u,\n    MEDIUMINT: c,\n    INTEGER: A,\n    BIGINT: f,\n    TEXT: R,\n    ENUM: D,\n    JSON: L,\n    CITEXT: h\n  };\n};","map":{"version":3,"sources":["../../../../lib/dialects/sqlite/data-types.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"]},"metadata":{},"sourceType":"script"}