{"ast":null,"code":"\"use strict\";\n\nvar g = Object.defineProperty,\n    C = Object.defineProperties;\nvar A = Object.getOwnPropertyDescriptors;\nvar Q = Object.getOwnPropertySymbols;\nvar K = Object.prototype.hasOwnProperty,\n    I = Object.prototype.propertyIsEnumerable;\n\nvar E = (d, e, r) => e in d ? g(d, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: r\n}) : d[e] = r,\n    l = (d, e) => {\n  for (var r in e || (e = {})) K.call(e, r) && E(d, r, e[r]);\n\n  if (Q) for (var r of Q(e)) I.call(e, r) && E(d, r, e[r]);\n  return d;\n},\n    i = (d, e) => C(d, A(e));\n\nvar S = (d, e) => g(d, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst h = require(\"lodash\"),\n      w = require(\"../../utils\"),\n      m = require(\"../../data-types\"),\n      T = require(\"../../transaction\"),\n      y = require(\"../../query-types\");\n\nclass D {\n  constructor(e, r) {\n    this.sequelize = e, this.queryGenerator = r;\n  }\n\n  async createDatabase(e, r) {\n    r = r || {};\n    const t = this.queryGenerator.createDatabaseQuery(e, r);\n    return await this.sequelize.query(t, r);\n  }\n\n  async dropDatabase(e, r) {\n    r = r || {};\n    const t = this.queryGenerator.dropDatabaseQuery(e);\n    return await this.sequelize.query(t, r);\n  }\n\n  async createSchema(e, r) {\n    r = r || {};\n    const t = this.queryGenerator.createSchema(e);\n    return await this.sequelize.query(t, r);\n  }\n\n  async dropSchema(e, r) {\n    r = r || {};\n    const t = this.queryGenerator.dropSchema(e);\n    return await this.sequelize.query(t, r);\n  }\n\n  async dropAllSchemas(e) {\n    if (e = e || {}, !this.queryGenerator._dialect.supports.schemas) return this.sequelize.drop(e);\n    const r = await this.showAllSchemas(e);\n    return Promise.all(r.map(t => this.dropSchema(t, e)));\n  }\n\n  async showAllSchemas(e) {\n    e = i(l({}, e), {\n      raw: !0,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n    const r = this.queryGenerator.showSchemasQuery(e),\n          t = await this.sequelize.query(r, e);\n    return h.flatten(t.map(a => a.schema_name ? a.schema_name : a));\n  }\n\n  async databaseVersion(e) {\n    return await this.sequelize.query(this.queryGenerator.versionQuery(), i(l({}, e), {\n      type: y.VERSION\n    }));\n  }\n\n  async createTable(e, r, t, a) {\n    let s = \"\";\n    return t = l({}, t), t && t.uniqueKeys && h.forOwn(t.uniqueKeys, u => {\n      u.customIndex === void 0 && (u.customIndex = !0);\n    }), a && (t.uniqueKeys = t.uniqueKeys || a.uniqueKeys), r = h.mapValues(r, u => this.sequelize.normalizeAttribute(u)), await this.ensureEnums(e, r, t, a), !e.schema && (t.schema || !!a && a._schema) && (e = this.queryGenerator.addSchema({\n      tableName: e,\n      _schema: !!a && a._schema || t.schema\n    })), r = this.queryGenerator.attributesToSQL(r, {\n      table: e,\n      context: \"createTable\"\n    }), s = this.queryGenerator.createTableQuery(e, r, t), await this.sequelize.query(s, t);\n  }\n\n  async dropTable(e, r) {\n    r = l({}, r), r.cascade = r.cascade || r.force || !1;\n    const t = this.queryGenerator.dropTableQuery(e, r);\n    await this.sequelize.query(t, r);\n  }\n\n  async _dropAllTables(e, r, t) {\n    for (const a of e) r.includes(a.tableName || a) || (await this.dropTable(a, i(l({}, t), {\n      cascade: !0\n    })));\n  }\n\n  async dropAllTables(e) {\n    e = e || {};\n    const r = e.skip || [],\n          t = await this.showAllTables(e),\n          a = await this.getForeignKeysForTables(t, e);\n\n    for (const s of t) {\n      let u = s;\n      h.isObject(s) && (u = `${s.schema}.${s.tableName}`);\n\n      for (const n of a[u]) await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(s, n));\n    }\n\n    await this._dropAllTables(t, r, e);\n  }\n\n  async renameTable(e, r, t) {\n    t = t || {};\n    const a = this.queryGenerator.renameTableQuery(e, r);\n    return await this.sequelize.query(a, t);\n  }\n\n  async showAllTables(e) {\n    e = i(l({}, e), {\n      raw: !0,\n      type: y.SHOWTABLES\n    });\n    const r = this.queryGenerator.showTablesQuery(this.sequelize.config.database),\n          t = await this.sequelize.query(r, e);\n    return h.flatten(t);\n  }\n\n  async describeTable(e, r) {\n    let t = null,\n        a = null;\n    typeof r == \"string\" ? t = r : typeof r == \"object\" && r !== null && (t = r.schema || null, a = r.schemaDelimiter || null), typeof e == \"object\" && e !== null && (t = e.schema, e = e.tableName);\n    const s = this.queryGenerator.describeTableQuery(e, t, a);\n    r = i(l({}, r), {\n      type: y.DESCRIBE\n    });\n\n    try {\n      const u = await this.sequelize.query(s, r);\n      if (h.isEmpty(u)) throw new Error(`No description found for \"${e}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      return u;\n    } catch (u) {\n      throw u.original && u.original.code === \"ER_NO_SUCH_TABLE\" ? new Error(`No description found for \"${e}\" table. Check the table name and schema; remember, they _are_ case sensitive.`) : u;\n    }\n  }\n\n  async addColumn(e, r, t, a) {\n    if (!e || !r || !t) throw new Error(\"addColumn takes at least 3 arguments (table, attribute name, attribute definition)\");\n    return a = a || {}, t = this.sequelize.normalizeAttribute(t), await this.sequelize.query(this.queryGenerator.addColumnQuery(e, r, t), a);\n  }\n\n  async removeColumn(e, r, t) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(e, r), t);\n  }\n\n  normalizeAttribute(e) {\n    let r;\n    return Object.values(m).includes(e) ? r = {\n      type: e,\n      allowNull: !0\n    } : r = e, this.sequelize.normalizeAttribute(r);\n  }\n\n  async changeColumn(e, r, t, a) {\n    a = a || {};\n    const s = this.queryGenerator.attributesToSQL({\n      [r]: this.normalizeAttribute(t)\n    }, {\n      context: \"changeColumn\",\n      table: e\n    }),\n          u = this.queryGenerator.changeColumnQuery(e, s);\n    return this.sequelize.query(u, a);\n  }\n\n  async assertTableHasColumn(e, r, t) {\n    const a = await this.describeTable(e, t);\n    if (a[r]) return a;\n    throw new Error(`Table ${e} doesn't have the column ${r}`);\n  }\n\n  async renameColumn(e, r, t, a) {\n    a = a || {};\n    const s = (await this.assertTableHasColumn(e, r, a))[r],\n          u = {};\n    u[t] = {\n      attribute: t,\n      type: s.type,\n      allowNull: s.allowNull,\n      defaultValue: s.defaultValue\n    }, s.defaultValue === null && !s.allowNull && delete u[t].defaultValue;\n    const n = this.queryGenerator.renameColumnQuery(e, r, this.queryGenerator.attributesToSQL(u));\n    return await this.sequelize.query(n, a);\n  }\n\n  async addIndex(e, r, t, a) {\n    Array.isArray(r) || (a = t, t = r, r = t.fields), a || (a = e), t = w.cloneDeep(t), t.fields = r;\n    const s = this.queryGenerator.addIndexQuery(e, t, a);\n    return await this.sequelize.query(s, i(l({}, t), {\n      supportsSearchPath: !1\n    }));\n  }\n\n  async showIndex(e, r) {\n    const t = this.queryGenerator.showIndexesQuery(e, r);\n    return await this.sequelize.query(t, i(l({}, r), {\n      type: y.SHOWINDEXES\n    }));\n  }\n\n  async getForeignKeysForTables(e, r) {\n    if (e.length === 0) return {};\n    r = i(l({}, r), {\n      type: y.FOREIGNKEYS\n    });\n    const t = await Promise.all(e.map(s => this.sequelize.query(this.queryGenerator.getForeignKeysQuery(s, this.sequelize.config.database), r))),\n          a = {};\n    return e.forEach((s, u) => {\n      h.isObject(s) && (s = `${s.schema}.${s.tableName}`), a[s] = Array.isArray(t[u]) ? t[u].map(n => n.constraint_name) : [t[u] && t[u].constraint_name], a[s] = a[s].filter(h.identity);\n    }), a;\n  }\n\n  async getForeignKeyReferencesForTable(e, r) {\n    const t = i(l({}, r), {\n      type: y.FOREIGNKEYS\n    }),\n          a = this.queryGenerator.getForeignKeysQuery(e, this.sequelize.config.database);\n    return this.sequelize.query(a, t);\n  }\n\n  async removeIndex(e, r, t) {\n    t = t || {};\n    const a = this.queryGenerator.removeIndexQuery(e, r);\n    return await this.sequelize.query(a, t);\n  }\n\n  async addConstraint(e, r) {\n    if (!r.fields) throw new Error(\"Fields must be specified through options.fields\");\n    if (!r.type) throw new Error(\"Constraint type must be specified through options.type\");\n    r = w.cloneDeep(r);\n    const t = this.queryGenerator.addConstraintQuery(e, r);\n    return await this.sequelize.query(t, r);\n  }\n\n  async showConstraint(e, r, t) {\n    const a = this.queryGenerator.showConstraintsQuery(e, r);\n    return await this.sequelize.query(a, i(l({}, t), {\n      type: y.SHOWCONSTRAINTS\n    }));\n  }\n\n  async removeConstraint(e, r, t) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(e, r), t);\n  }\n\n  async insert(e, r, t, a) {\n    a = w.cloneDeep(a), a.hasTrigger = e && e.constructor.options.hasTrigger;\n    const s = this.queryGenerator.insertQuery(r, t, e && e.constructor.rawAttributes, a);\n    a.type = y.INSERT, a.instance = e;\n    const u = await this.sequelize.query(s, a);\n    return e && (u[0].isNewRecord = !1), u;\n  }\n\n  async upsert(e, r, t, a, s) {\n    s = l({}, s);\n    const u = s.model,\n          n = Object.values(u.primaryKeys).map(f => f.field),\n          c = Object.values(u.uniqueKeys).filter(f => f.fields.length > 0).map(f => f.fields),\n          q = Object.values(u._indexes).filter(f => f.unique && f.fields.length > 0).map(f => f.fields);\n    s.type = y.UPSERT, s.updateOnDuplicate = Object.keys(t), s.upsertKeys = [];\n\n    for (const f of s.updateOnDuplicate) {\n      const b = c.find(z => z.includes(f));\n\n      if (b) {\n        s.upsertKeys = b;\n        break;\n      }\n\n      const G = q.find(z => z.includes(f));\n\n      if (G) {\n        s.upsertKeys = G;\n        break;\n      }\n    }\n\n    (s.upsertKeys.length === 0 || h.intersection(s.updateOnDuplicate, n).length) && (s.upsertKeys = n), s.upsertKeys = h.uniq(s.upsertKeys);\n    const o = this.queryGenerator.insertQuery(e, r, u.rawAttributes, s);\n    return await this.sequelize.query(o, s);\n  }\n\n  async bulkInsert(e, r, t, a) {\n    return t = l({}, t), t.type = y.INSERT, (await this.sequelize.query(this.queryGenerator.bulkInsertQuery(e, r, t, a), t))[0];\n  }\n\n  async update(e, r, t, a, s) {\n    s = l({}, s), s.hasTrigger = e && e.constructor.options.hasTrigger;\n    const u = this.queryGenerator.updateQuery(r, t, a, s, e.constructor.rawAttributes);\n    return s.type = y.UPDATE, s.instance = e, await this.sequelize.query(u, s);\n  }\n\n  async bulkUpdate(e, r, t, a, s) {\n    a = w.cloneDeep(a), typeof t == \"object\" && (t = w.cloneDeep(t));\n    const u = this.queryGenerator.updateQuery(e, r, t, a, s),\n          n = h.isObject(e) ? e : {\n      tableName: e\n    },\n          c = h.find(this.sequelize.modelManager.models, {\n      tableName: n.tableName\n    });\n    return a.type = y.BULKUPDATE, a.model = c, await this.sequelize.query(u, a);\n  }\n\n  async delete(e, r, t, a) {\n    const s = [],\n          u = this.queryGenerator.deleteQuery(r, t, {}, e.constructor);\n\n    if (a = l({}, a), !!e.constructor && !!e.constructor.associations) {\n      const n = Object.keys(e.constructor.associations),\n            c = n.length;\n      let q;\n\n      for (let o = 0; o < c; o++) q = e.constructor.associations[n[o]], q.options && q.options.onDelete && q.options.onDelete.toLowerCase() === \"cascade\" && q.options.useHooks === !0 && s.push(q.accessors.get);\n    }\n\n    for (const n of s) {\n      let c = await e[n](a);\n\n      if (!!c) {\n        Array.isArray(c) || (c = [c]);\n\n        for (const q of c) await q.destroy(a);\n      }\n    }\n\n    return a.instance = e, await this.sequelize.query(u, a);\n  }\n\n  async bulkDelete(e, r, t, a) {\n    return t = w.cloneDeep(t), t = h.defaults(t, {\n      limit: null\n    }), t.truncate === !0 ? this.sequelize.query(this.queryGenerator.truncateTableQuery(e, t), t) : (typeof identifier == \"object\" && (r = w.cloneDeep(r)), await this.sequelize.query(this.queryGenerator.deleteQuery(e, r, t, a), t));\n  }\n\n  async select(e, r, t) {\n    const a = i(l({}, t), {\n      type: y.SELECT,\n      model: e\n    });\n    return await this.sequelize.query(this.queryGenerator.selectQuery(r, a, e), a);\n  }\n\n  async increment(e, r, t, a, s, u) {\n    u = w.cloneDeep(u);\n    const n = this.queryGenerator.arithmeticQuery(\"+\", r, t, a, s, u);\n    return u.type = y.UPDATE, u.model = e, await this.sequelize.query(n, u);\n  }\n\n  async decrement(e, r, t, a, s, u) {\n    u = w.cloneDeep(u);\n    const n = this.queryGenerator.arithmeticQuery(\"-\", r, t, a, s, u);\n    return u.type = y.UPDATE, u.model = e, await this.sequelize.query(n, u);\n  }\n\n  async rawSelect(e, r, t, a) {\n    r = w.cloneDeep(r), r = h.defaults(r, {\n      raw: !0,\n      plain: !0,\n      type: y.SELECT\n    });\n    const s = this.queryGenerator.selectQuery(e, r, a);\n    if (t === void 0) throw new Error(\"Please pass an attribute selector!\");\n    const u = await this.sequelize.query(s, r);\n    if (!r.plain) return u;\n    const n = u ? u[t] : null;\n    if (!r || !r.dataType) return n;\n    const c = r.dataType;\n    return (c instanceof m.DECIMAL || c instanceof m.FLOAT) && n !== null ? parseFloat(n) : (c instanceof m.INTEGER || c instanceof m.BIGINT) && n !== null ? parseInt(n, 10) : c instanceof m.DATE && n !== null && !(n instanceof Date) ? new Date(n) : n;\n  }\n\n  async createTrigger(e, r, t, a, s, u, n, c) {\n    const q = this.queryGenerator.createTrigger(e, r, t, a, s, u, n);\n    if (c = c || {}, q) return await this.sequelize.query(q, c);\n  }\n\n  async dropTrigger(e, r, t) {\n    const a = this.queryGenerator.dropTrigger(e, r);\n    if (t = t || {}, a) return await this.sequelize.query(a, t);\n  }\n\n  async renameTrigger(e, r, t, a) {\n    const s = this.queryGenerator.renameTrigger(e, r, t);\n    if (a = a || {}, s) return await this.sequelize.query(s, a);\n  }\n\n  async createFunction(e, r, t, a, s, u, n) {\n    const c = this.queryGenerator.createFunction(e, r, t, a, s, u, n);\n    if (n = n || {}, c) return await this.sequelize.query(c, n);\n  }\n\n  async dropFunction(e, r, t) {\n    const a = this.queryGenerator.dropFunction(e, r);\n    if (t = t || {}, a) return await this.sequelize.query(a, t);\n  }\n\n  async renameFunction(e, r, t, a) {\n    const s = this.queryGenerator.renameFunction(e, r, t);\n    if (a = a || {}, s) return await this.sequelize.query(s, a);\n  }\n\n  ensureEnums() {}\n\n  async setIsolationLevel(e, r, t) {\n    if (!e || !(e instanceof T)) throw new Error(\"Unable to set isolation level for a transaction without transaction object!\");\n    if (e.parent || !r) return;\n    t = i(l({}, t), {\n      transaction: e.parent || e\n    });\n    const a = this.queryGenerator.setIsolationLevelQuery(r, {\n      parent: e.parent\n    });\n    if (!!a) return await this.sequelize.query(a, t);\n  }\n\n  async startTransaction(e, r) {\n    if (!e || !(e instanceof T)) throw new Error(\"Unable to start a transaction without transaction object!\");\n    r = i(l({}, r), {\n      transaction: e.parent || e\n    }), r.transaction.name = e.parent ? e.name : void 0;\n    const t = this.queryGenerator.startTransactionQuery(e);\n    return await this.sequelize.query(t, r);\n  }\n\n  async deferConstraints(e, r) {\n    r = i(l({}, r), {\n      transaction: e.parent || e\n    });\n    const t = this.queryGenerator.deferConstraintsQuery(r);\n    if (t) return await this.sequelize.query(t, r);\n  }\n\n  async commitTransaction(e, r) {\n    if (!e || !(e instanceof T)) throw new Error(\"Unable to commit a transaction without transaction object!\");\n    if (e.parent) return;\n    r = i(l({}, r), {\n      transaction: e.parent || e,\n      supportsSearchPath: !1,\n      completesTransaction: !0\n    });\n    const t = this.queryGenerator.commitTransactionQuery(e),\n          a = this.sequelize.query(t, r);\n    return e.finished = \"commit\", await a;\n  }\n\n  async rollbackTransaction(e, r) {\n    if (!e || !(e instanceof T)) throw new Error(\"Unable to rollback a transaction without transaction object!\");\n    r = i(l({}, r), {\n      transaction: e.parent || e,\n      supportsSearchPath: !1,\n      completesTransaction: !0\n    }), r.transaction.name = e.parent ? e.name : void 0;\n    const t = this.queryGenerator.rollbackTransactionQuery(e),\n          a = this.sequelize.query(t, r);\n    return e.finished = \"rollback\", await a;\n  }\n\n}\n\nS(D, \"QueryInterface\"), exports.QueryInterface = D;","map":{"version":3,"sources":["../../../../lib/dialects/abstract/query-interface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst Transaction = require('../../transaction');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n */\nclass QueryInterface {\n  constructor(sequelize, queryGenerator) {\n    this.sequelize = sequelize;\n    this.queryGenerator = queryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  async createDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createDatabaseQuery(database, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropDatabaseQuery(database);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.createSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.queryGenerator.dropSchema(schema);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.queryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    const schemas = await this.showAllSchemas(options);\n    return Promise.all(schemas.map(schemaName => this.dropSchema(schemaName, options)));\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n  async showAllSchemas(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    };\n\n    const showSchemasSql = this.queryGenerator.showSchemasQuery(options);\n\n    const schemaNames = await this.sequelize.query(showSchemasSql, options);\n\n    return _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value));\n  }\n\n  /**\n   * Return database version\n   *\n   * @param {object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  async databaseVersion(options) {\n    return await this.sequelize.query(\n      this.queryGenerator.versionQuery(),\n      { ...options, type: QueryTypes.VERSION }\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of table attributes to create\n   * @param {object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    await this.ensureEnums(tableName, attributes, options, model);\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable' });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {object} options   Query options\n   *\n   * @returns {Promise}\n   */\n  async dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = { ...options };\n    options.cascade = options.cascade || options.force || false;\n\n    const sql = this.queryGenerator.dropTableQuery(tableName, options);\n\n    await this.sequelize.query(sql, options);\n  }\n\n  async _dropAllTables(tableNames, skip, options) {\n    for (const tableName of tableNames) {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        await this.dropTable(tableName, { ...options, cascade: true } );\n      }\n    }\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    const foreignKeys = await this.getForeignKeysForTables(tableNames, options);\n\n    for (const tableName of tableNames) {\n      let normalizedTableName = tableName;\n      if (_.isObject(tableName)) {\n        normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      for (const foreignKey of foreignKeys[normalizedTableName]) {\n        await this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n      }\n    }\n    await this._dropAllTables(tableNames, skip, options);\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.queryGenerator.renameTableQuery(before, after);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showAllTables(options) {\n    options = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    };\n\n    const showTablesSql = this.queryGenerator.showTablesQuery(this.sequelize.config.database);\n    const tableNames = await this.sequelize.query(showTablesSql, options);\n    return _.flatten(tableNames);\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise<object>}\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {object} attribute Attribute definition\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return await this.sequelize.query(this.queryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {object} [options]      Query options\n   */\n  async removeColumn(tableName, attributeName, options) {\n    return this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, attributeName), options);\n  }\n\n  normalizeAttribute(dataTypeOrOptions) {\n    let attribute;\n    if (Object.values(DataTypes).includes(dataTypeOrOptions)) {\n      attribute = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attribute = dataTypeOrOptions;\n    }\n\n    return this.sequelize.normalizeAttribute(attribute);\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {object} dataTypeOrOptions  Attribute definition for new column\n   * @param {object} [options]          Query options\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const query = this.queryGenerator.attributesToSQL({\n      [attributeName]: this.normalizeAttribute(dataTypeOrOptions)\n    }, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.queryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Rejects if the table doesn't have the specified column, otherwise returns the column description.\n   *\n   * @param {string} tableName\n   * @param {string} columnName\n   * @param {object} options\n   * @private\n   */\n  async assertTableHasColumn(tableName, columnName, options) {\n    const description = await this.describeTable(tableName, options);\n    if (description[columnName]) {\n      return description;\n    }\n    throw new Error(`Table ${tableName} doesn't have the column ${columnName}`);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const data = (await this.assertTableHasColumn(tableName, attrNameBefore, options))[attrNameBefore];\n\n    const _options = {};\n\n    _options[attrNameAfter] = {\n      attribute: attrNameAfter,\n      type: data.type,\n      allowNull: data.allowNull,\n      defaultValue: data.defaultValue\n    };\n\n    // fix: a not-null column cannot have null as default value\n    if (data.defaultValue === null && !data.allowNull) {\n      delete _options[attrNameAfter].defaultValue;\n    }\n\n    const sql = this.queryGenerator.renameColumnQuery(\n      tableName,\n      attrNameBefore,\n      this.queryGenerator.attributesToSQL(_options)\n    );\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  async addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.queryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return await this.sequelize.query(sql, { ...options, supportsSearchPath: false });\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  async showIndex(tableName, options) {\n    const sql = this.queryGenerator.showIndexesQuery(tableName, options);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWINDEXES });\n  }\n\n\n  /**\n   * Returns all foreign key constraints of requested tables\n   *\n   * @param {string[]} tableNames table names\n   * @param {object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  async getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return {};\n    }\n\n    options = { ...options, type: QueryTypes.FOREIGNKEYS };\n\n    const results = await Promise.all(tableNames.map(tableName =>\n      this.sequelize.query(this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)));\n\n    const result = {};\n\n    tableNames.forEach((tableName, i) => {\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      result[tableName] = Array.isArray(results[i])\n        ? results[i].map(r => r.constraint_name)\n        : [results[i] && results[i].constraint_name];\n\n      result[tableName] = result[tableName].filter(_.identity);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {object} [options]  Query options\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database);\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName                    Table name to drop index from\n   * @param {string|string[]} indexNameOrAttributes  Index name or list of attributes that in the index\n   * @param {object} [options]                    Query options\n   *\n   * @returns {Promise}\n   */\n  async removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.queryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['email'],\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', {\n   *   fields: ['roles'],\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['roles'],\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', {\n   *    fields: ['username'],\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', {\n   *   fields: ['username'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @example <caption>Composite Foreign Key</caption>\n   * queryInterface.addConstraint('TableName', {\n   *   fields: ['source_column_name', 'other_source_column_name'],\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     fields: ['target_column_name', 'other_target_column_name']\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                   Table name where you want to add a constraint\n   * @param {object} options                     An object to define the constraint name, type etc\n   * @param {string} options.type                Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {Array}  options.fields              Array of column names to apply the constraint over\n   * @param {string} [options.name]              Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]      The value for the default constraint\n   * @param {object} [options.where]             Where clause/expression for the CHECK constraint\n   * @param {object} [options.references]        Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table]  Target table name\n   * @param {string} [options.references.field]  Target column name\n   * @param {string} [options.references.fields] Target column names for a composite primary key. Must match the order of fields in options.fields.\n   * @param {string} [options.deferrable]        Sets the constraint to be deferred or immediately checked. See Sequelize.Deferrable. PostgreSQL Only\n   *\n   * @returns {Promise}\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.addConstraintQuery(tableName, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  async showConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName, constraintName);\n    return await this.sequelize.query(sql, { ...options, type: QueryTypes.SHOWCONSTRAINTS });\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {object} options         Query options\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    return this.sequelize.query(this.queryGenerator.removeConstraintQuery(tableName, constraintName), options);\n  }\n\n  async insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.queryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    const results = await this.sequelize.query(sql, options);\n    if (instance) results[0].isNewRecord = false;\n\n    return results;\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {object} insertValues values to be inserted, mapped to field name\n   * @param {object} updateValues values to be updated, mapped to field name\n   * @param {object} where        where conditions, which can be used for UPDATE part when INSERT fails\n   * @param {object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n    const primaryKeys = Object.values(model.primaryKeys).map(item => item.field);\n    const uniqueKeys = Object.values(model.uniqueKeys).filter(c => c.fields.length > 0).map(c => c.fields);\n    const indexKeys = Object.values(model._indexes).filter(c => c.unique && c.fields.length > 0).map(c => c.fields);\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = [];\n\n    // For fields in updateValues, try to find a constraint or unique index\n    // that includes given field. Only first matching upsert key is used.\n    for (const field of options.updateOnDuplicate) {\n      const uniqueKey = uniqueKeys.find(fields => fields.includes(field));\n      if (uniqueKey) {\n        options.upsertKeys = uniqueKey;\n        break;\n      }\n\n      const indexKey = indexKeys.find(fields => fields.includes(field));\n      if (indexKey) {\n        options.upsertKeys = indexKey;\n        break;\n      }\n    }\n\n    // Always use PK, if no constraint available OR update data contains PK\n    if (\n      options.upsertKeys.length === 0\n      || _.intersection(options.updateOnDuplicate, primaryKeys).length\n    ) {\n      options.upsertKeys = primaryKeys;\n    }\n\n    options.upsertKeys = _.uniq(options.upsertKeys);\n\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {object} options     Various options, please see Model.bulkCreate options\n   * @param {object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  async bulkInsert(tableName, records, options, attributes) {\n    options = { ...options };\n    options.type = QueryTypes.INSERT;\n\n    const results = await this.sequelize.query(\n      this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    );\n\n    return results[0];\n  }\n\n  async update(instance, tableName, values, identifier, options) {\n    options = { ...options };\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {object} values        Values to be inserted, mapped to field name\n   * @param {object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {object} [options]     Various options, please see Model.bulkCreate options\n   * @param {object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  async bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.queryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return await this.sequelize.query(sql, options);\n  }\n\n  async delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.queryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = { ...options };\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    for (const cascade of cascades) {\n      let instances = await instance[cascade](options);\n      // Check for hasOne relationship with non-existing associate (\"has zero\")\n      if (!instances) continue;\n      if (!Array.isArray(instances)) instances = [instances];\n      for (const _instance of instances) await _instance.destroy(options);\n    }\n    options.instance = instance;\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {object}  where                where conditions to find records to delete\n   * @param {object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command\n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  async bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(\n        this.queryGenerator.truncateTableQuery(tableName, options),\n        options\n      );\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n\n    return await this.sequelize.query(\n      this.queryGenerator.deleteQuery(tableName, where, options, model),\n      options\n    );\n  }\n\n  async select(model, tableName, optionsArg) {\n    const options = { ...optionsArg, type: QueryTypes.SELECT, model };\n\n    return await this.sequelize.query(\n      this.queryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  async increment(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('+', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async decrement(model, tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.queryGenerator.arithmeticQuery('-', tableName, where, incrementAmountsByField, extraAttributesToBeUpdated, options);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.queryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    const data = await this.sequelize.query(sql, options);\n    if (!options.plain) {\n      return data;\n    }\n\n    const result = data ? data[attributeSelector] : null;\n\n    if (!options || !options.dataType) {\n      return result;\n    }\n\n    const dataType = options.dataType;\n\n    if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n      if (result !== null) {\n        return parseFloat(result);\n      }\n    }\n    if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n      if (result !== null) {\n        return parseInt(result, 10);\n      }\n    }\n    if (dataType instanceof DataTypes.DATE) {\n      if (result !== null && !(result instanceof Date)) {\n        return new Date(result);\n      }\n    }\n    return result;\n  }\n\n  async createTrigger(\n    tableName,\n    triggerName,\n    timingType,\n    fireOnArray,\n    functionName,\n    functionParams,\n    optionsArray,\n    options\n  ) {\n    const sql = this.queryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async dropTrigger(tableName, triggerName, options) {\n    const sql = this.queryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.queryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  async createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.queryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  async dropFunction(functionName, params, options) {\n    const sql = this.queryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  async renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.queryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * @private\n   */\n  ensureEnums() {\n    // noop by default\n  }\n\n  async setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return;\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return;\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = { ...options, transaction: transaction.parent || transaction };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.startTransactionQuery(transaction);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n  async deferConstraints(transaction, options) {\n    options = { ...options, transaction: transaction.parent || transaction };\n\n    const sql = this.queryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return await this.sequelize.query(sql, options);\n    }\n  }\n\n  async commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return;\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n\n    const sql = this.queryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return await promise;\n  }\n\n  async rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = {\n      ...options,\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    };\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.queryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return await promise;\n  }\n}\n\nexports.QueryInterface = QueryInterface;\n"]},"metadata":{},"sourceType":"script"}