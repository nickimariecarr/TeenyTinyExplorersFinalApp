{"ast":null,"code":"var _jsxFileName = \"/Users/nickicarr/teeny-tiny-explorer/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst cors = require(\"cors\");\n\nconst express = require(\"express\");\n\nconst mysql = require(\"mysql\");\n\nrequire(\"dotenv\").config();\n\nconst path = require(\"path\");\n\n;\nconst app = express();\napp.use(cors());\napp.use(express.json());\nReactDOM.render( /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 3\n}, this), document.getElementById('root')); //create connection to database\n\nconst db = mysql.createPool({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB\n}); //Listen on port 3000 \n\nconst listener = app.listen(process.env.PORT || 3000, () => {\n  console.log(\"App is listening on port \" + listener.address().port);\n}); //********************************GROUPS TABLE*******************************************\n//get groups\n\napp.get(\"/group\", (req, res) => {\n  db.query(\"SELECT * FROM teenytinyexplorer.groups;\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //post groups\n\napp.post(\"/group\", (req, res) => {\n  const insertQuery = \"INSERT INTO teenytinyexplorer.groups SET ?\";\n  db.query(insertQuery, req.body, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(\"Group added to Database\");\n    }\n  });\n}); //put groups \n\napp.put(\"/group\", (req, res) => {\n  const updateQuery = \"UPDATE teenytinyexplorer.groups SET county = ?,  contact = ?, email = ?, state = ? WHERE id = ?\";\n  db.query(updateQuery, [req.body.county, req.body.contact, req.body.email, req.body.state, req.body.id], (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //delete groups\n\napp.delete(\"/group/:id\", (req, res) => {\n  db.query(\"DELETE FROM teenytinyexplorer.groups WHERE id = ?\", req.params.id, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //********************************MEMBERS TABLE********************************\n// get members\n\napp.get(\"/members/\", (req, res) => {\n  db.query(\"SELECT * FROM teenytinyexplorer.member;\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //post members\n\napp.post(\"/members/\", (req, res) => {\n  const insertQuery = \"INSERT INTO teenytinyexplorer.member SET ?\";\n  db.query(insertQuery, req.body, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(\"Member added !\");\n    }\n  });\n}); //put members\n\napp.put(\"/members/\", (req, res) => {\n  const updateQuery = \"UPDATE teenytinyexplorer.member SET mbrfirstname = ?,  mbrlastname = ?, email = ?, address = ?, city = ?, zip = ?, state = ?, username = ?, password = ?, membercol = ? WHERE idmember = ?\";\n  db.query(updateQuery, [req.body.mbrfirstname, req.body.mbrlastname, req.body.email, req.body.address, req.body.city, req.body.zip, req.body.state, req.body.username, req.body.password, req.body.membercol, req.body.idmember], (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //delete members\n\napp.delete(\"/members/:id\", (req, res) => {\n  db.query(\"DELETE FROM teenytinyexplorer.member WHERE idmember = ?\", req.params.id, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //********************************COUNTY TABLE********************************\n// get counties\n\napp.get(\"/counties\", (req, res) => {\n  db.query(\"SELECT * FROM teenytinyexplorer.county;\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //post counties\n\napp.post(\"/counties\", (req, res) => {\n  const insertQuery = \"INSERT INTO teenytinyexplorer.county SET ?\";\n  db.query(insertQuery, req.body, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(\"County added !\");\n    }\n  });\n}); //put counties\n\napp.put(\"/counties\", (req, res) => {\n  const updateQuery = \"UPDATE teenytinyexplorer.county SET countyname = ?, WHERE idcounty = ?\";\n  db.query(updateQuery, [req.body.countyname, req.body.idcounty], (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //delete counties\n\napp.delete(\"/counties/:id\", (req, res) => {\n  db.query(\"DELETE FROM teenytinyexplorer.county WHERE idcounty = ?\", req.params.id, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //********************************STATE TABLE********************************\n// get states\n\napp.get(\"/states\", (req, res) => {\n  db.query(\"SELECT * FROM teenytinyexplorer.State;\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //post states\n\napp.post(\"/states\", (req, res) => {\n  const insertQuery = \"INSERT INTO teenytinyexplorer.State SET ?\";\n  db.query(insertQuery, req.body, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(\"State added !\");\n    }\n  });\n}); //put states\n\napp.put(\"/states\", (req, res) => {\n  const updateQuery = \"UPDATE teenytinyexplorer.State State = ? WHERE idState = ?\";\n  db.query(updateQuery, [req.body.State, req.body.idState], (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //delete states\n\napp.delete(\"/states/:id\", (req, res) => {\n  db.query(\"DELETE FROM teenytinyexplorer.State WHERE idState = ?\", req.params.id, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //********************************HOSTS TABLE********************************\n// get hosts\n\napp.get(\"/hosts\", (req, res) => {\n  db.query(\"SELECT * FROM teenytinyexplorer.host;\", (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //post hosts\n\napp.post(\"/hosts\", (req, res) => {\n  const insertQuery = \"INSERT INTO teenytinyexplorer.host SET ?\";\n  db.query(insertQuery, req.body, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(\"Host added !\");\n    }\n  });\n}); //put hosts\n\napp.put(\"/hosts\", (req, res) => {\n  const updateQuery = \"UPDATE teenytinyexplorer.host SET hostfirstname= ?,  hostlastname = ?, hostemail = ?, hostaddress = ?, hostcity = ?, hostzip = ?, hoststate = ?, hostusername = ?, hostpassword = ?, WHERE idhost = ?\";\n  db.query(updateQuery, [req.body.hostfirstname, req.body.hostlastname, req.body.hostemail, req.body.hostaddress, req.body.hostcity, req.body.hostzip, req.body.hoststate, req.body.hostusername, req.body.hostpassword, req.body.idhost], (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n}); //delete hosts\n\napp.delete(\"/hosts/:id\", (req, res) => {\n  db.query(\"DELETE FROM teenytinyexplorer.host WHERE idhost = ?\", req.params.id, (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/nickicarr/teeny-tiny-explorer/src/index.js"],"names":["React","ReactDOM","BrowserRouter","App","cors","require","express","mysql","config","path","app","use","json","render","document","getElementById","db","createPool","host","process","env","DB_HOST","user","DB_USER","password","DB_PASSWORD","database","DB","listener","listen","PORT","console","log","address","port","get","req","res","query","err","result","send","post","insertQuery","body","put","updateQuery","county","contact","email","state","id","delete","params","mbrfirstname","mbrlastname","city","zip","username","membercol","idmember","countyname","idcounty","State","idState","hostfirstname","hostlastname","hostemail","hostaddress","hostcity","hostzip","hoststate","hostusername","hostpassword","idhost"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\n\nconst cors = require(\"cors\");\nconst express = require(\"express\");\nconst mysql = require(\"mysql\");\nrequire(\"dotenv\").config();\nconst path = require(\"path\");;\n\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n//create connection to database\nconst db = mysql.createPool({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB,\n});\n\n\n//Listen on port 3000 \nconst listener = app.listen(process.env.PORT || 3000, () => {\nconsole.log(\"App is listening on port \" + listener.address().port);\n  });\n\n//********************************GROUPS TABLE*******************************************\n\n//get groups\napp.get(\"/group\", (req, res) => {\n  db.query(\"SELECT * FROM teenytinyexplorer.groups;\" , (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  });\n});\n\n//post groups\napp.post(\"/group\", (req, res) => {\nconst insertQuery = \"INSERT INTO teenytinyexplorer.groups SET ?\";\ndb.query(insertQuery, req.body, (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(\"Group added to Database\");\n  }\n});\n});\n\n//put groups \napp.put(\"/group\", (req, res) => {\nconst updateQuery =\n  \"UPDATE teenytinyexplorer.groups SET county = ?,  contact = ?, email = ?, state = ? WHERE id = ?\";\ndb.query(\n  updateQuery,\n  [req.body.county, req.body.contact, req.body.email, req.body.state, req.body.id],\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n//delete groups\napp.delete(\"/group/:id\", (req, res) => {\ndb.query(\n  \"DELETE FROM teenytinyexplorer.groups WHERE id = ?\",\n  req.params.id,\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n\n//********************************MEMBERS TABLE********************************\n// get members\napp.get(\"/members/\", (req, res) => {\ndb.query(\"SELECT * FROM teenytinyexplorer.member;\" , (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(result);\n  }\n});\n});\n\n//post members\napp.post(\"/members/\", (req, res) => {\nconst insertQuery = \"INSERT INTO teenytinyexplorer.member SET ?\";\ndb.query(insertQuery, req.body, (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(\"Member added !\");\n  }\n});\n});\n\n//put members\napp.put(\"/members/\", (req, res) => {\nconst updateQuery =\n  \"UPDATE teenytinyexplorer.member SET mbrfirstname = ?,  mbrlastname = ?, email = ?, address = ?, city = ?, zip = ?, state = ?, username = ?, password = ?, membercol = ? WHERE idmember = ?\";\ndb.query(\n  updateQuery,\n  [req.body.mbrfirstname, req.body.mbrlastname, req.body.email, req.body.address, req.body.city, req.body.zip, req.body.state, req.body.username, req.body.password, req.body.membercol, req.body.idmember],\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n//delete members\napp.delete(\"/members/:id\", (req, res) => {\ndb.query(\n  \"DELETE FROM teenytinyexplorer.member WHERE idmember = ?\",\n  req.params.id,\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n//********************************COUNTY TABLE********************************\n// get counties\napp.get(\"/counties\", (req, res) => {\ndb.query(\"SELECT * FROM teenytinyexplorer.county;\" , (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(result);\n  }\n});\n});\n\n//post counties\napp.post(\"/counties\", (req, res) => {\nconst insertQuery = \"INSERT INTO teenytinyexplorer.county SET ?\";\ndb.query(insertQuery, req.body, (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(\"County added !\");\n  }\n});\n});\n\n//put counties\napp.put(\"/counties\", (req, res) => {\nconst updateQuery =\n  \"UPDATE teenytinyexplorer.county SET countyname = ?, WHERE idcounty = ?\";\ndb.query(\n  updateQuery,\n  [req.body.countyname, req.body.idcounty],\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n//delete counties\napp.delete(\"/counties/:id\", (req, res) => {\ndb.query(\n  \"DELETE FROM teenytinyexplorer.county WHERE idcounty = ?\",\n  req.params.id,\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n\n\n//********************************STATE TABLE********************************\n// get states\napp.get(\"/states\", (req, res) => {\ndb.query(\"SELECT * FROM teenytinyexplorer.State;\" , (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(result);\n  }\n});\n});\n\n//post states\napp.post(\"/states\", (req, res) => {\nconst insertQuery = \"INSERT INTO teenytinyexplorer.State SET ?\";\ndb.query(insertQuery, req.body, (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(\"State added !\");\n  }\n});\n});\n\n//put states\napp.put(\"/states\", (req, res) => {\nconst updateQuery =\n  \"UPDATE teenytinyexplorer.State State = ? WHERE idState = ?\";\ndb.query(\n  updateQuery,\n  [req.body.State, req.body.idState],\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n//delete states\napp.delete(\"/states/:id\", (req, res) => {\ndb.query(\n  \"DELETE FROM teenytinyexplorer.State WHERE idState = ?\",\n  req.params.id,\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n\n\n//********************************HOSTS TABLE********************************\n// get hosts\napp.get(\"/hosts\", (req, res) => {\ndb.query(\"SELECT * FROM teenytinyexplorer.host;\" , (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(result);\n  }\n});\n});\n\n//post hosts\napp.post(\"/hosts\", (req, res) => {\nconst insertQuery = \"INSERT INTO teenytinyexplorer.host SET ?\";\ndb.query(insertQuery, req.body, (err, result) => {\n  if (err) {\n    console.log(err);\n  } else {\n    res.send(\"Host added !\");\n  }\n});\n});\n\n\n//put hosts\napp.put(\"/hosts\", (req, res) => {\nconst updateQuery =\n  \"UPDATE teenytinyexplorer.host SET hostfirstname= ?,  hostlastname = ?, hostemail = ?, hostaddress = ?, hostcity = ?, hostzip = ?, hoststate = ?, hostusername = ?, hostpassword = ?, WHERE idhost = ?\";\ndb.query(\n  updateQuery,\n  [req.body.hostfirstname, req.body.hostlastname, req.body.hostemail, req.body.hostaddress, req.body.hostcity, req.body.hostzip, req.body.hoststate, req.body.hostusername, req.body.hostpassword, req.body.idhost],\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n//delete hosts\napp.delete(\"/hosts/:id\", (req, res) => {\ndb.query(\n  \"DELETE FROM teenytinyexplorer.host WHERE idhost = ?\",\n  req.params.id,\n  (err, result) => {\n    if (err) {\n      console.log(err);\n    } else {\n      res.send(result);\n    }\n  }\n);\n});\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}