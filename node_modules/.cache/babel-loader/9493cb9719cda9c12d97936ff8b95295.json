{"ast":null,"code":"\"use strict\";\n\nvar d = Object.defineProperty;\nvar h = Object.getOwnPropertySymbols;\nvar N = Object.prototype.hasOwnProperty,\n    q = Object.prototype.propertyIsEnumerable;\n\nvar m = (o, e, r) => e in o ? d(o, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: r\n}) : o[e] = r,\n    y = (o, e) => {\n  for (var r in e || (e = {})) N.call(e, r) && m(o, r, e[r]);\n\n  if (h) for (var r of h(e)) q.call(e, r) && m(o, r, e[r]);\n  return o;\n};\n\nvar i = (o, e) => d(o, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst g = require(\"../abstract/connection-manager\"),\n      a = require(\"../../errors\"),\n      {\n  logger: _\n} = require(\"../../utils/logger\"),\n      b = require(\"../../data-types\").mysql,\n      f = require(\"moment-timezone\"),\n      w = _.debugContext(\"connection:mysql\"),\n      u = require(\"../parserStore\")(\"mysql\"),\n      {\n  promisify: C\n} = require(\"util\");\n\nclass c extends g {\n  constructor(e, r) {\n    r.config.port = r.config.port || 3306;\n    super(e, r);\n    this.lib = this._loadDialectModule(\"mysql2\"), this.refreshTypeParser(b);\n  }\n\n  _refreshTypeParser(e) {\n    u.refresh(e);\n  }\n\n  _clearTypeParser() {\n    u.clear();\n  }\n\n  static _typecast(e, r) {\n    return u.get(e.type) ? u.get(e.type)(e, this.sequelize.options, r) : r();\n  }\n\n  async connect(e) {\n    const r = y({\n      host: e.host,\n      port: e.port,\n      user: e.username,\n      flags: \"-FOUND_ROWS\",\n      password: e.password,\n      database: e.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: c._typecast.bind(this),\n      bigNumberStrings: !1,\n      supportBigNumbers: !0\n    }, e.dialectOptions);\n\n    try {\n      const t = await new Promise((s, l) => {\n        const n = this.lib.createConnection(r),\n              E = i(O => {\n          n.removeListener(\"connect\", p), n.removeListener(\"error\", p), l(O);\n        }, \"errorHandler\"),\n              p = i(() => {\n          n.removeListener(\"error\", E), s(n);\n        }, \"connectHandler\");\n        n.on(\"error\", E), n.once(\"connect\", p);\n      });\n\n      if (w(\"connection acquired\"), t.on(\"error\", s => {\n        switch (s.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(t);\n        }\n      }), !this.sequelize.config.keepDefaultTimezone) {\n        let s = this.sequelize.options.timezone;\n        s = /\\//.test(s) ? f.tz(s).format(\"Z\") : s, await C(l => t.query(`SET time_zone = '${s}'`, l))();\n      }\n\n      return t;\n    } catch (t) {\n      switch (t.code) {\n        case \"ECONNREFUSED\":\n          throw new a.ConnectionRefusedError(t);\n\n        case \"ER_ACCESS_DENIED_ERROR\":\n          throw new a.AccessDeniedError(t);\n\n        case \"ENOTFOUND\":\n          throw new a.HostNotFoundError(t);\n\n        case \"EHOSTUNREACH\":\n          throw new a.HostNotReachableError(t);\n\n        case \"EINVAL\":\n          throw new a.InvalidConnectionError(t);\n\n        default:\n          throw new a.ConnectionError(t);\n      }\n    }\n  }\n\n  async disconnect(e) {\n    if (e._closing) {\n      w(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n\n    return await C(r => e.end(r))();\n  }\n\n  validate(e) {\n    return e && !e._fatalError && !e._protocolError && !e._closing && !e.stream.destroyed;\n  }\n\n}\n\ni(c, \"ConnectionManager\"), module.exports = c, module.exports.ConnectionManager = c, module.exports.default = c;","map":{"version":3,"sources":["../../../../lib/dialects/mysql/connection-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mysql;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mysql');\nconst parserStore = require('../parserStore')('mysql');\nconst { promisify } = require('util');\n\n/**\n * MySQL Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MySQL specific connections\n * Use https://github.com/sidorares/node-mysql2 to connect with MySQL server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mysql2');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  /**\n   * Connect with MySQL database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      flags: '-FOUND_ROWS',\n      password: config.password,\n      database: config.database,\n      timezone: this.sequelize.options.timezone,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await new Promise((resolve, reject) => {\n        const connection = this.lib.createConnection(connectionConfig);\n\n        const errorHandler = e => {\n          // clean up connect & error event if there is error\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', connectHandler);\n          reject(e);\n        };\n\n        const connectHandler = () => {\n          // clean up error event if connected\n          connection.removeListener('error', errorHandler);\n          resolve(connection);\n        };\n\n        // don't use connection.once for error event handling here\n        // mysql2 emit error two times in case handshake was failed\n        // first error is protocol_lost and second is timeout\n        // if we will use `once.error` node process will crash on 2nd error emit\n        connection.on('error', errorHandler);\n        connection.once('connect', connectHandler);\n      });\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        // set timezone for this connection\n        // but named timezone are not directly supported in mysql, so get its offset first\n        let tzOffset = this.sequelize.options.timezone;\n        tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z') : tzOffset;\n        await promisify(cb => connection.query(`SET time_zone = '${tzOffset}'`, cb))();\n      }\n\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (connection._closing) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return connection\n      && !connection._fatalError\n      && !connection._protocolError\n      && !connection._closing\n      && !connection.stream.destroyed;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}