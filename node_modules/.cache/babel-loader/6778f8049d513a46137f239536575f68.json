{"ast":null,"code":"\"use strict\";\n\nvar h = Object.defineProperty,\n    E = Object.defineProperties;\nvar Q = Object.getOwnPropertyDescriptors;\nvar d = Object.getOwnPropertySymbols;\nvar $ = Object.prototype.hasOwnProperty,\n    G = Object.prototype.propertyIsEnumerable;\n\nvar b = (o, e, r) => e in o ? h(o, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: r\n}) : o[e] = r,\n    y = (o, e) => {\n  for (var r in e || (e = {})) $.call(e, r) && b(o, r, e[r]);\n\n  if (d) for (var r of d(e)) G.call(e, r) && b(o, r, e[r]);\n  return o;\n},\n    q = (o, e) => E(o, Q(e));\n\nvar w = (o, e) => h(o, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst z = require(\"../../errors\"),\n      T = require(\"../../query-types\"),\n      {\n  QueryInterface: _\n} = require(\"../abstract/query-interface\"),\n      {\n  cloneDeep: A\n} = require(\"../../utils\"),\n      S = require(\"lodash\");\n\nclass C extends _ {\n  async removeColumn(e, r, n) {\n    n = n || {};\n    const i = await this.describeTable(e, n);\n    delete i[r];\n    const s = this.queryGenerator.removeColumnQuery(e, i).split(\";\").filter(t => t !== \"\");\n\n    for (const t of s) await this.sequelize.query(`${t};`, y({\n      raw: !0\n    }, n));\n  }\n\n  async changeColumn(e, r, n, i) {\n    i = i || {};\n    const a = await this.describeTable(e, i);\n    Object.assign(a[r], this.normalizeAttribute(n));\n    const t = this.queryGenerator.removeColumnQuery(e, a).split(\";\").filter(u => u !== \"\");\n\n    for (const u of t) await this.sequelize.query(`${u};`, y({\n      raw: !0\n    }, i));\n  }\n\n  async renameColumn(e, r, n, i) {\n    i = i || {};\n    const a = await this.assertTableHasColumn(e, r, i);\n    a[n] = y({}, a[r]), delete a[r];\n    const t = this.queryGenerator.renameColumnQuery(e, r, n, a).split(\";\").filter(u => u !== \"\");\n\n    for (const u of t) await this.sequelize.query(`${u};`, y({\n      raw: !0\n    }, i));\n  }\n\n  async removeConstraint(e, r, n) {\n    let i;\n    const s = (await this.showConstraint(e, r)).find(l => l.constraintName === r);\n    if (!s) throw new z.UnknownConstraintError({\n      message: `Constraint ${r} on table ${e} does not exist`,\n      constraint: r,\n      table: e\n    });\n    i = s.sql, s.constraintName = this.queryGenerator.quoteIdentifier(s.constraintName);\n    let t = `, CONSTRAINT ${s.constraintName} ${s.constraintType} ${s.constraintCondition}`;\n\n    if (s.constraintType === \"FOREIGN KEY\") {\n      const l = this.queryGenerator.quoteTable(s.referenceTableName);\n      s.referenceTableKeys = s.referenceTableKeys.map(g => this.queryGenerator.quoteIdentifier(g));\n      const m = s.referenceTableKeys.join(\", \");\n      t += ` REFERENCES ${l} (${m})`, t += ` ON UPDATE ${s.updateAction}`, t += ` ON DELETE ${s.deleteAction}`;\n    }\n\n    i = i.replace(t, \"\"), i += \";\";\n\n    const u = await this.describeTable(e, n),\n          c = this.queryGenerator._alterConstraintQuery(e, u, i).split(\";\").filter(l => l !== \"\");\n\n    for (const l of c) await this.sequelize.query(`${l};`, y({\n      raw: !0\n    }, n));\n  }\n\n  async addConstraint(e, r) {\n    if (!r.fields) throw new Error(\"Fields must be specified through options.fields\");\n    if (!r.type) throw new Error(\"Constraint type must be specified through options.type\");\n    r = A(r);\n    const n = this.queryGenerator.getConstraintSnippet(e, r),\n          i = this.queryGenerator.describeCreateTableQuery(e);\n    let s = (await this.sequelize.query(i, q(y({}, r), {\n      type: T.SELECT,\n      raw: !0\n    })))[0].sql;\n    const t = s.length - 1,\n          u = `${s.substr(0, t)}, ${n})${s.substr(t + 1)};`,\n          f = await this.describeTable(e, r);\n    s = this.queryGenerator._alterConstraintQuery(e, f, u);\n    const c = s.split(\";\").filter(l => l !== \"\");\n\n    for (const l of c) await this.sequelize.query(`${l};`, y({\n      raw: !0\n    }, r));\n  }\n\n  async getForeignKeyReferencesForTable(e, r) {\n    const n = this.sequelize.config.database,\n          i = this.queryGenerator.getForeignKeysQuery(e, n);\n    return (await this.sequelize.query(i, r)).map(s => ({\n      tableName: e,\n      columnName: s.from,\n      referencedTableName: s.table,\n      referencedColumnName: s.to,\n      tableCatalog: n,\n      referencedTableCatalog: n\n    }));\n  }\n\n  async dropAllTables(e) {\n    e = e || {};\n    const r = e.skip || [],\n          n = await this.showAllTables(e);\n    await this.sequelize.query(\"PRAGMA foreign_keys = OFF\", e), await this._dropAllTables(n, r, e), await this.sequelize.query(\"PRAGMA foreign_keys = ON\", e);\n  }\n\n  async describeTable(e, r) {\n    let n = null,\n        i = null;\n    typeof r == \"string\" ? n = r : typeof r == \"object\" && r !== null && (n = r.schema || null, i = r.schemaDelimiter || null), typeof e == \"object\" && e !== null && (n = e.schema, e = e.tableName);\n    const a = this.queryGenerator.describeTableQuery(e, n, i);\n    r = q(y({}, r), {\n      type: T.DESCRIBE\n    });\n    const s = this.queryGenerator.showIndexesQuery(e);\n\n    try {\n      const t = await this.sequelize.query(a, r);\n      if (S.isEmpty(t)) throw new Error(`No description found for \"${e}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      const u = await this.sequelize.query(s, r);\n\n      for (const c in t) t[c].unique = !1;\n\n      for (const c of u) for (const l of c.fields) c.unique !== void 0 && (t[l.attribute].unique = c.unique);\n\n      const f = await this.getForeignKeyReferencesForTable(e, r);\n\n      for (const c of f) t[c.columnName].references = {\n        model: c.referencedTableName,\n        key: c.referencedColumnName\n      };\n\n      return t;\n    } catch (t) {\n      throw t.original && t.original.code === \"ER_NO_SUCH_TABLE\" ? new Error(`No description found for \"${e}\" table. Check the table name and schema; remember, they _are_ case sensitive.`) : t;\n    }\n  }\n\n}\n\nw(C, \"SQLiteQueryInterface\"), exports.SQLiteQueryInterface = C;","map":{"version":3,"sources":["../../../../lib/dialects/sqlite/query-interface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils');\nconst _ = require('lodash');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nclass SQLiteQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    Object.assign(fields[attributeName], this.normalizeAttribute(dataTypeOrOptions));\n\n    const sql = this.queryGenerator.removeColumnQuery(tableName, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.query(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    //Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    //http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.substr(0, index)}, ${constraintSnippet})${sql.substr(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const database = this.sequelize.config.database;\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, database);\n    const result = await this.sequelize.query(query, options);\n    return result.map(row => ({\n      tableName,\n      columnName: row.from,\n      referencedTableName: row.table,\n      referencedColumnName: row.to,\n      tableCatalog: database,\n      referencedTableCatalog: database\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.query('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = { ...options, type: QueryTypes.DESCRIBE };\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(tableName);\n\n    try {\n      const data = await this.sequelize.query(sql, options);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.query(sqlIndexes, options);\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          model: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName\n        };\n      }\n\n      return data;\n    } catch (e) {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    }\n  }\n}\n\nexports.SQLiteQueryInterface = SQLiteQueryInterface;\n"]},"metadata":{},"sourceType":"script"}