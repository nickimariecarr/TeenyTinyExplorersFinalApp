{"ast":null,"code":"\"use strict\";\n\nvar M = Object.defineProperty,\n    U = Object.defineProperties;\nvar N = Object.getOwnPropertyDescriptors;\nvar P = Object.getOwnPropertySymbols;\nvar V = Object.prototype.hasOwnProperty,\n    F = Object.prototype.propertyIsEnumerable;\n\nvar R = (n, e, t) => e in n ? M(n, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : n[e] = t,\n    c = (n, e) => {\n  for (var t in e || (e = {})) V.call(e, t) && R(n, t, e[t]);\n\n  if (P) for (var t of P(e)) F.call(e, t) && R(n, t, e[t]);\n  return n;\n},\n    y = (n, e) => U(n, N(e));\n\nvar I = (n, e) => M(n, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst h = require(\"../../data-types\"),\n      L = require(\"../../query-types\"),\n      {\n  QueryInterface: K\n} = require(\"../abstract/query-interface\"),\n      S = require(\"../../utils\");\n\nclass v extends K {\n  async ensureEnums(e, t, r, f) {\n    var _this = this;\n\n    const o = Object.keys(t),\n          q = o.length;\n    let w = \"\",\n        s = [],\n        a = 0;\n\n    for (a = 0; a < q; a++) {\n      const l = t[o[a]],\n            u = l.type;\n      (u instanceof h.ENUM || u instanceof h.ARRAY && u.type instanceof h.ENUM) && (w = this.queryGenerator.pgListEnums(e, l.field || o[a], r), s.push(this.sequelize.query(w, y(c({}, r), {\n        plain: !0,\n        raw: !0,\n        type: L.SELECT\n      }))));\n    }\n\n    const T = await Promise.all(s);\n    s = [];\n    let b = 0;\n    const x = I(function (l, u, m) {\n      let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"before\";\n      let E = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : s.length;\n      const i = c({}, r);\n\n      switch (i.before = null, i.after = null, d) {\n        case \"after\":\n          i.after = m;\n          break;\n\n        case \"before\":\n        default:\n          i.before = m;\n          break;\n      }\n\n      s.splice(E, 0, () => _this.sequelize.query(_this.queryGenerator.pgEnumAdd(e, l, u, i), i));\n    }, \"addEnumValue\");\n\n    for (a = 0; a < q; a++) {\n      const l = t[o[a]],\n            u = l.type,\n            m = u.type || u,\n            d = l.field || o[a];\n\n      if (u instanceof h.ENUM || u instanceof h.ARRAY && m instanceof h.ENUM) {\n        if (!T[b]) s.push(() => this.sequelize.query(this.queryGenerator.pgEnum(e, d, m, r), y(c({}, r), {\n          raw: !0\n        })));else if (!!T[b] && !!f) {\n          const E = this.queryGenerator.fromArray(T[b].enum_value),\n                i = m.values;\n          let z,\n              G = -1;\n\n          for (let p = 0; p < E.length; p++) {\n            const g = E[p],\n                  A = i.indexOf(g);\n            if (z = g, A === -1) continue;\n            const k = i.slice(0, A),\n                  Q = s.length;\n\n            for (let O = k.length - 1; O >= 0 && !~E.indexOf(k[O]); O--) x(d, k[O], z, \"before\", Q);\n\n            A > G && (G = A);\n          }\n\n          if (z && G < i.length - 1) {\n            const p = i.slice(G + 1);\n\n            for (let g = p.length - 1; g >= 0; g--) x(d, p[g], z, \"after\");\n          }\n\n          b++;\n        }\n      }\n    }\n\n    const D = await s.reduce(async (l, u) => await u(await l), Promise.resolve());\n    return s.length && (await this.sequelize.dialect.connectionManager._refreshDynamicOIDs()), D;\n  }\n\n  async getForeignKeyReferencesForTable(e, t) {\n    const r = y(c({}, t), {\n      type: L.FOREIGNKEYS\n    }),\n          f = this.queryGenerator.getForeignKeyReferencesQuery(e.tableName || e, this.sequelize.config.database);\n    return (await this.sequelize.query(f, r)).map(S.camelizeObjectKeys);\n  }\n\n  async dropEnum(e, t) {\n    return t = t || {}, this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(e)), y(c({}, t), {\n      raw: !0\n    }));\n  }\n\n  async dropAllEnums(e) {\n    e = e || {};\n    const t = await this.pgListEnums(null, e);\n    return await Promise.all(t.map(r => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(r.enum_name)), y(c({}, e), {\n      raw: !0\n    }))));\n  }\n\n  async pgListEnums(e, t) {\n    t = t || {};\n    const r = this.queryGenerator.pgListEnums(e);\n    return this.sequelize.query(r, y(c({}, t), {\n      plain: !1,\n      raw: !0,\n      type: L.SELECT\n    }));\n  }\n\n  async dropTable(e, t) {\n    await super.dropTable(e, t);\n    const r = [],\n          f = this.sequelize.modelManager.getModel(e, {\n      attribute: \"tableName\"\n    });\n    if (!f) return;\n    const o = (!t || !t.schema || t.schema === \"public\" ? \"\" : `${t.schema}_`) + e,\n          q = Object.keys(f.rawAttributes),\n          w = q.length;\n\n    for (let s = 0; s < w; s++) if (f.rawAttributes[q[s]].type instanceof h.ENUM) {\n      const a = this.queryGenerator.pgEnumDrop(o, q[s]);\n      t.supportsSearchPath = !1, r.push(this.sequelize.query(a, y(c({}, t), {\n        raw: !0\n      })));\n    }\n\n    await Promise.all(r);\n  }\n\n}\n\nI(v, \"PostgresQueryInterface\"), exports.PostgresQueryInterface = v;","map":{"version":3,"sources":["../../../../lib/dialects/postgres/query-interface.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(Utils.camelizeObjectKeys);\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"]},"metadata":{},"sourceType":"script"}