{"ast":null,"code":"\"use strict\";\n\nvar c = Object.defineProperty;\nvar E = Object.getOwnPropertySymbols;\nvar S = Object.prototype.hasOwnProperty,\n    m = Object.prototype.propertyIsEnumerable;\n\nvar u = (s, e, t) => e in s ? c(s, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : s[e] = t,\n    d = (s, e) => {\n  for (var t in e || (e = {})) S.call(e, t) && u(s, t, e[t]);\n\n  if (E) for (var t of E(e)) m.call(e, t) && u(s, t, e[t]);\n  return s;\n};\n\nvar l = (s, e) => c(s, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst C = require(\"semver\"),\n      N = require(\"../abstract/connection-manager\"),\n      n = require(\"../../errors\"),\n      {\n  logger: w\n} = require(\"../../utils/logger\"),\n      O = require(\"../../data-types\").mariadb,\n      b = require(\"moment-timezone\"),\n      p = w.debugContext(\"connection:mariadb\"),\n      i = require(\"../parserStore\")(\"mariadb\");\n\nclass a extends N {\n  constructor(e, t) {\n    t.config.port = t.config.port || 3306;\n    super(e, t);\n    this.lib = this._loadDialectModule(\"mariadb\"), this.refreshTypeParser(O);\n  }\n\n  static _typecast(e, t) {\n    return i.get(e.type) ? i.get(e.type)(e, this.sequelize.options, t) : t();\n  }\n\n  _refreshTypeParser(e) {\n    i.refresh(e);\n  }\n\n  _clearTypeParser() {\n    i.clear();\n  }\n\n  async connect(e) {\n    let t = this.sequelize.options.timezone;\n    t = /\\//.test(t) ? b.tz(t).format(\"Z\") : t;\n    const o = d({\n      host: e.host,\n      port: e.port,\n      user: e.username,\n      password: e.password,\n      database: e.database,\n      timezone: t,\n      typeCast: a._typecast.bind(this),\n      bigNumberStrings: !1,\n      supportBigNumbers: !0,\n      foundRows: !1\n    }, e.dialectOptions);\n    this.sequelize.config.keepDefaultTimezone || (o.initSql ? (Array.isArray(o.initSql) || (o.initSql = [o.initSql]), o.initSql.push(`SET time_zone = '${t}'`)) : o.initSql = `SET time_zone = '${t}'`);\n\n    try {\n      const r = await this.lib.createConnection(o);\n      return this.sequelize.options.databaseVersion = C.coerce(r.serverVersion()).version, p(\"connection acquired\"), r.on(\"error\", h => {\n        switch (h.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(r);\n        }\n      }), r;\n    } catch (r) {\n      switch (r.code) {\n        case \"ECONNREFUSED\":\n          throw new n.ConnectionRefusedError(r);\n\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ER_ACCESS_DENIED_NO_PASSWORD_ERROR\":\n          throw new n.AccessDeniedError(r);\n\n        case \"ENOTFOUND\":\n          throw new n.HostNotFoundError(r);\n\n        case \"EHOSTUNREACH\":\n        case \"ENETUNREACH\":\n        case \"EADDRNOTAVAIL\":\n          throw new n.HostNotReachableError(r);\n\n        case \"EINVAL\":\n          throw new n.InvalidConnectionError(r);\n\n        default:\n          throw new n.ConnectionError(r);\n      }\n    }\n  }\n\n  async disconnect(e) {\n    if (!e.isValid()) {\n      p(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n\n    return await e.end();\n  }\n\n  validate(e) {\n    return e && e.isValid();\n  }\n\n}\n\nl(a, \"ConnectionManager\"), module.exports = a, module.exports.ConnectionManager = a, module.exports.default = a;","map":{"version":3,"sources":["../../../../lib/dialects/mariadb/connection-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst semver = require('semver');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mariadb;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mariadb');\nconst parserStore = require('../parserStore')('mariadb');\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mariadb');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z')\n      : tzOffset;\n\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false,\n      ...config.dialectOptions\n    };\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(\n          connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n    return await connection.end();\n  }\n\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}