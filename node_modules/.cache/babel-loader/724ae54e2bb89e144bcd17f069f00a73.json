{"ast":null,"code":"\"use strict\";\n\nvar f = Object.defineProperty;\n\nvar t = (r, i) => f(r, \"name\", {\n  value: i,\n  configurable: !0\n});\n\nconst l = require(\"lodash\");\n\nfunction u(r) {\n  return r === null ? \"\" : r === 1 / 0 || r === -1 / 0 ? r.toString().toLowerCase() : JSON.stringify(r);\n}\n\nt(u, \"stringifyRangeBound\");\n\nfunction c(r, i) {\n  return r ? r === \"infinity\" ? 1 / 0 : r === \"-infinity\" ? -1 / 0 : i(r) : null;\n}\n\nt(c, \"parseRangeBound\");\n\nfunction o(r) {\n  if (r === null) return null;\n  if (!Array.isArray(r)) throw new Error(\"range must be an array\");\n  if (!r.length) return \"empty\";\n  if (r.length !== 2) throw new Error(\"range array length must be 0 (empty) or 2 (lower and upper bounds)\");\n  Object.prototype.hasOwnProperty.call(r, \"inclusive\") ? r.inclusive === !1 ? r.inclusive = [!1, !1] : r.inclusive ? r.inclusive === !0 && (r.inclusive = [!0, !0]) : r.inclusive = [!0, !1] : r.inclusive = [!0, !1], l.each(r, (e, s) => {\n    l.isObject(e) && (Object.prototype.hasOwnProperty.call(e, \"inclusive\") && (r.inclusive[s] = !!e.inclusive), Object.prototype.hasOwnProperty.call(e, \"value\") && (r[s] = e.value));\n  });\n  const i = u(r[0]),\n        n = u(r[1]);\n  return `${(r.inclusive[0] ? \"[\" : \"(\") + i},${n}${r.inclusive[1] ? \"]\" : \")\"}`;\n}\n\nt(o, \"stringify\"), exports.stringify = o;\n\nfunction y(r, i) {\n  if (r === null) return null;\n  if (r === \"empty\") return [];\n  let n = r.substring(1, r.length - 1).split(\",\", 2);\n  return n.length !== 2 ? r : (n = n.map((e, s) => ({\n    value: c(e, i),\n    inclusive: s === 0 ? r[0] === \"[\" : r[r.length - 1] === \"]\"\n  })), n);\n}\n\nt(y, \"parse\"), exports.parse = y;","map":{"version":3,"sources":["../../../../lib/dialects/postgres/range.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nfunction stringifyRangeBound(bound) {\n  if (bound === null) {\n    return '' ;\n  }\n  if (bound === Infinity || bound === -Infinity) {\n    return bound.toString().toLowerCase();\n  }\n  return JSON.stringify(bound);\n}\n\nfunction parseRangeBound(bound, parseType) {\n  if (!bound) {\n    return null;\n  }\n  if (bound === 'infinity') {\n    return Infinity;\n  }\n  if (bound === '-infinity') {\n    return -Infinity;\n  }\n  return parseType(bound);\n\n}\n\nfunction stringify(data) {\n  if (data === null) return null;\n\n  if (!Array.isArray(data)) throw new Error('range must be an array');\n  if (!data.length) return 'empty';\n  if (data.length !== 2) throw new Error('range array length must be 0 (empty) or 2 (lower and upper bounds)');\n\n  if (Object.prototype.hasOwnProperty.call(data, 'inclusive')) {\n    if (data.inclusive === false) data.inclusive = [false, false];\n    else if (!data.inclusive) data.inclusive = [true, false];\n    else if (data.inclusive === true) data.inclusive = [true, true];\n  } else {\n    data.inclusive = [true, false];\n  }\n\n  _.each(data, (value, index) => {\n    if (_.isObject(value)) {\n      if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) data.inclusive[index] = !!value.inclusive;\n      if (Object.prototype.hasOwnProperty.call(value, 'value')) data[index] = value.value;\n    }\n  });\n\n  const lowerBound = stringifyRangeBound(data[0]);\n  const upperBound = stringifyRangeBound(data[1]);\n\n  return `${(data.inclusive[0] ? '[' : '(') + lowerBound},${upperBound}${data.inclusive[1] ? ']' : ')'}`;\n}\nexports.stringify = stringify;\n\nfunction parse(value, parser) {\n  if (value === null) return null;\n  if (value === 'empty') {\n    return [];\n  }\n\n  let result = value\n    .substring(1, value.length - 1)\n    .split(',', 2);\n\n  if (result.length !== 2) return value;\n\n  result = result.map((item, index) => {\n    return {\n      value: parseRangeBound(item, parser),\n      inclusive: index === 0 ? value[0] === '[' : value[value.length - 1] === ']'\n    };\n  });\n\n  return result;\n}\nexports.parse = parse;\n"]},"metadata":{},"sourceType":"script"}