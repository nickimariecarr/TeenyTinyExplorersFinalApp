{"ast":null,"code":"\"use strict\";\n\nvar p = Object.defineProperty;\n\nvar o = (r, t) => p(r, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst n = require(\"lodash\"),\n      s = require(\"../abstract\"),\n      u = require(\"./connection-manager\"),\n      i = require(\"./query\"),\n      a = require(\"./query-generator\"),\n      c = require(\"../../data-types\").mysql,\n      {\n  MySQLQueryInterface: y\n} = require(\"./query-interface\");\n\nclass e extends s {\n  constructor(t) {\n    super();\n    this.sequelize = t, this.connectionManager = new u(this, t), this.queryGenerator = new a({\n      _dialect: this,\n      sequelize: t\n    }), this.queryInterface = new y(t, this.queryGenerator);\n  }\n\n}\n\no(e, \"MysqlDialect\"), e.prototype.supports = n.merge(n.cloneDeep(s.prototype.supports), {\n  \"VALUES ()\": !0,\n  \"LIMIT ON UPDATE\": !0,\n  lock: !0,\n  forShare: \"LOCK IN SHARE MODE\",\n  settingIsolationLevelDuringTransaction: !1,\n  inserts: {\n    ignoreDuplicates: \" IGNORE\",\n    updateOnDuplicate: \" ON DUPLICATE KEY UPDATE\"\n  },\n  index: {\n    collate: !1,\n    length: !0,\n    parser: !0,\n    type: !0,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: !1,\n    check: !1\n  },\n  indexViaAlter: !0,\n  indexHints: !0,\n  NUMERIC: !0,\n  GEOMETRY: !0,\n  JSON: !0,\n  REGEXP: !0\n}), e.prototype.defaultVersion = \"5.7.0\", e.prototype.Query = i, e.prototype.QueryGenerator = a, e.prototype.DataTypes = c, e.prototype.name = \"mysql\", e.prototype.TICK_CHAR = \"`\", e.prototype.TICK_CHAR_LEFT = e.prototype.TICK_CHAR, e.prototype.TICK_CHAR_RIGHT = e.prototype.TICK_CHAR, module.exports = e;","map":{"version":3,"sources":["../../../../lib/dialects/mysql/index.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;AAAA,MACM,CAAA,GAAkB,OAAA,CAAQ,aAAR,CADxB;AAAA,MAEM,CAAA,GAAoB,OAAA,CAAQ,sBAAR,CAF1B;AAAA,MAGM,CAAA,GAAQ,OAAA,CAAQ,SAAR,CAHd;AAAA,MAIM,CAAA,GAAiB,OAAA,CAAQ,mBAAR,CAJvB;AAAA,MAKM,CAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,KAL9C;AAAA,MAMM;AAAE,EAAA,mBAAA,EAAA;AAAF,IAA0B,OAAA,CAAQ,mBAAR,CANhC;;AAQA,MAAA,CAAA,SAA2B,CAA3B,CAA2C;AACzC,EAAA,WAAA,CAAY,CAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,CAAjB,EACA,KAAK,iBAAL,GAAyB,IAAI,CAAJ,CAAsB,IAAtB,EAA4B,CAA5B,CADzB,EAEA,KAAK,cAAL,GAAsB,IAAI,CAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA,SAAA,EAAA;AAFuC,KAAnB,CAFtB,EAMA,KAAK,cAAL,GAAsB,IAAI,CAAJ,CACpB,CADoB,EAEpB,KAAK,cAFe,CANtB;AAQO;;AAXgC;;AAA3C,CAAA,CAAA,CAAA,EAAA,cAAA,CAAA,EAgBA,CAAA,CAAa,SAAb,CAAuB,QAAvB,GAAkC,CAAA,CAAE,KAAF,CAChC,CAAA,CAAE,SAAF,CAAY,CAAA,CAAgB,SAAhB,CAA0B,QAAtC,CADgC,EAEhC;AACE,eAAa,CAAA,CADf;AAEE,qBAAmB,CAAA,CAFrB;AAGE,EAAA,IAAA,EAAM,CAAA,CAHR;AAIE,EAAA,QAAA,EAAU,oBAJZ;AAKE,EAAA,sCAAA,EAAwC,CAAA,CAL1C;AAME,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,SADX;AAEP,IAAA,iBAAA,EAAmB;AAFZ,GANX;AAUE,EAAA,KAAA,EAAO;AACL,IAAA,OAAA,EAAS,CAAA,CADJ;AAEL,IAAA,MAAA,EAAQ,CAAA,CAFH;AAGL,IAAA,MAAA,EAAQ,CAAA,CAHH;AAIL,IAAA,IAAA,EAAM,CAAA,CAJD;AAKL,IAAA,KAAA,EAAO;AALF,GAVT;AAiBE,EAAA,WAAA,EAAa;AACX,IAAA,cAAA,EAAgB,CAAA,CADL;AAEX,IAAA,KAAA,EAAO,CAAA;AAFI,GAjBf;AAqBE,EAAA,aAAA,EAAe,CAAA,CArBjB;AAsBE,EAAA,UAAA,EAAY,CAAA,CAtBd;AAuBE,EAAA,OAAA,EAAS,CAAA,CAvBX;AAwBE,EAAA,QAAA,EAAU,CAAA,CAxBZ;AAyBE,EAAA,IAAA,EAAM,CAAA,CAzBR;AA0BE,EAAA,MAAA,EAAQ,CAAA;AA1BV,CAFgC,CAhBlC,EAgDA,CAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,OAhDxC,EAiDA,CAAA,CAAa,SAAb,CAAuB,KAAvB,GAA+B,CAjD/B,EAkDA,CAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,CAlDxC,EAmDA,CAAA,CAAa,SAAb,CAAuB,SAAvB,GAAmC,CAnDnC,EAoDA,CAAA,CAAa,SAAb,CAAuB,IAAvB,GAA8B,OApD9B,EAqDA,CAAA,CAAa,SAAb,CAAuB,SAAvB,GAAmC,GArDnC,EAsDA,CAAA,CAAa,SAAb,CAAuB,cAAvB,GAAwC,CAAA,CAAa,SAAb,CAAuB,SAtD/D,EAuDA,CAAA,CAAa,SAAb,CAAuB,eAAvB,GAAyC,CAAA,CAAa,SAAb,CAAuB,SAvDhE,EAyDA,MAAA,CAAO,OAAP,GAAiB,CAzDjB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\nconst { MySQLQueryInterface } = require('./query-interface');\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new MySQLQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'VALUES ()': true,\n    'LIMIT ON UPDATE': true,\n    lock: true,\n    forShare: 'LOCK IN SHARE MODE',\n    settingIsolationLevelDuringTransaction: false,\n    inserts: {\n      ignoreDuplicates: ' IGNORE',\n      updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n    },\n    index: {\n      collate: false,\n      length: true,\n      parser: true,\n      type: true,\n      using: 1\n    },\n    constraints: {\n      dropConstraint: false,\n      check: false\n    },\n    indexViaAlter: true,\n    indexHints: true,\n    NUMERIC: true,\n    GEOMETRY: true,\n    JSON: true,\n    REGEXP: true\n  }\n);\n\nMysqlDialect.prototype.defaultVersion = '5.7.0'; // minimum supported version\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"]},"metadata":{},"sourceType":"script"}