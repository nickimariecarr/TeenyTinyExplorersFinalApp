{"ast":null,"code":"\"use strict\";\n\nvar E = Object.defineProperty;\n\nvar b = (d, e) => E(d, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst C = require(\"../abstract/query\"),\n      w = require(\"../../errors\"),\n      A = require(\"../parserStore\")(\"mssql\"),\n      p = require(\"lodash\"),\n      {\n  logger: Q\n} = require(\"../../utils/logger\"),\n      T = Q.debugContext(\"sql:mssql\");\n\nfunction N(d) {\n  if (!Number.isFinite(d)) return 0;\n  let e = 1;\n\n  for (; Math.round(d * e) / e !== d;) e *= 10;\n\n  return Math.log10(e);\n}\n\nb(N, \"getScale\");\n\nclass g extends C {\n  getInsertIdField() {\n    return \"id\";\n  }\n\n  getSQLTypeFromJsType(e, n) {\n    const t = {\n      type: n.VarChar,\n      typeOptions: {}\n    };\n    return t.type = n.NVarChar, typeof e == \"number\" ? Number.isInteger(e) ? e >= -2147483648 && e <= 2147483647 ? t.type = n.Int : t.type = n.BigInt : (t.type = n.Numeric, t.typeOptions = {\n      precision: 30,\n      scale: N(e)\n    }) : typeof e == \"boolean\" && (t.type = n.Bit), Buffer.isBuffer(e) && (t.type = n.VarBinary), t;\n  }\n\n  async _run(e, n, t, s) {\n    this.sql = n;\n\n    const {\n      options: i\n    } = this,\n          o = this._logQuery(n, T, t),\n          u = new Promise((l, h) => {\n      if (n.startsWith(\"BEGIN TRANSACTION\")) return e.beginTransaction(r => r ? h(r) : l([]), i.transaction.name, e.lib.ISOLATION_LEVEL[i.isolationLevel]);\n      if (n.startsWith(\"COMMIT TRANSACTION\")) return e.commitTransaction(r => r ? h(r) : l([]));\n      if (n.startsWith(\"ROLLBACK TRANSACTION\")) return e.rollbackTransaction(r => r ? h(r) : l([]), i.transaction.name);\n      if (n.startsWith(\"SAVE TRANSACTION\")) return e.saveTransaction(r => r ? h(r) : l([]), i.transaction.name);\n      const m = [],\n            y = new e.lib.Request(n, (r, f) => r ? h(r) : l([m, f]));\n      t && p.forOwn(t, (r, f) => {\n        const I = this.getSQLTypeFromJsType(r, e.lib.TYPES);\n        y.addParameter(f, I.type, r, I.typeOptions);\n      }), y.on(\"row\", r => {\n        m.push(r);\n      }), e.execSql(y);\n    });\n\n    let a, c;\n\n    try {\n      [a, c] = await u;\n    } catch (l) {\n      throw l.sql = n, l.parameters = t, this.formatError(l, s);\n    }\n\n    return o(), Array.isArray(a) && (a = a.map(l => {\n      const h = {};\n\n      for (const m of l) {\n        const y = m.metadata.type.id,\n              r = A.get(y);\n        let f = m.value;\n        f !== null & !!r && (f = r(f)), h[m.metadata.colName] = f;\n      }\n\n      return h;\n    })), this.formatResults(a, c);\n  }\n\n  run(e, n) {\n    const t = new Error();\n    return this.connection.queue.enqueue(() => this._run(this.connection, e, n, t.stack));\n  }\n\n  static formatBindParameters(e, n, t) {\n    const s = {},\n          i = b((o, u, a) => {\n      if (a[u] !== void 0) return s[u] = a[u], `@${u}`;\n    }, \"replacementFunc\");\n    return e = C.formatBindParameters(e, n, t, i)[0], [e, s];\n  }\n\n  formatResults(e, n) {\n    if (this.isInsertQuery(e)) return this.handleInsertQuery(e), [this.instance || e, n];\n    if (this.isShowTablesQuery()) return this.handleShowTablesQuery(e);\n\n    if (this.isDescribeQuery()) {\n      const t = {};\n\n      for (const s of e) s.Default && (s.Default = s.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\")), t[s.Name] = {\n        type: s.Type.toUpperCase(),\n        allowNull: s.IsNull === \"YES\",\n        defaultValue: s.Default,\n        primaryKey: s.Constraint === \"PRIMARY KEY\",\n        autoIncrement: s.IsIdentity === 1,\n        comment: s.Comment\n      }, t[s.Name].type.includes(\"CHAR\") && s.Length && (s.Length === -1 ? t[s.Name].type += \"(MAX)\" : t[s.Name].type += `(${s.Length})`);\n\n      return t;\n    }\n\n    return this.isSelectQuery() ? this.handleSelectQuery(e) : this.isShowIndexesQuery() ? this.handleShowIndexesQuery(e) : this.isCallQuery() ? e[0] : this.isBulkUpdateQuery() ? this.options.returning ? this.handleSelectQuery(e) : n : this.isBulkDeleteQuery() ? e[0] ? e[0].AFFECTEDROWS : 0 : this.isVersionQuery() ? e[0].version : this.isForeignKeysQuery() ? e : this.isUpsertQuery() ? (this.handleInsertQuery(e), [this.instance || e, e[0].$action === \"INSERT\"]) : this.isUpdateQuery() ? [this.instance || e, n] : this.isShowConstraintsQuery() ? this.handleShowConstraintsQuery(e) : this.isRawQuery() ? [e, n] : e;\n  }\n\n  handleShowTablesQuery(e) {\n    return e.map(n => ({\n      tableName: n.TABLE_NAME,\n      schema: n.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowConstraintsQuery(e) {\n    return e.slice(1).map(n => {\n      const t = {};\n\n      for (const s in n) t[p.camelCase(s)] = n[s];\n\n      return t;\n    });\n  }\n\n  formatError(e, n) {\n    let t;\n\n    if (t = e.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/), t = t || e.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/), t && t.length > 1) {\n      let s = {};\n      const i = this.model && this.model.uniqueKeys[t[1]];\n      let o = \"Validation error\";\n\n      if (i && !!i.msg && (o = i.msg), t[3]) {\n        const a = t[3].split(\",\").map(c => c.trim());\n        i ? s = p.zipObject(i.fields, a) : s[t[1]] = t[3];\n      }\n\n      const u = [];\n      return p.forOwn(s, (a, c) => {\n        u.push(new w.ValidationErrorItem(this.getUniqueConstraintErrorMessage(c), \"unique violation\", c, a, this.instance, \"not_unique\"));\n      }), new w.UniqueConstraintError({\n        message: o,\n        errors: u,\n        parent: e,\n        fields: s,\n        stack: n\n      });\n    }\n\n    if (t = e.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || e.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || e.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./), t && t.length > 0) return new w.ForeignKeyConstraintError({\n      fields: null,\n      index: t[1],\n      parent: e,\n      stack: n\n    });\n\n    if (t = e.message.match(/Could not drop constraint. See previous errors./), t && t.length > 0) {\n      let s = e.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      s = s ? s[1] : void 0;\n      let i = e.sql.match(/table \\[(.+?)\\]/i);\n      return i = i ? i[1] : void 0, new w.UnknownConstraintError({\n        message: t[1],\n        constraint: s,\n        table: i,\n        parent: e,\n        stack: n\n      });\n    }\n\n    return new w.DatabaseError(e, {\n      stack: n\n    });\n  }\n\n  isShowOrDescribeQuery() {\n    let e = !1;\n    return e = e || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\"), e = e || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\"), e = e || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\"), e;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n  }\n\n  handleShowIndexesQuery(e) {\n    return e = e.reduce((n, t) => (t.index_name in n || (n[t.index_name] = t, t.fields = []), t.index_keys.split(\",\").forEach(s => {\n      let i = s.trim();\n      i.includes(\"(-)\") && (i = i.replace(\"(-)\", \"\")), n[t.index_name].fields.push({\n        attribute: i,\n        length: void 0,\n        order: s.includes(\"(-)\") ? \"DESC\" : \"ASC\",\n        collate: void 0\n      });\n    }), delete t.index_keys, n), {}), p.map(e, n => ({\n      primary: n.index_name.toLowerCase().startsWith(\"pk\"),\n      fields: n.fields,\n      name: n.index_name,\n      tableName: void 0,\n      unique: n.index_description.toLowerCase().includes(\"unique\"),\n      type: void 0\n    }));\n  }\n\n  handleInsertQuery(e, n) {\n    if (this.instance) {\n      const t = this.model.autoIncrementAttribute;\n      let s = null,\n          i = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, t) && this.model.rawAttributes[t].field !== void 0 && (i = this.model.rawAttributes[t].field), s = s || e && e[0][this.getInsertIdField()], s = s || n && n[this.getInsertIdField()], s = s || e && e[0][t], s = s || i && e && e[0][i], this.instance[t] = s, this.instance.dataValues) {\n        for (const o in e[0]) if (Object.prototype.hasOwnProperty.call(e[0], o)) {\n          const u = e[0][o],\n                a = p.find(this.model.rawAttributes, c => c.fieldName === o || c.field === o);\n          this.instance.dataValues[a && a.fieldName || o] = u;\n        }\n      }\n    }\n  }\n\n}\n\nb(g, \"Query\"), module.exports = g, module.exports.Query = g, module.exports.default = g;","map":{"version":3,"sources":["../../../../lib/dialects/mssql/query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    } else if (typeof value === 'boolean') {\n      paramType.type = TYPES.Bit;\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  async _run(connection, sql, parameters, errStack) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    const query = new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(error => error ? reject(error) : resolve([]), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(error => error ? reject(error) : resolve([]));\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(error => error ? reject(error) : resolve([]), options.transaction.name);\n      }\n\n      const rows = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => err ? reject(err) : resolve([rows, rowCount]));\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        rows.push(columns);\n      });\n\n      connection.execSql(request);\n    });\n\n    let rows, rowCount;\n\n    try {\n      [rows, rowCount] = await query;\n    } catch (err) {\n      err.sql = sql;\n      err.parameters = parameters;\n\n      throw this.formatError(err, errStack);\n    }\n\n    complete();\n\n    if (Array.isArray(rows)) {\n      rows = rows.map(columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n        return row;\n      });\n    }\n\n    return this.formatResults(rows, rowCount);\n  }\n\n  run(sql, parameters) {\n    const errForStack = new Error();\n    return this.connection.queue.enqueue(() =>\n      this._run(this.connection, sql, parameters, errForStack.stack)\n    );\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      const result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] ? data[0].AFFECTEDROWS : 0;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      this.handleInsertQuery(data);\n      return [this.instance || data, data[0].$action === 'INSERT'];\n    }\n    if (this.isUpdateQuery()) {\n      return [this.instance || data, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      return [data, rowCount];\n    }\n    return data;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err, errStack) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[3]) {\n        const values = match[3].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[3];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}