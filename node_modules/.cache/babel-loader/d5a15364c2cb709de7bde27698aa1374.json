{"ast":null,"code":"\"use strict\";\n\nvar h = Object.defineProperty,\n    m = Object.defineProperties;\nvar M = Object.getOwnPropertyDescriptors;\nvar C = Object.getOwnPropertySymbols;\nvar $ = Object.prototype.hasOwnProperty,\n    y = Object.prototype.propertyIsEnumerable;\n\nvar O = (c, e, t) => e in c ? h(c, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : c[e] = t,\n    T = (c, e) => {\n  for (var t in e || (e = {})) $.call(e, t) && O(c, t, e[t]);\n\n  if (C) for (var t of C(e)) y.call(e, t) && O(c, t, e[t]);\n  return c;\n},\n    L = (c, e) => m(c, M(e));\n\nvar f = (c, e) => h(c, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst S = require(\"lodash\"),\n      s = require(\"../../utils\"),\n      F = require(\"../abstract/query-generator\"),\n      p = require(\"util\"),\n      _ = require(\"../../operators\"),\n      g = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i,\n      D = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i,\n      q = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i,\n      d = [\"CONSTRAINT_NAME as constraint_name\", \"CONSTRAINT_NAME as constraintName\", \"CONSTRAINT_SCHEMA as constraintSchema\", \"CONSTRAINT_SCHEMA as constraintCatalog\", \"TABLE_NAME as tableName\", \"TABLE_SCHEMA as tableSchema\", \"TABLE_SCHEMA as tableCatalog\", \"COLUMN_NAME as columnName\", \"REFERENCED_TABLE_SCHEMA as referencedTableSchema\", \"REFERENCED_TABLE_SCHEMA as referencedTableCatalog\", \"REFERENCED_TABLE_NAME as referencedTableName\", \"REFERENCED_COLUMN_NAME as referencedColumnName\"].join(\",\"),\n      Q = new Set([\"BLOB\", \"TEXT\", \"GEOMETRY\", \"JSON\"]);\n\nclass I extends F {\n  constructor(e) {\n    super(e);\n    this.OperatorMap = L(T({}, this.OperatorMap), {\n      [_.regexp]: \"REGEXP\",\n      [_.notRegexp]: \"NOT REGEXP\"\n    });\n  }\n\n  createDatabaseQuery(e, t) {\n    return t = T({\n      charset: null,\n      collate: null\n    }, t), s.joinSQLFragments([\"CREATE DATABASE IF NOT EXISTS\", this.quoteIdentifier(e), t.charset && `DEFAULT CHARACTER SET ${this.escape(t.charset)}`, t.collate && `DEFAULT COLLATE ${this.escape(t.collate)}`, \";\"]);\n  }\n\n  dropDatabaseQuery(e) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(e)};`;\n  }\n\n  createSchema() {\n    return \"SHOW TABLES\";\n  }\n\n  showSchemasQuery() {\n    return \"SHOW TABLES\";\n  }\n\n  versionQuery() {\n    return \"SELECT VERSION() as `version`\";\n  }\n\n  createTableQuery(e, t, n) {\n    n = T({\n      engine: \"InnoDB\",\n      charset: null,\n      rowFormat: null\n    }, n);\n    const r = [],\n          i = {},\n          a = [];\n\n    for (const E in t) {\n      if (!Object.prototype.hasOwnProperty.call(t, E)) continue;\n      const o = t[E];\n      let A;\n      o.includes(\"PRIMARY KEY\") ? (r.push(E), o.includes(\"REFERENCES\") ? (A = o.match(/^(.+) (REFERENCES.*)$/), a.push(`${this.quoteIdentifier(E)} ${A[1].replace(\"PRIMARY KEY\", \"\")}`), i[E] = A[2]) : a.push(`${this.quoteIdentifier(E)} ${o.replace(\"PRIMARY KEY\", \"\")}`)) : o.includes(\"REFERENCES\") ? (A = o.match(/^(.+) (REFERENCES.*)$/), a.push(`${this.quoteIdentifier(E)} ${A[1]}`), i[E] = A[2]) : a.push(`${this.quoteIdentifier(E)} ${o}`);\n    }\n\n    const l = this.quoteTable(e);\n    let u = a.join(\", \");\n    const N = r.map(E => this.quoteIdentifier(E)).join(\", \");\n    n.uniqueKeys && S.each(n.uniqueKeys, (E, o) => {\n      E.customIndex && (typeof o != \"string\" && (o = `uniq_${e}_${E.fields.join(\"_\")}`), u += `, UNIQUE ${this.quoteIdentifier(o)} (${E.fields.map(A => this.quoteIdentifier(A)).join(\", \")})`);\n    }), N.length > 0 && (u += `, PRIMARY KEY (${N})`);\n\n    for (const E in i) Object.prototype.hasOwnProperty.call(i, E) && (u += `, FOREIGN KEY (${this.quoteIdentifier(E)}) ${i[E]}`);\n\n    return s.joinSQLFragments([\"CREATE TABLE IF NOT EXISTS\", l, `(${u})`, `ENGINE=${n.engine}`, n.comment && typeof n.comment == \"string\" && `COMMENT ${this.escape(n.comment)}`, n.charset && `DEFAULT CHARSET=${n.charset}`, n.collate && `COLLATE ${n.collate}`, n.initialAutoIncrement && `AUTO_INCREMENT=${n.initialAutoIncrement}`, n.rowFormat && `ROW_FORMAT=${n.rowFormat}`, \";\"]);\n  }\n\n  describeTableQuery(e, t, n) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(this.addSchema({\n      tableName: e,\n      _schema: t,\n      _schemaDelimiter: n\n    }))};`;\n  }\n\n  showTablesQuery(e) {\n    let t = \"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n    return e ? t += ` AND TABLE_SCHEMA = ${this.escape(e)}` : t += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA', 'SYS')\", `${t};`;\n  }\n\n  addColumnQuery(e, t, n) {\n    return s.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"ADD\", this.quoteIdentifier(t), this.attributeToSQL(n, {\n      context: \"addColumn\",\n      tableName: e,\n      foreignKey: t\n    }), \";\"]);\n  }\n\n  removeColumnQuery(e, t) {\n    return s.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"DROP\", this.quoteIdentifier(t), \";\"]);\n  }\n\n  changeColumnQuery(e, t) {\n    const n = [],\n          r = [];\n\n    for (const i in t) {\n      let a = t[i];\n\n      if (a.includes(\"REFERENCES\")) {\n        const l = this.quoteIdentifier(i);\n        a = a.replace(/.+?(?=REFERENCES)/, \"\"), r.push(`FOREIGN KEY (${l}) ${a}`);\n      } else n.push(`\\`${i}\\` \\`${i}\\` ${a}`);\n    }\n\n    return s.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), n.length && `CHANGE ${n.join(\", \")}`, r.length && `ADD ${r.join(\", \")}`, \";\"]);\n  }\n\n  renameColumnQuery(e, t, n) {\n    const r = [];\n\n    for (const i in n) {\n      const a = n[i];\n      r.push(`\\`${t}\\` \\`${i}\\` ${a}`);\n    }\n\n    return s.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"CHANGE\", r.join(\", \"), \";\"]);\n  }\n\n  handleSequelizeMethod(e, t, n, r, i) {\n    if (e instanceof s.Json) {\n      if (e.conditions) return this.parseConditionObject(e.conditions).map(l => `${this.jsonPathExtractionQuery(l.path[0], S.tail(l.path))} = '${l.value}'`).join(\" AND \");\n\n      if (e.path) {\n        let a;\n        if (this._checkValidJsonStatement(e.path)) a = e.path;else {\n          const l = S.toPath(e.path),\n                u = l.shift();\n          a = this.jsonPathExtractionQuery(u, l);\n        }\n        return e.value && (a += p.format(\" = %s\", this.escape(e.value))), a;\n      }\n    } else e instanceof s.Cast && (/timestamp/i.test(e.type) ? e.type = \"datetime\" : e.json && /boolean/i.test(e.type) ? e.type = \"char\" : /double precision/i.test(e.type) || /boolean/i.test(e.type) || /integer/i.test(e.type) ? e.type = \"decimal\" : /text/i.test(e.type) && (e.type = \"char\"));\n\n    return super.handleSequelizeMethod(e, t, n, r, i);\n  }\n\n  _toJSONValue(e) {\n    return typeof e == \"boolean\" ? e.toString() : e === null ? \"null\" : e;\n  }\n\n  truncateTableQuery(e) {\n    return `TRUNCATE ${this.quoteTable(e)}`;\n  }\n\n  deleteQuery(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let r = arguments.length > 3 ? arguments[3] : undefined;\n    let i = \"\",\n        a = `DELETE FROM ${this.quoteTable(e)}`;\n    return n.limit && (i = ` LIMIT ${this.escape(n.limit)}`), t = this.getWhereConditions(t, null, r, n), t && (a += ` WHERE ${t}`), a + i;\n  }\n\n  showIndexesQuery(e, t) {\n    return s.joinSQLFragments([`SHOW INDEX FROM ${this.quoteTable(e)}`, t && t.database && `FROM \\`${t.database}\\``]);\n  }\n\n  showConstraintsQuery(e, t) {\n    const n = e.tableName || e,\n          r = e.schema;\n    return s.joinSQLFragments([\"SELECT CONSTRAINT_CATALOG AS constraintCatalog,\", \"CONSTRAINT_NAME AS constraintName,\", \"CONSTRAINT_SCHEMA AS constraintSchema,\", \"CONSTRAINT_TYPE AS constraintType,\", \"TABLE_NAME AS tableName,\", \"TABLE_SCHEMA AS tableSchema\", \"from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\", `WHERE table_name='${n}'`, t && `AND constraint_name = '${t}'`, r && `AND TABLE_SCHEMA = '${r}'`, \";\"]);\n  }\n\n  removeIndexQuery(e, t) {\n    let n = t;\n    return typeof n != \"string\" && (n = s.underscore(`${e}_${t.join(\"_\")}`)), s.joinSQLFragments([\"DROP INDEX\", this.quoteIdentifier(n), \"ON\", this.quoteTable(e)]);\n  }\n\n  attributeToSQL(e, t) {\n    S.isPlainObject(e) || (e = {\n      type: e\n    });\n    const n = e.type.toString({\n      escape: this.escape.bind(this)\n    });\n    let r = n;\n\n    if (e.allowNull === !1 && (r += \" NOT NULL\"), e.autoIncrement && (r += \" auto_increment\"), !Q.has(n) && e.type._binary !== !0 && s.defaultValueSchemable(e.defaultValue) && (r += ` DEFAULT ${this.escape(e.defaultValue)}`), e.unique === !0 && (r += \" UNIQUE\"), e.primaryKey && (r += \" PRIMARY KEY\"), e.comment && (r += ` COMMENT ${this.escape(e.comment)}`), e.first && (r += \" FIRST\"), e.after && (r += ` AFTER ${this.quoteIdentifier(e.after)}`), e.references) {\n      if (t && t.context === \"addColumn\" && t.foreignKey) {\n        const i = this.quoteIdentifier(t.foreignKey);\n        r += `, ADD CONSTRAINT ${this.quoteIdentifier(`${t.tableName}_${i}_foreign_idx`)} FOREIGN KEY (${i})`;\n      }\n\n      r += ` REFERENCES ${this.quoteTable(e.references.model)}`, e.references.key ? r += ` (${this.quoteIdentifier(e.references.key)})` : r += ` (${this.quoteIdentifier(\"id\")})`, e.onDelete && (r += ` ON DELETE ${e.onDelete.toUpperCase()}`), e.onUpdate && (r += ` ON UPDATE ${e.onUpdate.toUpperCase()}`);\n    }\n\n    return r;\n  }\n\n  attributesToSQL(e, t) {\n    const n = {};\n\n    for (const r in e) {\n      const i = e[r];\n      n[i.field || r] = this.attributeToSQL(i, t);\n    }\n\n    return n;\n  }\n\n  _checkValidJsonStatement(e) {\n    if (typeof e != \"string\") return !1;\n    let t = 0,\n        n = 0,\n        r = 0,\n        i = !1,\n        a = !1;\n\n    for (; t < e.length;) {\n      const l = e.substr(t),\n            u = g.exec(l);\n\n      if (u) {\n        t += u[0].indexOf(\"(\"), i = !0;\n        continue;\n      }\n\n      const N = D.exec(l);\n\n      if (N) {\n        t += N[0].length, i = !0;\n        continue;\n      }\n\n      const E = q.exec(l);\n\n      if (E) {\n        const o = E[1];\n        if (o === \"(\") n++;else if (o === \")\") r++;else if (o === \";\") {\n          a = !0;\n          break;\n        }\n        t += E[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    if (i && (a || n !== r)) throw new Error(`Invalid json statement: ${e}`);\n    return i;\n  }\n\n  getForeignKeysQuery(e, t) {\n    const n = e.tableName || e;\n    return s.joinSQLFragments([\"SELECT\", d, `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${n}'`, `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${t}'`, \"AND REFERENCED_TABLE_NAME IS NOT NULL\", \";\"]);\n  }\n\n  getForeignKeyQuery(e, t) {\n    const n = e.schema ? R(e.schema) : \"\",\n          r = R(e.tableName || e),\n          i = R(t);\n    return s.joinSQLFragments([\"SELECT\", d, \"FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE\", \"WHERE (\", [`REFERENCED_TABLE_NAME = ${r}`, e.schema && `AND REFERENCED_TABLE_SCHEMA = ${n}`, `AND REFERENCED_COLUMN_NAME = ${i}`], \") OR (\", [`TABLE_NAME = ${r}`, e.schema && `AND TABLE_SCHEMA = ${n}`, `AND COLUMN_NAME = ${i}`, \"AND REFERENCED_TABLE_NAME IS NOT NULL\"], \")\"]);\n  }\n\n  dropForeignKeyQuery(e, t) {\n    return s.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"DROP FOREIGN KEY\", this.quoteIdentifier(t), \";\"]);\n  }\n\n}\n\nf(I, \"MySQLQueryGenerator\");\n\nfunction R(c) {\n  return s.addTicks(c, \"'\");\n}\n\nf(R, \"wrapSingleQuote\"), module.exports = I;","map":{"version":3,"sources":["../../../../lib/dialects/mysql/query-generator.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst util = require('util');\nconst Op = require('../../operators');\n\n\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\nconst FOREIGN_KEY_FIELDS = [\n  'CONSTRAINT_NAME as constraint_name',\n  'CONSTRAINT_NAME as constraintName',\n  'CONSTRAINT_SCHEMA as constraintSchema',\n  'CONSTRAINT_SCHEMA as constraintCatalog',\n  'TABLE_NAME as tableName',\n  'TABLE_SCHEMA as tableSchema',\n  'TABLE_SCHEMA as tableCatalog',\n  'COLUMN_NAME as columnName',\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\n  'REFERENCED_TABLE_NAME as referencedTableName',\n  'REFERENCED_COLUMN_NAME as referencedColumnName'\n].join(',');\n\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\n\nclass MySQLQueryGenerator extends AbstractQueryGenerator {\n  constructor(options) {\n    super(options);\n\n    this.OperatorMap = {\n      ...this.OperatorMap,\n      [Op.regexp]: 'REGEXP',\n      [Op.notRegexp]: 'NOT REGEXP'\n    };\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE DATABASE IF NOT EXISTS',\n      this.quoteIdentifier(databaseName),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\n  }\n\n  createSchema() {\n    return 'SHOW TABLES';\n  }\n\n  showSchemasQuery() {\n    return 'SHOW TABLES';\n  }\n\n  versionQuery() {\n    return 'SELECT VERSION() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = {\n      engine: 'InnoDB',\n      charset: null,\n      rowFormat: null,\n      ...options\n    };\n\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) continue;\n      const dataType = attributes[attr];\n      let match;\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n\n        if (dataType.includes('REFERENCES')) {\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n        }\n      } else if (dataType.includes('REFERENCES')) {\n        // MySQL doesn't support inline REFERENCES declarations: move to the end\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n        foreignKeys[attr] = match[2];\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'CREATE TABLE IF NOT EXISTS',\n      table,\n      `(${attributesClause})`,\n      `ENGINE=${options.engine}`,\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\n      options.collate && `COLLATE ${options.collate}`,\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\n      ';'\n    ]);\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = this.quoteTable(\n      this.addSchema({\n        tableName,\n        _schema: schema,\n        _schemaDelimiter: schemaDelimiter\n      })\n    );\n\n    return `SHOW FULL COLUMNS FROM ${table};`;\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\')';\n    }\n    return `${query};`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, {\n        context: 'addColumn',\n        tableName: table,\n        foreignKey: key\n      }),\n      ';'\n    ]);\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';'\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'CHANGE',\n      attrString.join(', '),\n      ';'\n    ]);\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        smth.type = 'char';\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = 'decimal';\n      } else if (/text/i.test(smth.type)) {\n        smth.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  _toJSONValue(value) {\n    // true/false are stored as strings in mysql\n    if (typeof value === 'boolean') {\n      return value.toString();\n    }\n    // null is stored as a string in mysql\n    if (value === null) {\n      return 'null';\n    }\n    return value;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    let limit = '';\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    if (options.limit) {\n      limit = ` LIMIT ${this.escape(options.limit)}`;\n    }\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n\n    return query + limit;\n  }\n\n  showIndexesQuery(tableName, options) {\n    return Utils.joinSQLFragments([\n      `SHOW INDEX FROM ${this.quoteTable(tableName)}`,\n      options && options.database && `FROM \\`${options.database}\\``\n    ]);\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    return Utils.joinSQLFragments([\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\n      'CONSTRAINT_NAME AS constraintName,',\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\n      'CONSTRAINT_TYPE AS constraintType,',\n      'TABLE_NAME AS tableName,',\n      'TABLE_SCHEMA AS tableSchema',\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\n      `WHERE table_name='${tableName}'`,\n      constraintName && `AND constraint_name = '${constraintName}'`,\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\n      ';'\n    ]);\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return Utils.joinSQLFragments([\n      'DROP INDEX',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName)\n    ]);\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' auto_increment';\n    }\n\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.comment) {\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\n    }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if (attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   * @private\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n      ';'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      FOREIGN_KEY_FIELDS,\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE (',\n      [\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`\n      ],\n      ') OR (',\n      [\n        `TABLE_NAME = ${quotedTableName}`,\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\n        `AND COLUMN_NAME = ${quotedColumnName}`,\n        'AND REFERENCED_TABLE_NAME IS NOT NULL'\n      ],\n      ')'\n    ]);\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP FOREIGN KEY',\n      this.quoteIdentifier(foreignKey),\n      ';'\n    ]);\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nmodule.exports = MySQLQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}