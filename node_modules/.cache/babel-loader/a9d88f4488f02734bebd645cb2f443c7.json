{"ast":null,"code":"\"use strict\";\n\nvar c = Object.defineProperty;\n\nvar o = (r, t) => c(r, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst u = require(\"./data-types\"),\n      {\n  logger: y\n} = require(\"./utils/logger\");\n\nfunction g(r, t, e, s) {\n  return r.reduce((n, i, p) => (p !== 0 && (n += \", \"), Array.isArray(i) ? n += `(${g(i, t, e, s)})` : n += f(i, t, e, s), n), \"\");\n}\n\no(g, \"arrayToList\"), exports.arrayToList = g;\n\nfunction f(r, t, e, s) {\n  let n = !1;\n  if (r == null) return \"NULL\";\n\n  switch (typeof r) {\n    case \"boolean\":\n      return e === \"sqlite\" || e === \"mssql\" ? +!!r : (!!r).toString();\n\n    case \"number\":\n      return r.toString();\n\n    case \"string\":\n      n = e === \"mssql\";\n      break;\n  }\n\n  if (r instanceof Date && (r = u[e].DATE.prototype.stringify(r, {\n    timezone: t\n  })), Buffer.isBuffer(r)) return u[e].BLOB ? u[e].BLOB.prototype.stringify(r) : u.BLOB.prototype.stringify(r);\n\n  if (Array.isArray(r)) {\n    const i = o(p => f(p, t, e, s), \"partialEscape\");\n    return e === \"postgres\" && !s ? u.ARRAY.prototype.stringify(r, {\n      escape: i\n    }) : g(r, t, e, s);\n  }\n\n  if (!r.replace) throw new Error(`Invalid value ${y.inspect(r)}`);\n  return e === \"postgres\" || e === \"sqlite\" || e === \"mssql\" ? (r = r.replace(/'/g, \"''\"), e === \"postgres\" && (r = r.replace(/\\0/g, \"\\\\0\"))) : r = r.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, i => {\n    switch (i) {\n      case \"\\0\":\n        return \"\\\\0\";\n\n      case `\n`:\n        return \"\\\\n\";\n\n      case \"\\r\":\n        return \"\\\\r\";\n\n      case \"\\b\":\n        return \"\\\\b\";\n\n      case \"\t\":\n        return \"\\\\t\";\n\n      case \"\u001a\":\n        return \"\\\\Z\";\n\n      default:\n        return `\\\\${i}`;\n    }\n  }), `${(n ? \"N'\" : \"'\") + r}'`;\n}\n\no(f, \"escape\"), exports.escape = f;\n\nfunction a(r, t, e, s) {\n  if (t = [].concat(t), typeof r != \"string\") throw new Error(`Invalid SQL string provided: ${r}`);\n  return r.replace(/\\?/g, n => t.length ? f(t.shift(), e, s, !0) : n);\n}\n\no(a, \"format\"), exports.format = a;\n\nfunction h(r, t, e, s) {\n  return r.replace(/:+(?!\\d)(\\w+)/g, (n, i) => {\n    if (s === \"postgres\" && n.slice(0, 2) === \"::\") return n;\n    if (t[i] !== void 0) return f(t[i], e, s, !0);\n    throw new Error(`Named parameter \"${n}\" has no value in the given object.`);\n  });\n}\n\no(h, \"formatNamedParameters\"), exports.formatNamedParameters = h;","map":{"version":3,"sources":["../../lib/sql-string.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"]},"metadata":{},"sourceType":"script"}