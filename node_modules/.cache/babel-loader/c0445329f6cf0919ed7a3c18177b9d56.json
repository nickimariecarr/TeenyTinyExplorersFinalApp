{"ast":null,"code":"\"use strict\";\n\nvar l = Object.defineProperty;\n\nvar n = (e, r) => l(e, \"name\", {\n  value: r,\n  configurable: !0\n});\n\nconst u = require(\"lodash\"),\n      {\n  logger: m\n} = require(\"./utils/logger\"),\n      f = m.debugContext(\"hooks\"),\n      s = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: [\"beforeUpdate\", \"beforeCreate\"]\n  },\n  afterSave: {\n    params: 2,\n    proxies: [\"afterUpdate\", \"afterCreate\"]\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: !0,\n    noModel: !0\n  },\n  afterDefine: {\n    params: 1,\n    sync: !0,\n    noModel: !0\n  },\n  beforeInit: {\n    params: 2,\n    sync: !0,\n    noModel: !0\n  },\n  afterInit: {\n    params: 1,\n    sync: !0,\n    noModel: !0\n  },\n  beforeAssociate: {\n    params: 2,\n    sync: !0\n  },\n  afterAssociate: {\n    params: 2,\n    sync: !0\n  },\n  beforeConnect: {\n    params: 1,\n    noModel: !0\n  },\n  afterConnect: {\n    params: 2,\n    noModel: !0\n  },\n  beforeDisconnect: {\n    params: 1,\n    noModel: !0\n  },\n  afterDisconnect: {\n    params: 1,\n    noModel: !0\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  },\n  beforeQuery: {\n    params: 2\n  },\n  afterQuery: {\n    params: 2\n  }\n};\n\nexports.hooks = s;\nconst c = n(e => s[e].proxies ? s[e].proxies.concat(e) : [e], \"getProxiedHooks\");\n\nfunction i(e, r) {\n  return (e.options.hooks || {})[r] || [];\n}\n\nn(i, \"getHooks\");\nconst p = {\n  _setupHooks(e) {\n    this.options.hooks = {}, u.map(e || {}, (r, t) => {\n      Array.isArray(r) || (r = [r]), r.forEach(a => this.addHook(t, a));\n    });\n  },\n\n  async runHooks(e) {\n    if (!e) throw new Error(\"runHooks requires at least 1 argument\");\n    let t;\n\n    for (var _len = arguments.length, r = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      r[_key - 1] = arguments[_key];\n    }\n\n    if (typeof e == \"string\" && (t = e, e = i(this, t), this.sequelize && (e = e.concat(i(this.sequelize, t)))), Array.isArray(e) || (e = [e]), s[t] && s[t].sync) {\n      for (let a of e) typeof a == \"object\" && (a = a.fn), f(`running hook(sync) ${t}`), a.apply(this, r);\n\n      return;\n    }\n\n    for (let a of e) typeof a == \"object\" && (a = a.fn), f(`running hook ${t}`), await a.apply(this, r);\n  },\n\n  addHook(e, r, t) {\n    return typeof r == \"function\" && (t = r, r = null), f(`adding hook ${e}`), e = c(e), e.forEach(a => {\n      const o = i(this, a);\n      o.push(r ? {\n        name: r,\n        fn: t\n      } : t), this.options.hooks[a] = o;\n    }), this;\n  },\n\n  removeHook(e, r) {\n    const t = typeof r == \"function\";\n    if (!this.hasHook(e)) return this;\n    f(`removing hook ${e}`), e = c(e);\n\n    for (const a of e) this.options.hooks[a] = this.options.hooks[a].filter(o => t && typeof o == \"function\" ? o !== r : !t && typeof o == \"object\" ? o.name !== r : !0);\n\n    return this;\n  },\n\n  hasHook(e) {\n    return this.options.hooks[e] && !!this.options.hooks[e].length;\n  }\n\n};\np.hasHooks = p.hasHook;\n\nfunction d(e) {\n  let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  u.mixin(e, p);\n\n  for (const t of Object.keys(s)) r && s[t].noModel || (e[t] = function (a, o) {\n    return this.addHook(t, a, o);\n  });\n}\n\nn(d, \"applyTo\"), exports.applyTo = d;","map":{"version":3,"sources":["../../lib/hooks.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  async runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    for (let hook of hooks) {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      await hook.apply(this, hookArgs);\n    }\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n *\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n *\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"]},"metadata":{},"sourceType":"script"}