{"ast":null,"code":"\"use strict\";\n\nvar R = Object.defineProperty,\n    p = Object.defineProperties;\nvar O = Object.getOwnPropertyDescriptors;\nvar q = Object.getOwnPropertySymbols;\nvar b = Object.prototype.hasOwnProperty,\n    N = Object.prototype.propertyIsEnumerable;\n\nvar A = (E, e, i) => e in E ? R(E, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: i\n}) : E[e] = i,\n    L = (E, e) => {\n  for (var i in e || (e = {})) b.call(e, i) && A(E, i, e[i]);\n\n  if (q) for (var i of q(e)) N.call(e, i) && A(E, i, e[i]);\n  return E;\n},\n    y = (E, e) => p(E, O(e));\n\nvar S = (E, e) => R(E, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst d = require(\"../../utils\"),\n      I = require(\"../../transaction\"),\n      $ = require(\"lodash\"),\n      M = require(\"../mysql/query-generator\"),\n      C = require(\"../abstract/query-generator\");\n\nclass m extends M {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return \"SELECT sqlite_version() as `version`\";\n  }\n\n  createTableQuery(e, i, r) {\n    r = r || {};\n    const t = [],\n          s = Object.values(i).filter(u => u.includes(\"PRIMARY KEY\")).length > 1,\n          n = [];\n\n    for (const u in i) if (Object.prototype.hasOwnProperty.call(i, u)) {\n      const a = i[u],\n            f = a.includes(\"AUTOINCREMENT\");\n      let h = a;\n      a.includes(\"PRIMARY KEY\") && (a.includes(\"INT\") && (h = f ? \"INTEGER PRIMARY KEY AUTOINCREMENT\" : \"INTEGER PRIMARY KEY\", a.includes(\" REFERENCES\") && (h += a.substr(a.indexOf(\" REFERENCES\")))), s && (t.push(u), a.includes(\"NOT NULL\") ? h = a.replace(\" PRIMARY KEY\", \"\") : h = a.replace(\"PRIMARY KEY\", \"NOT NULL\"))), n.push(`${this.quoteIdentifier(u)} ${h}`);\n    }\n\n    const o = this.quoteTable(e);\n    let l = n.join(\", \");\n    const T = t.map(u => this.quoteIdentifier(u)).join(\", \");\n    r.uniqueKeys && $.each(r.uniqueKeys, u => {\n      u.customIndex && (l += `, UNIQUE (${u.fields.map(a => this.quoteIdentifier(a)).join(\", \")})`);\n    }), T.length > 0 && (l += `, PRIMARY KEY (${T})`);\n    const c = `CREATE TABLE IF NOT EXISTS ${o} (${l});`;\n    return this.replaceBooleanDefaults(c);\n  }\n\n  booleanValue(e) {\n    return e ? 1 : 0;\n  }\n\n  _checkValidJsonStatement(e) {\n    if (typeof e != \"string\") return !1;\n    const i = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i,\n          r = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let t = 0,\n        s = 0,\n        n = 0,\n        o = !1,\n        l = !1;\n\n    for (; t < e.length;) {\n      const T = e.substr(t),\n            c = i.exec(T);\n\n      if (c) {\n        t += c[0].indexOf(\"(\"), o = !0;\n        continue;\n      }\n\n      const u = r.exec(T);\n\n      if (u) {\n        const a = u[1];\n        if (a === \"(\") s++;else if (a === \")\") n++;else if (a === \";\") {\n          l = !0;\n          break;\n        }\n        t += u[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    if (l |= s !== n, o && l) throw new Error(`Invalid json statement: ${e}`);\n    return o;\n  }\n\n  _toJSONValue(e) {\n    return e instanceof Date ? e.toISOString() : Array.isArray(e) && e[0] instanceof Date ? e.map(i => i.toISOString()) : e;\n  }\n\n  handleSequelizeMethod(e, i, r, t, s) {\n    return e instanceof d.Json ? super.handleSequelizeMethod(e, i, r, t, s) : (e instanceof d.Cast && /timestamp/i.test(e.type) && (e.type = \"datetime\"), C.prototype.handleSequelizeMethod.call(this, e, i, r, t, s));\n  }\n\n  addColumnQuery(e, i, r) {\n    const t = {};\n    t[i] = r;\n    const s = this.attributesToSQL(t, {\n      context: \"addColumn\"\n    }),\n          n = `${this.quoteIdentifier(i)} ${s[i]}`,\n          o = `ALTER TABLE ${this.quoteTable(e)} ADD ${n};`;\n    return this.replaceBooleanDefaults(o);\n  }\n\n  showTablesQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  updateQuery(e, i, r, t, s) {\n    t = t || {}, $.defaults(t, this.options), i = d.removeNullValuesFromHash(i, t.omitNull, t);\n    const n = {},\n          o = [],\n          l = [],\n          T = t.bindParam || this.bindParam(l);\n    s && $.each(s, (a, f) => {\n      n[f] = a, a.field && (n[a.field] = a);\n    });\n\n    for (const a in i) {\n      const f = i[a];\n      f instanceof d.SequelizeMethod || t.bindParam === !1 ? o.push(`${this.quoteIdentifier(a)}=${this.escape(f, n && n[a] || void 0, {\n        context: \"UPDATE\"\n      })}`) : o.push(`${this.quoteIdentifier(a)}=${this.format(f, n && n[a] || void 0, {\n        context: \"UPDATE\"\n      }, T)}`);\n    }\n\n    let c;\n    const u = y(L({}, t), {\n      bindParam: T\n    });\n    return t.limit ? c = `UPDATE ${this.quoteTable(e)} SET ${o.join(\",\")} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(e)} ${this.whereQuery(r, u)} LIMIT ${this.escape(t.limit)})` : c = `UPDATE ${this.quoteTable(e)} SET ${o.join(\",\")} ${this.whereQuery(r, u)}`, {\n      query: c,\n      bind: l\n    };\n  }\n\n  truncateTableQuery(e) {\n    let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`DELETE FROM ${this.quoteTable(e)}`, i.restartIdentity ? `; DELETE FROM ${this.quoteTable(\"sqlite_sequence\")} WHERE ${this.quoteIdentifier(\"name\")} = ${d.addTicks(d.removeTicks(this.quoteTable(e), \"`\"), \"'\")};` : \"\"].join(\"\");\n  }\n\n  deleteQuery(e, i) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let t = arguments.length > 3 ? arguments[3] : undefined;\n    $.defaults(r, this.options);\n    let s = this.getWhereConditions(i, null, t, r);\n    return s && (s = `WHERE ${s}`), r.limit && (s = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(e)} ${s} LIMIT ${this.escape(r.limit)})`), `DELETE FROM ${this.quoteTable(e)} ${s}`;\n  }\n\n  attributesToSQL(e) {\n    const i = {};\n\n    for (const r in e) {\n      const t = e[r],\n            s = t.field || r;\n\n      if ($.isObject(t)) {\n        let n = t.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(t, \"allowNull\") && !t.allowNull && (n += \" NOT NULL\"), d.defaultValueSchemable(t.defaultValue) && (n += ` DEFAULT ${this.escape(t.defaultValue, t)}`), t.unique === !0 && (n += \" UNIQUE\"), t.primaryKey && (n += \" PRIMARY KEY\", t.autoIncrement && (n += \" AUTOINCREMENT\")), t.references) {\n          const o = this.quoteTable(t.references.model);\n          let l;\n          t.references.key ? l = this.quoteIdentifier(t.references.key) : l = this.quoteIdentifier(\"id\"), n += ` REFERENCES ${o} (${l})`, t.onDelete && (n += ` ON DELETE ${t.onDelete.toUpperCase()}`), t.onUpdate && (n += ` ON UPDATE ${t.onUpdate.toUpperCase()}`);\n        }\n\n        i[s] = n;\n      } else i[s] = t;\n    }\n\n    return i;\n  }\n\n  showIndexesQuery(e) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(e)})`;\n  }\n\n  showConstraintsQuery(e, i) {\n    let r = `SELECT sql FROM sqlite_master WHERE tbl_name='${e}'`;\n    return i && (r += ` AND sql LIKE '%${i}%'`), `${r};`;\n  }\n\n  removeIndexQuery(e, i) {\n    let r = i;\n    return typeof r != \"string\" && (r = d.underscore(`${e}_${i.join(\"_\")}`)), `DROP INDEX IF EXISTS ${this.quoteIdentifier(r)}`;\n  }\n\n  describeTableQuery(e, i, r) {\n    const t = {\n      _schema: i,\n      _schemaDelimiter: r,\n      tableName: e\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(t))});`;\n  }\n\n  describeCreateTableQuery(e) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${e}';`;\n  }\n\n  removeColumnQuery(e, i) {\n    i = this.attributesToSQL(i);\n    let r;\n    typeof e == \"object\" ? r = {\n      tableName: `${e.tableName}_backup`,\n      schema: e.schema\n    } : r = `${e}_backup`;\n    const t = this.quoteTable(e),\n          s = this.quoteTable(r),\n          n = Object.keys(i).map(o => this.quoteIdentifier(o)).join(\", \");\n    return `${this.createTableQuery(r, i)}INSERT INTO ${s} SELECT ${n} FROM ${t};DROP TABLE ${t};${this.createTableQuery(e, i)}INSERT INTO ${t} SELECT ${n} FROM ${s};DROP TABLE ${s};`;\n  }\n\n  _alterConstraintQuery(e, i, r) {\n    let t;\n    i = this.attributesToSQL(i), typeof e == \"object\" ? t = {\n      tableName: `${e.tableName}_backup`,\n      schema: e.schema\n    } : t = `${e}_backup`;\n    const s = this.quoteTable(e),\n          n = this.quoteTable(t),\n          o = Object.keys(i).map(l => this.quoteIdentifier(l)).join(\", \");\n    return `${r.replace(`CREATE TABLE ${s}`, `CREATE TABLE ${n}`).replace(`CREATE TABLE ${s.replace(/`/g, '\"')}`, `CREATE TABLE ${n}`)}INSERT INTO ${n} SELECT ${o} FROM ${s};DROP TABLE ${s};ALTER TABLE ${n} RENAME TO ${s};`;\n  }\n\n  renameColumnQuery(e, i, r, t) {\n    let s;\n    t = this.attributesToSQL(t), typeof e == \"object\" ? s = {\n      tableName: `${e.tableName}_backup`,\n      schema: e.schema\n    } : s = `${e}_backup`;\n    const n = this.quoteTable(e),\n          o = this.quoteTable(s),\n          l = Object.keys(t).map(c => r === c ? `${this.quoteIdentifier(i)} AS ${this.quoteIdentifier(c)}` : this.quoteIdentifier(c)).join(\", \"),\n          T = Object.keys(t).map(c => this.quoteIdentifier(c)).join(\", \");\n    return `${this.createTableQuery(s, t)}INSERT INTO ${o} SELECT ${l} FROM ${n};DROP TABLE ${n};${this.createTableQuery(e, t)}INSERT INTO ${n} SELECT ${T} FROM ${o};DROP TABLE ${o};`;\n  }\n\n  startTransactionQuery(e) {\n    return e.parent ? `SAVEPOINT ${this.quoteIdentifier(e.name)};` : `BEGIN ${e.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(e) {\n    switch (e) {\n      case I.ISOLATION_LEVELS.REPEATABLE_READ:\n        return \"-- SQLite is not able to choose the isolation level REPEATABLE READ.\";\n\n      case I.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return \"PRAGMA read_uncommitted = ON;\";\n\n      case I.ISOLATION_LEVELS.READ_COMMITTED:\n        return \"PRAGMA read_uncommitted = OFF;\";\n\n      case I.ISOLATION_LEVELS.SERIALIZABLE:\n        return \"-- SQLite's default isolation level is SERIALIZABLE. Nothing to do.\";\n\n      default:\n        throw new Error(`Unknown isolation level: ${e}`);\n    }\n  }\n\n  replaceBooleanDefaults(e) {\n    return e.replace(/DEFAULT '?false'?/g, \"DEFAULT 0\").replace(/DEFAULT '?true'?/g, \"DEFAULT 1\");\n  }\n\n  getForeignKeysQuery(e) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(e))})`;\n  }\n\n}\n\nS(m, \"SQLiteQueryGenerator\"), module.exports = m;","map":{"version":3,"sources":["../../../../lib/dialects/sqlite/query-generator.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = Object.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = { ...options, bindParam };\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${this.quoteTable(this.addSchema(tableName))})`;\n  }\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}