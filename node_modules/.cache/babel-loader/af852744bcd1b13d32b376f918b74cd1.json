{"ast":null,"code":"\"use strict\";\n\nvar Z = Object.defineProperty;\nvar F = Object.getOwnPropertySymbols;\nvar oe = Object.prototype.hasOwnProperty,\n    le = Object.prototype.propertyIsEnumerable;\n\nvar ee = (O, e, t) => e in O ? Z(O, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : O[e] = t,\n    te = (O, e) => {\n  for (var t in e || (e = {})) oe.call(e, t) && ee(O, t, e[t]);\n\n  if (F) for (var t of F(e)) le.call(e, t) && ee(O, t, e[t]);\n  return O;\n};\n\nvar w = (O, e) => Z(O, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst N = require(\"lodash\"),\n      ue = require(\"../../sql-string\"),\n      m = require(\"../../query-types\"),\n      ae = require(\"dottie\"),\n      fe = require(\"../../utils/deprecations\"),\n      he = require(\"uuid\").v4;\n\nclass B {\n  constructor(e, t, r) {\n    this.uuid = he(), this.connection = e, this.instance = r.instance, this.model = r.model, this.sequelize = t, this.options = te({\n      plain: !1,\n      raw: !1,\n      logging: console.log\n    }, r), this.checkLoggingOption();\n  }\n\n  static formatBindParameters(e, t, r, i, s) {\n    if (!t) return [e, []];\n    if (s = s || {}, typeof i != \"function\" && (s = i || {}, i = void 0), !i) s.skipValueReplace ? i = w((p, l, c) => {\n      if (c[l] !== void 0) return p;\n    }, \"replacementFunc\") : i = w((p, l, c, q, d) => {\n      if (c[l] !== void 0) return ue.escape(c[l], q, d);\n    }, \"replacementFunc\");else if (s.skipValueReplace) {\n      const p = i;\n      i = w((l, c, q, d, S, T) => {\n        if (p(l, c, q, d, S, T) !== void 0) return l;\n      }, \"replacementFunc\");\n    }\n    const n = null,\n          a = Array.isArray(t);\n    return e = e.replace(/\\B\\$(\\$|\\w+)/g, (p, l) => {\n      if (l === \"$\") return s.skipUnescape ? p : l;\n      let c;\n      if (a ? l.match(/^[1-9]\\d*$/) && (l = l - 1, c = i(p, l, t, n, r, s)) : l.match(/^\\d*$/) || (c = i(p, l, t, n, r, s)), c === void 0) throw new Error(`Named bind parameter \"${p}\" has no value in the given object.`);\n      return c;\n    }), [e, []];\n  }\n\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n\n  checkLoggingOption() {\n    this.options.logging === !0 && (fe.noTrueLogging(), this.options.logging = console.log);\n  }\n\n  getInsertIdField() {\n    return \"insertId\";\n  }\n\n  getUniqueConstraintErrorMessage(e) {\n    let t = e ? `${e} must be unique` : \"Must be unique\";\n    if (e && this.model) for (const r of Object.keys(this.model.uniqueKeys)) this.model.uniqueKeys[r].fields.includes(e.replace(/\"/g, \"\")) && this.model.uniqueKeys[r].msg && (t = this.model.uniqueKeys[r].msg);\n    return t;\n  }\n\n  isRawQuery() {\n    return this.options.type === m.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === m.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === m.UPSERT;\n  }\n\n  isInsertQuery(e, t) {\n    let r = !0;\n    return this.options.type === m.INSERT ? !0 : (r = r && this.sql.toLowerCase().startsWith(\"insert into\"), r = r && (!e || Object.prototype.hasOwnProperty.call(e, this.getInsertIdField())), r = r && (!t || Object.prototype.hasOwnProperty.call(t, this.getInsertIdField())), r);\n  }\n\n  handleInsertQuery(e, t) {\n    if (this.instance) {\n      const r = this.model.autoIncrementAttribute;\n      let i = null;\n      i = i || e && e[this.getInsertIdField()], i = i || t && t[this.getInsertIdField()], this.instance[r] = i;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === m.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(e) {\n    return N.flatten(e.map(t => Object.values(t)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === m.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === m.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === m.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === m.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === m.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === m.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === m.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === m.UPDATE;\n  }\n\n  handleSelectQuery(e) {\n    let t = null;\n\n    if (this.options.fieldMap) {\n      const r = this.options.fieldMap;\n      e = e.map(i => N.reduce(r, (s, n, a) => (s[a] !== void 0 && n !== a && (s[n] = s[a], delete s[a]), s), i));\n    }\n\n    return this.options.raw ? t = e.map(r => {\n      let i = {};\n\n      for (const s in r) Object.prototype.hasOwnProperty.call(r, s) && (i[s] = r[s]);\n\n      return this.options.nest && (i = ae.transform(i)), i;\n    }) : this.options.hasJoin === !0 ? (e = B._groupJoinData(e, {\n      model: this.model,\n      includeMap: this.options.includeMap,\n      includeNames: this.options.includeNames\n    }, {\n      checkExisting: this.options.hasMultiAssociation\n    }), t = this.model.bulkBuild(e, {\n      isNewRecord: !1,\n      include: this.options.include,\n      includeNames: this.options.includeNames,\n      includeMap: this.options.includeMap,\n      includeValidated: !0,\n      attributes: this.options.originalAttributes || this.options.attributes,\n      raw: !0\n    })) : t = this.model.bulkBuild(e, {\n      isNewRecord: !1,\n      raw: !0,\n      attributes: this.options.originalAttributes || this.options.attributes\n    }), this.options.plain && (t = t.length === 0 ? null : t[0]), t;\n  }\n\n  isShowOrDescribeQuery() {\n    let e = !1;\n    return e = e || this.sql.toLowerCase().startsWith(\"show\"), e = e || this.sql.toLowerCase().startsWith(\"describe\"), e;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith(\"call\");\n  }\n\n  _logQuery(e, t, r) {\n    const {\n      connection: i,\n      options: s\n    } = this,\n          n = this.sequelize.options.benchmark || s.benchmark,\n          a = this.sequelize.options.logQueryParameters || s.logQueryParameters,\n          p = Date.now();\n    let l = \"\";\n\n    if (a && r) {\n      const d = e.endsWith(\";\") ? \"\" : \";\";\n      let S;\n      Array.isArray(r) ? S = r.map(T => JSON.stringify(T)).join(\", \") : S = JSON.stringify(r), l = `${d} ${S}`;\n    }\n\n    const c = `(${i.uuid || \"default\"}): ${e}${l}`,\n          q = `Executing ${c}`;\n    return t(q), n || this.sequelize.log(`Executing ${c}`, s), () => {\n      const d = `Executed ${c}`;\n      t(d), n && this.sequelize.log(d, Date.now() - p, s);\n    };\n  }\n\n  static _groupJoinData(e, t, r) {\n    if (!e.length) return [];\n    let i, s, n, a, p, l;\n    const c = e.length;\n    let q, d, S, T, D, P, U, v;\n    const C = r.checkExisting;\n    let u, b, E;\n    const k = C ? [] : new Array(c),\n          $ = {},\n          g = {};\n    let Q, J, ie, K, x, I, f, L;\n    const se = w(o => {\n      Object.prototype.hasOwnProperty.call(I.includeMap, o) && (g[d] = I = I.includeMap[o], L ? L = `${L}.${o}` : L = o, g[L] = I);\n    }, \"buildIncludeMap\"),\n          _ = {},\n          G = w((o, h) => (Object.prototype.hasOwnProperty.call(h, o) || (h[o] = o.substr(0, o.lastIndexOf(\".\"))), h[o]), \"keyPrefixString\"),\n          V = {},\n          re = w(o => {\n      if (!Object.prototype.hasOwnProperty.call(V, o)) {\n        const h = o.lastIndexOf(\".\");\n        V[o] = o.substr(h === -1 ? 0 : h + 1);\n      }\n\n      return V[o];\n    }, \"removeKeyPrefix\"),\n          j = {},\n          X = w(o => {\n      if (!Object.prototype.hasOwnProperty.call(j, o)) {\n        const h = G(o, _);\n        Object.prototype.hasOwnProperty.call(j, h) || (j[h] = h ? h.split(\".\") : []), j[o] = j[h];\n      }\n\n      return j[o];\n    }, \"keyPrefix\"),\n          H = {},\n          Y = w(o => {\n      if (!Object.prototype.hasOwnProperty.call(H, o)) {\n        const h = X(o),\n              W = h.length;\n        H[o] = W ? h[W - 1] : \"\";\n      }\n\n      return H[o];\n    }, \"lastKeyPrefix\"),\n          z = w(o => {\n      let h = N.chain(o.uniqueKeys);\n      return h = h.result(`${h.findKey()}.fields`).map(W => N.findKey(o.attributes, ne => ne.field === W)).value(), h;\n    }, \"getUniqueKeyAttributes\"),\n          R = w(o => o instanceof Buffer ? o.toString(\"hex\") : o, \"stringify\");\n    let M, A, y;\n\n    for (p = 0; p < c; p++) {\n      if (l = e[p], p === 0 && (q = Object.keys(l), T = q.length), C) {\n        if (v = !1, a = t.model.primaryKeyAttributes.length, E = \"\", a === 1) E = R(l[t.model.primaryKeyAttributes[0]]);else if (a > 1) for (n = 0; n < a; n++) E += R(l[t.model.primaryKeyAttributes[n]]);else if (!N.isEmpty(t.model.uniqueKeys)) for (A = z(t.model), n = 0; n < A.length; n++) E += l[A[n]];\n      }\n\n      for (U = P = {}, K = void 0, S = 0; S < T; S++) {\n        if (d = q[S], J = G(d, _), Q = X(d), p === 0 && !Object.prototype.hasOwnProperty.call(g, d) && (Q.length ? (I = t, L = void 0, Q.forEach(se)) : g[d] = g[\"\"] = t), K !== void 0 && K !== Q) {\n          if (C) {\n            if (s = K.length, f = null, b = null, s) for (i = 0; i < s; i++) {\n              if (y = f ? `${f}.${K[i]}` : K[i], M = g[y].model.primaryKeyAttributes, a = M.length, u = y, a === 1) u += R(l[`${y}.${M[0]}`]);else if (a > 1) for (n = 0; n < a; n++) u += R(l[`${y}.${M[n]}`]);else if (!N.isEmpty(g[y].model.uniqueKeys)) for (A = z(g[y].model), n = 0; n < A.length; n++) u += l[`${y}.${A[n]}`];\n              b || (b = E), u = b + u, f = y, i < s - 1 && (b = u);\n            } else u = E;\n            u === E ? $[u] ? v = !0 : $[u] = P : $[u] || (f = $[b], x = Y(D), g[D].association.isSingleAssociation ? f && (f[x] = $[u] = P) : (f[x] || (f[x] = []), f[x].push($[u] = P))), P = {};\n          } else if (I = U, s = Q.length, s) for (i = 0; i < s; i++) i === s - 1 && (P = I[Q[i]] = {}), I = I[Q[i]] || {};\n        }\n\n        P[re(d)] = l[d], D = d, K = Q, ie = J;\n      }\n\n      if (C) {\n        if (s = K.length, f = null, b = null, s) for (i = 0; i < s; i++) {\n          if (y = f ? `${f}.${K[i]}` : K[i], M = g[y].model.primaryKeyAttributes, a = M.length, u = y, a === 1) u += R(l[`${y}.${M[0]}`]);else if (a > 0) for (n = 0; n < a; n++) u += R(l[`${y}.${M[n]}`]);else if (!N.isEmpty(g[y].model.uniqueKeys)) for (A = z(g[y].model), n = 0; n < A.length; n++) u += l[`${y}.${A[n]}`];\n          b || (b = E), u = b + u, f = y, i < s - 1 && (b = u);\n        } else u = E;\n        u === E ? $[u] ? v = !0 : $[u] = P : $[u] || (f = $[b], x = Y(D), g[D].association.isSingleAssociation ? f && (f[x] = $[u] = P) : (f[x] || (f[x] = []), f[x].push($[u] = P))), v || k.push(U);\n      } else k[p] = U;\n    }\n\n    return k;\n  }\n\n}\n\nw(B, \"AbstractQuery\"), module.exports = B, module.exports.AbstractQuery = B, module.exports.default = B;","map":{"version":3,"sources":["../../../../lib/dialects/abstract/query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>JSON.stringify(p)).join(', ');\n      } else {\n        paramStr = JSON.stringify(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"]},"metadata":{},"sourceType":"script"}