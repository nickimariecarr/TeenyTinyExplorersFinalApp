{"ast":null,"code":"\"use strict\";\n\nvar f = Object.defineProperty;\n\nvar a = (o, s) => f(o, \"name\", {\n  value: s,\n  configurable: !0\n});\n\nconst r = require(\"lodash\"),\n      k = require(\"./has-one\"),\n      c = require(\"./has-many\"),\n      u = require(\"./belongs-to-many\"),\n      m = require(\"./belongs-to\");\n\nfunction h(o, s) {\n  return o && o.prototype && o.prototype instanceof s.Sequelize.Model;\n}\n\na(h, \"isModel\");\nconst n = {\n  hasMany(o) {\n    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!h(o, this.sequelize)) throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    const e = this;\n    s.hooks = s.hooks === void 0 ? !1 : Boolean(s.hooks), s.useHooks = s.hooks, Object.assign(s, r.omit(e.options, [\"hooks\"])), s.useHooks && this.runHooks(\"beforeAssociate\", {\n      source: e,\n      target: o,\n      type: c\n    }, s);\n    const i = new c(e, o, s);\n    return e.associations[i.associationAccessor] = i, i._injectAttributes(), i.mixin(e.prototype), s.useHooks && this.runHooks(\"afterAssociate\", {\n      source: e,\n      target: o,\n      type: c,\n      association: i\n    }, s), i;\n  },\n\n  belongsToMany(o) {\n    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!h(o, this.sequelize)) throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    const e = this;\n    s.hooks = s.hooks === void 0 ? !1 : Boolean(s.hooks), s.useHooks = s.hooks, s.timestamps = s.timestamps === void 0 ? this.sequelize.options.timestamps : s.timestamps, Object.assign(s, r.omit(e.options, [\"hooks\", \"timestamps\", \"scopes\", \"defaultScope\"])), s.useHooks && this.runHooks(\"beforeAssociate\", {\n      source: e,\n      target: o,\n      type: u\n    }, s);\n    const i = new u(e, o, s);\n    return e.associations[i.associationAccessor] = i, i._injectAttributes(), i.mixin(e.prototype), s.useHooks && this.runHooks(\"afterAssociate\", {\n      source: e,\n      target: o,\n      type: u,\n      association: i\n    }, s), i;\n  },\n\n  getAssociations(o) {\n    return Object.values(this.associations).filter(s => s.target.name === o.name);\n  },\n\n  getAssociationForAlias(o, s) {\n    return this.getAssociations(o).find(e => e.verifyAssociationAlias(s)) || null;\n  }\n\n};\n\nfunction l(o) {\n  return function (s) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const i = this;\n    if (!h(s, i.sequelize)) throw new Error(`${i.name}.${r.lowerFirst(o.name)} called with something that's not a subclass of Sequelize.Model`);\n    e.hooks = e.hooks === void 0 ? !1 : Boolean(e.hooks), e.useHooks = e.hooks, e.useHooks && i.runHooks(\"beforeAssociate\", {\n      source: i,\n      target: s,\n      type: o\n    }, e);\n    const t = new o(i, s, Object.assign(e, i.options));\n    return i.associations[t.associationAccessor] = t, t._injectAttributes(), t.mixin(i.prototype), e.useHooks && i.runHooks(\"afterAssociate\", {\n      source: i,\n      target: s,\n      type: o,\n      association: t\n    }, e), t;\n  };\n}\n\na(l, \"singleLinked\"), n.hasOne = l(k), n.belongsTo = l(m), module.exports = n, module.exports.Mixin = n, module.exports.default = n;","map":{"version":3,"sources":["../../../lib/associations/mixin.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;AAAA,MACM,CAAA,GAAS,OAAA,CAAQ,WAAR,CADf;AAAA,MAEM,CAAA,GAAU,OAAA,CAAQ,YAAR,CAFhB;AAAA,MAGM,CAAA,GAAgB,OAAA,CAAQ,mBAAR,CAHtB;AAAA,MAIM,CAAA,GAAY,OAAA,CAAQ,cAAR,CAJlB;;AAMA,SAAA,CAAA,CAAiB,CAAjB,EAAwB,CAAxB,EAAmC;AACjC,SAAO,CAAA,IACF,CAAA,CAAM,SADJ,IAEF,CAAA,CAAM,SAAN,YAA2B,CAAA,CAAU,SAAV,CAAoB,KAFpD;AADO;;AAAA,CAAA,CAAA,CAAA,EAAA,SAAA,CAAA;AAMT,MAAM,CAAA,GAAQ;AACZ,EAAA,OAAA,CAAQ,CAAR,EAA8B;AAAA,QAAd,CAAc,uEAAJ,EAAI;AAC5B,QAAI,CAAC,CAAA,CAAQ,CAAR,EAAgB,KAAK,SAArB,CAAL,EACE,MAAM,IAAI,KAAJ,CAAU,GAAG,KAAK,IAAA,yEAAlB,CAAN;AAGF,UAAM,CAAA,GAAS,IAAf;AAGA,IAAA,CAAA,CAAQ,KAAR,GAAgB,CAAA,CAAQ,KAAR,KAAkB,KAAA,CAAlB,GAA8B,CAAA,CAA9B,GAAsC,OAAA,CAAQ,CAAA,CAAQ,KAAhB,CAAtD,EACA,CAAA,CAAQ,QAAR,GAAmB,CAAA,CAAQ,KAD3B,EAGA,MAAA,CAAO,MAAP,CAAc,CAAd,EAAuB,CAAA,CAAE,IAAF,CAAO,CAAA,CAAO,OAAd,EAAuB,CAAC,OAAD,CAAvB,CAAvB,CAHA,EAKI,CAAA,CAAQ,QAAR,IACF,KAAK,QAAL,CAAc,iBAAd,EAAiC;AAAE,MAAA,MAAA,EAAA,CAAF;AAAU,MAAA,MAAA,EAAA,CAAV;AAAkB,MAAA,IAAA,EAAM;AAAxB,KAAjC,EAAoE,CAApE,CANF;AAUA,UAAM,CAAA,GAAc,IAAI,CAAJ,CAAY,CAAZ,EAAoB,CAApB,EAA4B,CAA5B,CAApB;AACA,WAAA,CAAA,CAAO,YAAP,CAAoB,CAAA,CAAY,mBAAhC,IAAuD,CAAvD,EAEA,CAAA,CAAY,iBAAZ,EAFA,EAGA,CAAA,CAAY,KAAZ,CAAkB,CAAA,CAAO,SAAzB,CAHA,EAKI,CAAA,CAAQ,QAAR,IACF,KAAK,QAAL,CAAc,gBAAd,EAAgC;AAAE,MAAA,MAAA,EAAA,CAAF;AAAU,MAAA,MAAA,EAAA,CAAV;AAAkB,MAAA,IAAA,EAAM,CAAxB;AAAiC,MAAA,WAAA,EAAA;AAAjC,KAAhC,EAAgF,CAAhF,CANF,EASO,CATP;AASO,GA7BG;;AAgCZ,EAAA,aAAA,CAAc,CAAd,EAAoC;AAAA,QAAd,CAAc,uEAAJ,EAAI;AAClC,QAAI,CAAC,CAAA,CAAQ,CAAR,EAAgB,KAAK,SAArB,CAAL,EACE,MAAM,IAAI,KAAJ,CAAU,GAAG,KAAK,IAAA,+EAAlB,CAAN;AAGF,UAAM,CAAA,GAAS,IAAf;AAGA,IAAA,CAAA,CAAQ,KAAR,GAAgB,CAAA,CAAQ,KAAR,KAAkB,KAAA,CAAlB,GAA8B,CAAA,CAA9B,GAAsC,OAAA,CAAQ,CAAA,CAAQ,KAAhB,CAAtD,EACA,CAAA,CAAQ,QAAR,GAAmB,CAAA,CAAQ,KAD3B,EAEA,CAAA,CAAQ,UAAR,GAAqB,CAAA,CAAQ,UAAR,KAAuB,KAAA,CAAvB,GAAmC,KAAK,SAAL,CAAe,OAAf,CAAuB,UAA1D,GAAuE,CAAA,CAAQ,UAFpG,EAGA,MAAA,CAAO,MAAP,CAAc,CAAd,EAAuB,CAAA,CAAE,IAAF,CAAO,CAAA,CAAO,OAAd,EAAuB,CAAC,OAAD,EAAU,YAAV,EAAwB,QAAxB,EAAkC,cAAlC,CAAvB,CAAvB,CAHA,EAKI,CAAA,CAAQ,QAAR,IACF,KAAK,QAAL,CAAc,iBAAd,EAAiC;AAAE,MAAA,MAAA,EAAA,CAAF;AAAU,MAAA,MAAA,EAAA,CAAV;AAAkB,MAAA,IAAA,EAAM;AAAxB,KAAjC,EAA0E,CAA1E,CANF;AASA,UAAM,CAAA,GAAc,IAAI,CAAJ,CAAkB,CAAlB,EAA0B,CAA1B,EAAkC,CAAlC,CAApB;AACA,WAAA,CAAA,CAAO,YAAP,CAAoB,CAAA,CAAY,mBAAhC,IAAuD,CAAvD,EAEA,CAAA,CAAY,iBAAZ,EAFA,EAGA,CAAA,CAAY,KAAZ,CAAkB,CAAA,CAAO,SAAzB,CAHA,EAKI,CAAA,CAAQ,QAAR,IACF,KAAK,QAAL,CAAc,gBAAd,EAAgC;AAAE,MAAA,MAAA,EAAA,CAAF;AAAU,MAAA,MAAA,EAAA,CAAV;AAAkB,MAAA,IAAA,EAAM,CAAxB;AAAuC,MAAA,WAAA,EAAA;AAAvC,KAAhC,EAAsF,CAAtF,CANF,EASO,CATP;AASO,GA3DG;;AA8DZ,EAAA,eAAA,CAAgB,CAAhB,EAAwB;AACtB,WAAO,MAAA,CAAO,MAAP,CAAc,KAAK,YAAnB,EAAiC,MAAjC,CAAwC,CAAA,IAAe,CAAA,CAAY,MAAZ,CAAmB,IAAnB,KAA4B,CAAA,CAAO,IAA1F,CAAP;AAAiG,GA/DvF;;AAkEZ,EAAA,sBAAA,CAAuB,CAAvB,EAA+B,CAA/B,EAAsC;AAEpC,WAAO,KAAK,eAAL,CAAqB,CAArB,EAA6B,IAA7B,CAAkC,CAAA,IAAe,CAAA,CAAY,sBAAZ,CAAmC,CAAnC,CAAjD,KAA+F,IAAtG;AAAsG;;AApE5F,CAAd;;AAyEA,SAAA,CAAA,CAAsB,CAAtB,EAA4B;AAC1B,SAAO,UAAS,CAAT,EAA+B;AAAA,QAAd,CAAc,uEAAJ,EAAI;AAEpC,UAAM,CAAA,GAAS,IAAf;AACA,QAAI,CAAC,CAAA,CAAQ,CAAR,EAAgB,CAAA,CAAO,SAAvB,CAAL,EACE,MAAM,IAAI,KAAJ,CAAU,GAAG,CAAA,CAAO,IAAA,IAAQ,CAAA,CAAE,UAAF,CAAa,CAAA,CAAK,IAAlB,CAAkB,iEAA9C,CAAN;AAKF,IAAA,CAAA,CAAQ,KAAR,GAAgB,CAAA,CAAQ,KAAR,KAAkB,KAAA,CAAlB,GAA8B,CAAA,CAA9B,GAAsC,OAAA,CAAQ,CAAA,CAAQ,KAAhB,CAAtD,EACA,CAAA,CAAQ,QAAR,GAAmB,CAAA,CAAQ,KAD3B,EAGI,CAAA,CAAQ,QAAR,IACF,CAAA,CAAO,QAAP,CAAgB,iBAAhB,EAAmC;AAAE,MAAA,MAAA,EAAA,CAAF;AAAU,MAAA,MAAA,EAAA,CAAV;AAAkB,MAAA,IAAA,EAAM;AAAxB,KAAnC,EAAmE,CAAnE,CAJF;AAOA,UAAM,CAAA,GAAc,IAAI,CAAJ,CAAS,CAAT,EAAiB,CAAjB,EAAyB,MAAA,CAAO,MAAP,CAAc,CAAd,EAAuB,CAAA,CAAO,OAA9B,CAAzB,CAApB;AACA,WAAA,CAAA,CAAO,YAAP,CAAoB,CAAA,CAAY,mBAAhC,IAAuD,CAAvD,EAEA,CAAA,CAAY,iBAAZ,EAFA,EAGA,CAAA,CAAY,KAAZ,CAAkB,CAAA,CAAO,SAAzB,CAHA,EAKI,CAAA,CAAQ,QAAR,IACF,CAAA,CAAO,QAAP,CAAgB,gBAAhB,EAAkC;AAAE,MAAA,MAAA,EAAA,CAAF;AAAU,MAAA,MAAA,EAAA,CAAV;AAAkB,MAAA,IAAA,EAAM,CAAxB;AAA8B,MAAA,WAAA,EAAA;AAA9B,KAAlC,EAA+E,CAA/E,CANF,EASO,CATP;AASO,GA1BT;AADO;;AAAA,CAAA,CAAA,CAAA,EAAA,cAAA,CAAA,EA+BT,CAAA,CAAM,MAAN,GAAe,CAAA,CAAa,CAAb,CA/BN,EAgCT,CAAA,CAAM,SAAN,GAAkB,CAAA,CAAa,CAAb,CAhCT,EAkCT,MAAA,CAAO,OAAP,GAAiB,CAlCR,EAmCT,MAAA,CAAO,OAAP,CAAe,KAAf,GAAuB,CAnCd,EAoCT,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,CApChB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst HasOne = require('./has-one');\nconst HasMany = require('./has-many');\nconst BelongsToMany = require('./belongs-to-many');\nconst BelongsTo = require('./belongs-to');\n\nfunction isModel(model, sequelize) {\n  return model\n    && model.prototype\n    && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    Object.assign(options, _.omit(source.options, ['hooks']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: HasMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: HasMany, association }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: BelongsToMany }, options);\n    }\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: BelongsToMany, association }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function(target, options = {}) {\n    // eslint-disable-next-line no-invalid-this\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks('beforeAssociate', { source, target, type: Type }, options);\n    }\n    // the id is in the foreign table\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks('afterAssociate', { source, target, type: Type, association }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\n\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n"]},"metadata":{},"sourceType":"script"}