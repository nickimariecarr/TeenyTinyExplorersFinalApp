{"ast":null,"code":"\"use strict\";\n\nvar b = Object.defineProperty;\n\nvar h = (m, e) => b(m, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst p = require(\"toposort-class\"),\n      c = require(\"lodash\");\n\nclass u {\n  constructor(e) {\n    this.models = [], this.sequelize = e;\n  }\n\n  addModel(e) {\n    return this.models.push(e), this.sequelize.models[e.name] = e, e;\n  }\n\n  removeModel(e) {\n    this.models = this.models.filter(t => t.name !== e.name), delete this.sequelize.models[e.name];\n  }\n\n  getModel(e, t) {\n    return t = c.defaults(t || {}, {\n      attribute: \"name\"\n    }), this.models.find(l => l[t.attribute] === e);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  forEachModel(e, t) {\n    const l = {},\n          n = new p();\n    let o, a;\n    t = c.defaults(t || {}, {\n      reverse: !0\n    });\n\n    for (const s of this.models) {\n      let i = [],\n          r = s.getTableName();\n      c.isObject(r) && (r = `${r.schema}.${r.tableName}`), l[r] = s;\n\n      for (const d in s.rawAttributes) if (Object.prototype.hasOwnProperty.call(s.rawAttributes, d)) {\n        const f = s.rawAttributes[d];\n        f.references && (a = f.references.model, c.isObject(a) && (a = `${a.schema}.${a.tableName}`), i.push(a));\n      }\n\n      i = i.filter(d => r !== d), n.add(r, i);\n    }\n\n    o = n.sort(), t.reverse && (o = o.reverse());\n\n    for (const s of o) e(l[s], s);\n  }\n\n}\n\nh(u, \"ModelManager\"), module.exports = u, module.exports.ModelManager = u, module.exports.default = u;","map":{"version":3,"sources":["../../lib/model-manager.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} [options] iterator options\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"]},"metadata":{},"sourceType":"script"}