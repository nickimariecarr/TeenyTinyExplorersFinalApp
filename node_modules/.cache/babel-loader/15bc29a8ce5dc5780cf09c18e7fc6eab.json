{"ast":null,"code":"\"use strict\";\n\nvar l = Object.defineProperty;\nvar c = Object.getOwnPropertySymbols;\nvar w = Object.prototype.hasOwnProperty,\n    m = Object.prototype.propertyIsEnumerable;\n\nvar K = (r, e, t) => e in r ? l(r, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : r[e] = t,\n    f = (r, e) => {\n  for (var t in e || (e = {})) w.call(e, t) && K(r, t, e[t]);\n\n  if (c) for (var t of c(e)) m.call(e, t) && K(r, t, e[t]);\n  return r;\n};\n\nvar d = (r, e) => l(r, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst u = require(\"./../utils\"),\n      y = require(\"./helpers\"),\n      p = require(\"lodash\"),\n      b = require(\"./base\"),\n      A = require(\"../operators\");\n\nclass h extends b {\n  constructor(e, t, s) {\n    super(e, t, s);\n    if (this.associationType = \"BelongsTo\", this.isSingleAssociation = !0, this.foreignKeyAttribute = {}, this.as ? (this.isAliased = !0, this.options.name = {\n      singular: this.as\n    }) : (this.as = this.target.options.name.singular, this.options.name = this.target.options.name), p.isObject(this.options.foreignKey) ? (this.foreignKeyAttribute = this.options.foreignKey, this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName) : this.options.foreignKey && (this.foreignKey = this.options.foreignKey), this.foreignKey || (this.foreignKey = u.camelize([this.as, this.target.primaryKeyAttribute].join(\"_\"))), this.identifier = this.foreignKey, this.source.rawAttributes[this.identifier] && (this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier), this.options.targetKey && !this.target.rawAttributes[this.options.targetKey]) throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute, this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey, this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute, this.targetIdentifier = this.targetKey, this.associationAccessor = this.as, this.options.useHooks = s.useHooks;\n    const i = p.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${i}`,\n      set: `set${i}`,\n      create: `create${i}`\n    };\n  }\n\n  _injectAttributes() {\n    const e = {\n      [this.foreignKey]: f({\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: !0\n      }, this.foreignKeyAttribute)\n    };\n\n    if (this.options.constraints !== !1) {\n      const t = this.source.rawAttributes[this.foreignKey] || e[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (t.allowNull ? \"SET NULL\" : \"NO ACTION\"), this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n\n    return y.addForeignKeyConstraints(e[this.foreignKey], this.target, this.source, this.options, this.targetKeyField), u.mergeDefaults(this.source.rawAttributes, e), this.source.refreshAttributes(), this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey, y.checkNamingCollision(this), this;\n  }\n\n  mixin(e) {\n    const t = [\"get\", \"set\", \"create\"];\n    y.mixinMethods(this, e, t);\n  }\n\n  async get(e, t) {\n    const s = {};\n    let i = this.target,\n        o;\n    if (t = u.cloneDeep(t), Object.prototype.hasOwnProperty.call(t, \"scope\") && (t.scope ? i = i.scope(t.scope) : i = i.unscoped()), Object.prototype.hasOwnProperty.call(t, \"schema\") && (i = i.schema(t.schema, t.schemaDelimiter)), Array.isArray(e) || (o = e, e = void 0), e) s[this.targetKey] = {\n      [A.in]: e.map(n => n.get(this.foreignKey))\n    };else {\n      if (this.targetKeyIsPrimary && !t.where) return i.findByPk(o.get(this.foreignKey), t);\n      s[this.targetKey] = o.get(this.foreignKey), t.limit = null;\n    }\n\n    if (t.where = t.where ? {\n      [A.and]: [s, t.where]\n    } : s, e) {\n      const n = await i.findAll(t),\n            g = {};\n\n      for (const a of e) g[a.get(this.foreignKey, {\n        raw: !0\n      })] = null;\n\n      for (const a of n) g[a.get(this.targetKey, {\n        raw: !0\n      })] = a;\n\n      return g;\n    }\n\n    return i.findOne(t);\n  }\n\n  async set(e, t) {\n    let s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let i = t;\n    if (t instanceof this.target && (i = t[this.targetKey]), e.set(this.foreignKey, i), s.save !== !1) return s = f({\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: !0\n    }, s), await e.save(s);\n  }\n\n  async create(e, t, s) {\n    t = t || {}, s = s || {};\n    const i = await this.target.create(t, s);\n    return await e[this.accessors.set](i, s), i;\n  }\n\n  verifyAssociationAlias(e) {\n    return typeof e == \"string\" ? this.as === e : e && e.singular ? this.as === e.singular : !this.isAliased;\n  }\n\n}\n\nd(h, \"BelongsTo\"), module.exports = h, module.exports.BelongsTo = h, module.exports.default = h;","map":{"version":3,"sources":["../../../lib/associations/belongs-to.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.belongsTo(Project)` the getter will be `user.getProject()`.\n *\n * @see {@link Model.belongsTo}\n */\nclass BelongsTo extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'BelongsTo';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.as,\n          this.target.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    this.identifier = this.foreignKey;\n    if (this.source.rawAttributes[this.identifier]) {\n      this.identifierField = this.source.rawAttributes[this.identifier].field || this.identifier;\n    }\n\n    if (\n      this.options.targetKey\n      && !this.target.rawAttributes[this.options.targetKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.targetKey}\" passed as targetKey, define this attribute on model \"${this.target.name}\" first`);\n    }\n\n    this.targetKey = this.options.targetKey || this.target.primaryKeyAttribute;\n    this.targetKeyField = this.target.rawAttributes[this.targetKey].field || this.targetKey;\n    this.targetKeyIsPrimary = this.targetKey === this.target.primaryKeyAttribute;\n    this.targetIdentifier = this.targetKey;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the source table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.target.rawAttributes[this.targetKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const source = this.source.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (source.allowNull ? 'SET NULL' : 'NO ACTION');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.target, this.source, this.options, this.targetKeyField);\n    Utils.mergeDefaults(this.source.rawAttributes, newAttributes);\n\n    this.source.refreshAttributes();\n\n    this.identifierField = this.source.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope]  Apply a scope on the related model, or remove its default scope by passing false.\n   * @param {string}         [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.targetKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.foreignKey))\n      };\n    } else {\n      if (this.targetKeyIsPrimary && !options.where) {\n        return Target.findByPk(instance.get(this.foreignKey), options);\n      }\n      where[this.targetKey] = instance.get(this.foreignKey);\n      options.limit = null;\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.foreignKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.targetKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options={}] options passed to `this.save`\n   * @param {boolean} [options.save=true] Skip saving this after setting the foreign key if false.\n   *\n   *  @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options = {}) {\n    let value = associatedInstance;\n\n    if (associatedInstance instanceof this.target) {\n      value = associatedInstance[this.targetKey];\n    }\n\n    sourceInstance.set(this.foreignKey, value);\n\n    if (options.save === false) return;\n\n    options = {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: true,\n      ...options\n    };\n\n    // passes the changed field to save, so only that field get updated.\n    return await sourceInstance.save(options);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options={}] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create}  for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    const newAssociatedObject = await this.target.create(values, options);\n    await sourceInstance[this.accessors.set](newAssociatedObject, options);\n\n    return newAssociatedObject;\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = BelongsTo;\nmodule.exports.BelongsTo = BelongsTo;\nmodule.exports.default = BelongsTo;\n"]},"metadata":{},"sourceType":"script"}