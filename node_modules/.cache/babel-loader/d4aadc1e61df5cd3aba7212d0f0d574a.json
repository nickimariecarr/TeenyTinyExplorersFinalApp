{"ast":null,"code":"\"use strict\";\n\nvar r = Object.defineProperty;\nvar s = Object.getOwnPropertySymbols;\nvar C = Object.prototype.hasOwnProperty,\n    N = Object.prototype.propertyIsEnumerable;\n\nvar S = (A, e, E) => e in A ? r(A, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: E\n}) : A[e] = E,\n    t = (A, e) => {\n  for (var E in e || (e = {})) C.call(e, E) && S(A, E, e[E]);\n\n  if (s) for (var E of s(e)) N.call(e, E) && S(A, E, e[E]);\n  return A;\n};\n\nvar M = (A, e) => r(A, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst h = require(\"../mysql/query-generator\"),\n      T = require(\"./../../utils\");\n\nclass a extends h {\n  createSchema(e, E) {\n    return E = t({\n      charset: null,\n      collate: null\n    }, E), T.joinSQLFragments([\"CREATE SCHEMA IF NOT EXISTS\", this.quoteIdentifier(e), E.charset && `DEFAULT CHARACTER SET ${this.escape(E.charset)}`, E.collate && `DEFAULT COLLATE ${this.escape(E.collate)}`, \";\"]);\n  }\n\n  dropSchema(e) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(e)};`;\n  }\n\n  showSchemasQuery(e) {\n    const E = [\"'MYSQL'\", \"'INFORMATION_SCHEMA'\", \"'PERFORMANCE_SCHEMA'\"];\n    if (e.skip && Array.isArray(e.skip) && e.skip.length > 0) for (const c of e.skip) E.push(this.escape(c));\n    return T.joinSQLFragments([\"SELECT SCHEMA_NAME as schema_name\", \"FROM INFORMATION_SCHEMA.SCHEMATA\", `WHERE SCHEMA_NAME NOT IN (${E.join(\", \")})`, \";\"]);\n  }\n\n  showTablesQuery(e) {\n    let E = \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\";\n    return e ? E += ` AND TABLE_SCHEMA = ${this.escape(e)}` : E += \" AND TABLE_SCHEMA NOT IN ('MYSQL', 'INFORMATION_SCHEMA', 'PERFORMANCE_SCHEMA')\", `${E};`;\n  }\n\n}\n\nM(a, \"MariaDBQueryGenerator\"), module.exports = a;","map":{"version":3,"sources":["../../../../lib/dialects/mariadb/query-generator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,CAAA,GAAsB,OAAA,CAAQ,0BAAR,CAA5B;AAAA,MACM,CAAA,GAAQ,OAAA,CAAQ,eAAR,CADd;;AAGA,MAAA,CAAA,SAAoC,CAApC,CAAwD;AACtD,EAAA,YAAA,CAAa,CAAb,EAAqB,CAArB,EAA8B;AAC5B,WAAA,CAAA,GAAU,CAAA,CAAA;AACR,MAAA,OAAA,EAAS,IADD;AAER,MAAA,OAAA,EAAS;AAFD,KAAA,EAGL,CAHK,CAAV,EAMO,CAAA,CAAM,gBAAN,CAAuB,CAC5B,6BAD4B,EAE5B,KAAK,eAAL,CAAqB,CAArB,CAF4B,EAG5B,CAAA,CAAQ,OAAR,IAAmB,yBAAyB,KAAK,MAAL,CAAY,CAAA,CAAQ,OAApB,CAAoB,EAHpC,EAI5B,CAAA,CAAQ,OAAR,IAAmB,mBAAmB,KAAK,MAAL,CAAY,CAAA,CAAQ,OAApB,CAAoB,EAJ9B,EAK5B,GAL4B,CAAvB,CANP;AAeF;;AAAA,EAAA,UAAA,CAAW,CAAX,EAAmB;AACjB,WAAO,yBAAyB,KAAK,eAAL,CAAqB,CAArB,CAAqB,GAArD;AAGF;;AAAA,EAAA,gBAAA,CAAiB,CAAjB,EAA0B;AACxB,UAAM,CAAA,GAAgB,CACpB,SADoB,EAEpB,sBAFoB,EAGpB,sBAHoB,CAAtB;AAKA,QAAI,CAAA,CAAQ,IAAR,IAAgB,KAAA,CAAM,OAAN,CAAc,CAAA,CAAQ,IAAtB,CAAhB,IAA+C,CAAA,CAAQ,IAAR,CAAa,MAAb,GAAsB,CAAzE,EACE,KAAA,MAAW,CAAX,IAAyB,CAAA,CAAQ,IAAjC,EACE,CAAA,CAAc,IAAd,CAAmB,KAAK,MAAL,CAAY,CAAZ,CAAnB;AAGJ,WAAO,CAAA,CAAM,gBAAN,CAAuB,CAC5B,mCAD4B,EAE5B,kCAF4B,EAG5B,6BAA6B,CAAA,CAAc,IAAd,CAAmB,IAAnB,CAAmB,GAHpB,EAI5B,GAJ4B,CAAvB,CAAP;AAQF;;AAAA,EAAA,eAAA,CAAgB,CAAhB,EAA0B;AACxB,QAAI,CAAA,GAAQ,gGAAZ;AACA,WAAI,CAAA,GACF,CAAA,IAAS,uBAAuB,KAAK,MAAL,CAAY,CAAZ,CAAY,EAD1C,GAGF,CAAA,IAAS,gFAHP,EAKG,GAAG,CAAA,GALV;AAKU;;AA/C0C;;AAAxD,CAAA,CAAA,CAAA,EAAA,uBAAA,CAAA,EAmDA,MAAA,CAAO,OAAP,GAAiB,CAnDjB","sourcesContent":["'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n\n    return Utils.joinSQLFragments([\n      'CREATE SCHEMA IF NOT EXISTS',\n      this.quoteIdentifier(schema),\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\n      ';'\n    ]);\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)};`;\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = [\n      '\\'MYSQL\\'',\n      '\\'INFORMATION_SCHEMA\\'',\n      '\\'PERFORMANCE_SCHEMA\\''\n    ];\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n    return Utils.joinSQLFragments([\n      'SELECT SCHEMA_NAME as schema_name',\n      'FROM INFORMATION_SCHEMA.SCHEMATA',\n      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.join(', ')})`,\n      ';'\n    ]);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n    if (database) {\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n    return `${query};`;\n  }\n}\n\nmodule.exports = MariaDBQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}