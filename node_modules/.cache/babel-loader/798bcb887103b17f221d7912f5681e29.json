{"ast":null,"code":"\"use strict\";\n\nvar a = Object.defineProperty;\n\nvar n = (r, s) => a(r, \"name\", {\n  value: s,\n  configurable: !0\n});\n\nconst b = require(\"wkx\"),\n      L = require(\"lodash\"),\n      I = require(\"moment-timezone\");\n\nmodule.exports = r => {\n  r.ABSTRACT.prototype.dialectTypes = \"https://mariadb.com/kb/en/library/resultset/#field-types\", r.DATE.types.mariadb = [\"DATETIME\"], r.STRING.types.mariadb = [\"VAR_STRING\"], r.CHAR.types.mariadb = [\"STRING\"], r.TEXT.types.mariadb = [\"BLOB\"], r.TINYINT.types.mariadb = [\"TINY\"], r.SMALLINT.types.mariadb = [\"SHORT\"], r.MEDIUMINT.types.mariadb = [\"INT24\"], r.INTEGER.types.mariadb = [\"LONG\"], r.BIGINT.types.mariadb = [\"LONGLONG\"], r.FLOAT.types.mariadb = [\"FLOAT\"], r.TIME.types.mariadb = [\"TIME\"], r.DATEONLY.types.mariadb = [\"DATE\"], r.BOOLEAN.types.mariadb = [\"TINY\"], r.BLOB.types.mariadb = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"], r.DECIMAL.types.mariadb = [\"NEWDECIMAL\"], r.UUID.types.mariadb = !1, r.ENUM.types.mariadb = !1, r.REAL.types.mariadb = [\"DOUBLE\"], r.DOUBLE.types.mariadb = [\"DOUBLE\"], r.GEOMETRY.types.mariadb = [\"GEOMETRY\"], r.JSON.types.mariadb = [\"JSON\"];\n\n  class s extends r.DECIMAL {\n    toSql() {\n      let t = super.toSql();\n      return this._unsigned && (t += \" UNSIGNED\"), this._zerofill && (t += \" ZEROFILL\"), t;\n    }\n\n  }\n\n  n(s, \"DECIMAL\");\n\n  class m extends r.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : \"DATETIME\";\n    }\n\n    _stringify(t, i) {\n      return t = this._applyTimezone(t, i), t.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n    }\n\n    static parse(t, i) {\n      return t = t.string(), t === null || (I.tz.zone(i.timezone) ? t = I.tz(t, i.timezone).toDate() : t = new Date(`${t} ${i.timezone}`)), t;\n    }\n\n  }\n\n  n(m, \"DATE\");\n\n  class E extends r.DATEONLY {\n    static parse(t) {\n      return t.string();\n    }\n\n  }\n\n  n(E, \"DATEONLY\");\n\n  class N extends r.UUID {\n    toSql() {\n      return \"CHAR(36) BINARY\";\n    }\n\n  }\n\n  n(N, \"UUID\");\n\n  class d extends r.GEOMETRY {\n    constructor(t, i) {\n      super(t, i);\n      L.isEmpty(this.type) ? this.sqlType = this.key : this.sqlType = this.type;\n    }\n\n    static parse(t) {\n      return t = t.buffer(), !t || t.length === 0 ? null : (t = t.slice(4), b.Geometry.parse(t).toGeoJSON({\n        shortCrs: !0\n      }));\n    }\n\n    toSql() {\n      return this.sqlType;\n    }\n\n  }\n\n  n(d, \"GEOMETRY\");\n\n  class o extends r.ENUM {\n    toSql(t) {\n      return `ENUM(${this.values.map(i => t.escape(i)).join(\", \")})`;\n    }\n\n  }\n\n  n(o, \"ENUM\");\n\n  class O extends r.JSON {\n    _stringify(t, i) {\n      return i.operation === \"where\" && typeof t == \"string\" ? t : JSON.stringify(t);\n    }\n\n  }\n\n  return n(O, \"JSONTYPE\"), {\n    ENUM: o,\n    DATE: m,\n    DATEONLY: E,\n    UUID: N,\n    GEOMETRY: d,\n    DECIMAL: s,\n    JSON: O\n  };\n};","map":{"version":3,"sources":["../../../../lib/dialects/mariadb/data-types.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst wkx = require('wkx');\nconst _ = require('lodash');\nconst moment = require('moment-timezone');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types\n   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js\n   */\n\n  BaseTypes.DATE.types.mariadb = ['DATETIME'];\n  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];\n  BaseTypes.CHAR.types.mariadb = ['STRING'];\n  BaseTypes.TEXT.types.mariadb = ['BLOB'];\n  BaseTypes.TINYINT.types.mariadb = ['TINY'];\n  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];\n  BaseTypes.INTEGER.types.mariadb = ['LONG'];\n  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];\n  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];\n  BaseTypes.TIME.types.mariadb = ['TIME'];\n  BaseTypes.DATEONLY.types.mariadb = ['DATE'];\n  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];\n  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.mariadb = false;\n  BaseTypes.ENUM.types.mariadb = false;\n  BaseTypes.REAL.types.mariadb = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];\n  BaseTypes.JSON.types.mariadb = ['JSON'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    toSql() {\n      let definition = super.toSql();\n      if (this._unsigned) {\n        definition += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        definition += ' ZEROFILL';\n      }\n      return definition;\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\n    }\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options);\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (moment.tz.zone(options.timezone)) {\n        value = moment.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36) BINARY';\n    }\n  }\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    constructor(type, srid) {\n      super(type, srid);\n      if (_.isEmpty(this.type)) {\n        this.sqlType = this.key;\n      }\n      else {\n        this.sqlType = this.type;\n      }\n    }\n    static parse(value) {\n      value = value.buffer();\n      // Empty buffer, MySQL doesn't support POINT EMPTY\n      // check, https://dev.mysql.com/worklog/task/?id=2381\n      if (!value || value.length === 0) {\n        return null;\n      }\n      // For some reason, discard the first 4 bytes\n      value = value.slice(4);\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\n    }\n    toSql() {\n      return this.sqlType;\n    }\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql(options) {\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value\n        : JSON.stringify(value);\n    }\n  }\n\n  return {\n    ENUM,\n    DATE,\n    DATEONLY,\n    UUID,\n    GEOMETRY,\n    DECIMAL,\n    JSON: JSONTYPE\n  };\n};\n"]},"metadata":{},"sourceType":"script"}