{"ast":null,"code":"\"use strict\";\n\nvar n = Object.defineProperty;\n\nvar o = (r, t) => n(r, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst u = require(\"lodash\"),\n      s = require(\"../abstract\"),\n      a = require(\"./connection-manager\"),\n      p = require(\"./query\"),\n      c = require(\"./query-generator\"),\n      i = require(\"../../data-types\").postgres,\n      {\n  PostgresQueryInterface: y\n} = require(\"./query-interface\");\n\nclass e extends s {\n  constructor(t) {\n    super();\n    this.sequelize = t, this.connectionManager = new a(this, t), this.queryGenerator = new c({\n      _dialect: this,\n      sequelize: t\n    }), this.queryInterface = new y(t, this.queryGenerator);\n  }\n\n}\n\no(e, \"PostgresDialect\"), e.prototype.supports = u.merge(u.cloneDeep(s.prototype.supports), {\n  \"DEFAULT VALUES\": !0,\n  EXCEPTION: !0,\n  \"ON DUPLICATE KEY\": !1,\n  \"ORDER NULLS\": !0,\n  returnValues: {\n    returning: !0\n  },\n  bulkDefault: !0,\n  schemas: !0,\n  lock: !0,\n  lockOf: !0,\n  lockKey: !0,\n  lockOuterJoinFailure: !0,\n  skipLocked: !0,\n  forShare: \"FOR SHARE\",\n  index: {\n    concurrently: !0,\n    using: 2,\n    where: !0,\n    functionBased: !0,\n    operator: !0\n  },\n  inserts: {\n    onConflictDoNothing: \" ON CONFLICT DO NOTHING\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\"\n  },\n  NUMERIC: !0,\n  ARRAY: !0,\n  RANGE: !0,\n  GEOMETRY: !0,\n  REGEXP: !0,\n  GEOGRAPHY: !0,\n  JSON: !0,\n  JSONB: !0,\n  HSTORE: !0,\n  TSVECTOR: !0,\n  deferrableConstraints: !0,\n  searchPath: !0\n}), e.prototype.defaultVersion = \"9.5.0\", e.prototype.Query = p, e.prototype.DataTypes = i, e.prototype.name = \"postgres\", e.prototype.TICK_CHAR = '\"', e.prototype.TICK_CHAR_LEFT = e.prototype.TICK_CHAR, e.prototype.TICK_CHAR_RIGHT = e.prototype.TICK_CHAR, module.exports = e, module.exports.default = e, module.exports.PostgresDialect = e;","map":{"version":3,"sources":["../../../../lib/dialects/postgres/index.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').postgres;\nconst { PostgresQueryInterface } = require('./query-interface');\n\nclass PostgresDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new PostgresQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nPostgresDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    'DEFAULT VALUES': true,\n    EXCEPTION: true,\n    'ON DUPLICATE KEY': false,\n    'ORDER NULLS': true,\n    returnValues: {\n      returning: true\n    },\n    bulkDefault: true,\n    schemas: true,\n    lock: true,\n    lockOf: true,\n    lockKey: true,\n    lockOuterJoinFailure: true,\n    skipLocked: true,\n    forShare: 'FOR SHARE',\n    index: {\n      concurrently: true,\n      using: 2,\n      where: true,\n      functionBased: true,\n      operator: true\n    },\n    inserts: {\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n    },\n    NUMERIC: true,\n    ARRAY: true,\n    RANGE: true,\n    GEOMETRY: true,\n    REGEXP: true,\n    GEOGRAPHY: true,\n    JSON: true,\n    JSONB: true,\n    HSTORE: true,\n    TSVECTOR: true,\n    deferrableConstraints: true,\n    searchPath: true\n  }\n);\n\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\nPostgresDialect.prototype.Query = Query;\nPostgresDialect.prototype.DataTypes = DataTypes;\nPostgresDialect.prototype.name = 'postgres';\nPostgresDialect.prototype.TICK_CHAR = '\"';\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\n\nmodule.exports = PostgresDialect;\nmodule.exports.default = PostgresDialect;\nmodule.exports.PostgresDialect = PostgresDialect;\n"]},"metadata":{},"sourceType":"script"}