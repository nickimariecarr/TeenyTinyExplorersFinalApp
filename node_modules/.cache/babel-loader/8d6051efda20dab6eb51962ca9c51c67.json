{"ast":null,"code":"\"use strict\";\n\nvar a = Object.defineProperty;\n\nvar o = (r, t) => a(r, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst s = require(\"lodash\"),\n      n = require(\"../abstract\"),\n      p = require(\"./connection-manager\"),\n      i = require(\"./query\"),\n      u = require(\"./query-generator\"),\n      c = require(\"../../data-types\").sqlite,\n      {\n  SQLiteQueryInterface: y\n} = require(\"./query-interface\");\n\nclass e extends n {\n  constructor(t) {\n    super();\n    this.sequelize = t, this.connectionManager = new p(this, t), this.queryGenerator = new u({\n      _dialect: this,\n      sequelize: t\n    }), this.queryInterface = new y(t, this.queryGenerator);\n  }\n\n}\n\no(e, \"SqliteDialect\"), e.prototype.supports = s.merge(s.cloneDeep(n.prototype.supports), {\n  DEFAULT: !1,\n  \"DEFAULT VALUES\": !0,\n  \"UNION ALL\": !1,\n  \"RIGHT JOIN\": !1,\n  inserts: {\n    ignoreDuplicates: \" OR IGNORE\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\"\n  },\n  index: {\n    using: !1,\n    where: !0,\n    functionBased: !0\n  },\n  transactionOptions: {\n    type: !0\n  },\n  constraints: {\n    addConstraint: !1,\n    dropConstraint: !1\n  },\n  groupedLimit: !1,\n  JSON: !0\n}), e.prototype.defaultVersion = \"3.8.0\", e.prototype.Query = i, e.prototype.DataTypes = c, e.prototype.name = \"sqlite\", e.prototype.TICK_CHAR = \"`\", e.prototype.TICK_CHAR_LEFT = e.prototype.TICK_CHAR, e.prototype.TICK_CHAR_RIGHT = e.prototype.TICK_CHAR, module.exports = e, module.exports.SqliteDialect = e, module.exports.default = e;","map":{"version":3,"sources":["../../../../lib/dialects/sqlite/index.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,CAAA,GAAI,OAAA,CAAQ,QAAR,CAAV;AAAA,MACM,CAAA,GAAkB,OAAA,CAAQ,aAAR,CADxB;AAAA,MAEM,CAAA,GAAoB,OAAA,CAAQ,sBAAR,CAF1B;AAAA,MAGM,CAAA,GAAQ,OAAA,CAAQ,SAAR,CAHd;AAAA,MAIM,CAAA,GAAiB,OAAA,CAAQ,mBAAR,CAJvB;AAAA,MAKM,CAAA,GAAY,OAAA,CAAQ,kBAAR,CAAA,CAA4B,MAL9C;AAAA,MAMM;AAAE,EAAA,oBAAA,EAAA;AAAF,IAA2B,OAAA,CAAQ,mBAAR,CANjC;;AAQA,MAAA,CAAA,SAA4B,CAA5B,CAA4C;AAC1C,EAAA,WAAA,CAAY,CAAZ,EAAuB;AACrB;AACA,SAAK,SAAL,GAAiB,CAAjB,EACA,KAAK,iBAAL,GAAyB,IAAI,CAAJ,CAAsB,IAAtB,EAA4B,CAA5B,CADzB,EAEA,KAAK,cAAL,GAAsB,IAAI,CAAJ,CAAmB;AACvC,MAAA,QAAA,EAAU,IAD6B;AAEvC,MAAA,SAAA,EAAA;AAFuC,KAAnB,CAFtB,EAOA,KAAK,cAAL,GAAsB,IAAI,CAAJ,CACpB,CADoB,EAEpB,KAAK,cAFe,CAPtB;AASO;;AAZiC;;AAA5C,CAAA,CAAA,CAAA,EAAA,eAAA,CAAA,EAiBA,CAAA,CAAc,SAAd,CAAwB,QAAxB,GAAmC,CAAA,CAAE,KAAF,CACjC,CAAA,CAAE,SAAF,CAAY,CAAA,CAAgB,SAAhB,CAA0B,QAAtC,CADiC,EAEjC;AACE,EAAA,OAAA,EAAS,CAAA,CADX;AAEE,oBAAkB,CAAA,CAFpB;AAGE,eAAa,CAAA,CAHf;AAIE,gBAAc,CAAA,CAJhB;AAKE,EAAA,OAAA,EAAS;AACP,IAAA,gBAAA,EAAkB,YADX;AAEP,IAAA,iBAAA,EAAmB;AAFZ,GALX;AASE,EAAA,KAAA,EAAO;AACL,IAAA,KAAA,EAAO,CAAA,CADF;AAEL,IAAA,KAAA,EAAO,CAAA,CAFF;AAGL,IAAA,aAAA,EAAe,CAAA;AAHV,GATT;AAcE,EAAA,kBAAA,EAAoB;AAClB,IAAA,IAAA,EAAM,CAAA;AADY,GAdtB;AAiBE,EAAA,WAAA,EAAa;AACX,IAAA,aAAA,EAAe,CAAA,CADJ;AAEX,IAAA,cAAA,EAAgB,CAAA;AAFL,GAjBf;AAqBE,EAAA,YAAA,EAAc,CAAA,CArBhB;AAsBE,EAAA,IAAA,EAAM,CAAA;AAtBR,CAFiC,CAjBnC,EA6CA,CAAA,CAAc,SAAd,CAAwB,cAAxB,GAAyC,OA7CzC,EA8CA,CAAA,CAAc,SAAd,CAAwB,KAAxB,GAAgC,CA9ChC,EA+CA,CAAA,CAAc,SAAd,CAAwB,SAAxB,GAAoC,CA/CpC,EAgDA,CAAA,CAAc,SAAd,CAAwB,IAAxB,GAA+B,QAhD/B,EAiDA,CAAA,CAAc,SAAd,CAAwB,SAAxB,GAAoC,GAjDpC,EAkDA,CAAA,CAAc,SAAd,CAAwB,cAAxB,GAAyC,CAAA,CAAc,SAAd,CAAwB,SAlDjE,EAmDA,CAAA,CAAc,SAAd,CAAwB,eAAxB,GAA0C,CAAA,CAAc,SAAd,CAAwB,SAnDlE,EAqDA,MAAA,CAAO,OAAP,GAAiB,CArDjB,EAsDA,MAAA,CAAO,OAAP,CAAe,aAAf,GAA+B,CAtD/B,EAuDA,MAAA,CAAO,OAAP,CAAe,OAAf,GAAyB,CAvDzB","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"]},"metadata":{},"sourceType":"script"}