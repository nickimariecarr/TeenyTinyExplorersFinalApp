{"ast":null,"code":"\"use strict\";\n\nvar q = Object.defineProperty,\n    Q = Object.defineProperties;\nvar d = Object.getOwnPropertyDescriptors;\nvar c = Object.getOwnPropertySymbols;\nvar z = Object.prototype.hasOwnProperty,\n    f = Object.prototype.propertyIsEnumerable;\n\nvar o = (t, e, r) => e in t ? q(t, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: r\n}) : t[e] = r,\n    a = (t, e) => {\n  for (var r in e || (e = {})) z.call(e, r) && o(t, r, e[r]);\n\n  if (c) for (var r of c(e)) f.call(e, r) && o(t, r, e[r]);\n  return t;\n},\n    h = (t, e) => Q(t, d(e));\n\nvar l = (t, e) => q(t, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst g = require(\"../../errors\"),\n      {\n  QueryInterface: G\n} = require(\"../abstract/query-interface\"),\n      C = require(\"../../query-types\");\n\nclass w extends G {\n  async removeColumn(e, r, s) {\n    s = s || {};\n    const [i] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(e.tableName ? e : {\n      tableName: e,\n      schema: this.sequelize.config.database\n    }, r), a({\n      raw: !0\n    }, s));\n    return i.length && i[0].constraint_name !== \"PRIMARY\" && (await Promise.all(i.map(n => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(e, n.constraint_name), a({\n      raw: !0\n    }, s))))), await this.sequelize.query(this.queryGenerator.removeColumnQuery(e, r), a({\n      raw: !0\n    }, s));\n  }\n\n  async upsert(e, r, s, i, n) {\n    n = a({}, n), n.type = C.UPSERT, n.updateOnDuplicate = Object.keys(s);\n    const u = n.model,\n          y = this.queryGenerator.insertQuery(e, r, u.rawAttributes, n);\n    return await this.sequelize.query(y, n);\n  }\n\n  async removeConstraint(e, r, s) {\n    const i = this.queryGenerator.showConstraintsQuery(e.tableName ? e : {\n      tableName: e,\n      schema: this.sequelize.config.database\n    }, r),\n          u = (await this.sequelize.query(i, h(a({}, s), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    })))[0];\n    let y;\n    if (!u || !u.constraintType) throw new g.UnknownConstraintError({\n      message: `Constraint ${r} on table ${e} does not exist`,\n      constraint: r,\n      table: e\n    });\n    return u.constraintType === \"FOREIGN KEY\" ? y = this.queryGenerator.dropForeignKeyQuery(e, r) : y = this.queryGenerator.removeIndexQuery(u.tableName, u.constraintName), await this.sequelize.query(y, s);\n  }\n\n}\n\nl(w, \"MySQLQueryInterface\"), exports.MySQLQueryInterface = w;","map":{"version":3,"sources":["../../../../lib/dialects/mysql/query-interface.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,CAAA,GAAkB,OAAA,CAAQ,cAAR,CAAxB;AAAA,MACM;AAAE,EAAA,cAAA,EAAA;AAAF,IAAqB,OAAA,CAAQ,6BAAR,CAD3B;AAAA,MAEM,CAAA,GAAa,OAAA,CAAQ,mBAAR,CAFnB;;AAOA,MAAA,CAAA,SAAkC,CAAlC,CAAiD;AAMzC,QAAA,YAAA,CAAa,CAAb,EAAwB,CAAxB,EAAoC,CAApC,EAA6C;AACjD,IAAA,CAAA,GAAU,CAAA,IAAW,EAArB;AAEA,UAAM,CAAC,CAAD,IAAY,MAAM,KAAK,SAAL,CAAe,KAAf,CACtB,KAAK,cAAL,CAAoB,kBAApB,CAAuC,CAAA,CAAU,SAAV,GAAsB,CAAtB,GAAkC;AACvE,MAAA,SAAA,EAAA,CADuE;AAEvE,MAAA,MAAA,EAAQ,KAAK,SAAL,CAAe,MAAf,CAAsB;AAFyC,KAAzE,EAGG,CAHH,CADsB,EAKtB,CAAA,CAAA;AAAE,MAAA,GAAA,EAAK,CAAA;AAAP,KAAA,EAAgB,CAAhB,CALsB,CAAxB;AASA,WAAI,CAAA,CAAQ,MAAR,IAAkB,CAAA,CAAQ,CAAR,CAAA,CAAW,eAAX,KAA+B,SAAjD,KACF,MAAM,OAAA,CAAQ,GAAR,CAAY,CAAA,CAAQ,GAAR,CAAY,CAAA,IAAc,KAAK,SAAL,CAAe,KAAf,CAC1C,KAAK,cAAL,CAAoB,mBAApB,CAAwC,CAAxC,EAAmD,CAAA,CAAW,eAA9D,CAD0C,EAE1C,CAAA,CAAA;AAAE,MAAA,GAAA,EAAK,CAAA;AAAP,KAAA,EAAgB,CAAhB,CAF0C,CAA1B,CAAZ,CADJ,GAOG,MAAM,KAAK,SAAL,CAAe,KAAf,CACX,KAAK,cAAL,CAAoB,iBAApB,CAAsC,CAAtC,EAAiD,CAAjD,CADW,EAEX,CAAA,CAAA;AAAE,MAAA,GAAA,EAAK,CAAA;AAAP,KAAA,EAAgB,CAAhB,CAFW,CAPb;AASkB;;AAOd,QAAA,MAAA,CAAO,CAAP,EAAkB,CAAlB,EAAgC,CAAhC,EAA8C,CAA9C,EAAqD,CAArD,EAA8D;AAClE,IAAA,CAAA,GAAU,CAAA,CAAA,EAAA,EAAK,CAAL,CAAV,EAEA,CAAA,CAAQ,IAAR,GAAe,CAAA,CAAW,MAF1B,EAGA,CAAA,CAAQ,iBAAR,GAA4B,MAAA,CAAO,IAAP,CAAY,CAAZ,CAH5B;AAKA,UAAM,CAAA,GAAQ,CAAA,CAAQ,KAAtB;AAAA,UACM,CAAA,GAAM,KAAK,cAAL,CAAoB,WAApB,CAAgC,CAAhC,EAA2C,CAA3C,EAAyD,CAAA,CAAM,aAA/D,EAA8E,CAA9E,CADZ;AAEA,WAAO,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,CAArB,EAA0B,CAA1B,CAAb;AAAuC;;AAMnC,QAAA,gBAAA,CAAiB,CAAjB,EAA4B,CAA5B,EAA4C,CAA5C,EAAqD;AACzD,UAAM,CAAA,GAAM,KAAK,cAAL,CAAoB,oBAApB,CACV,CAAA,CAAU,SAAV,GAAsB,CAAtB,GAAkC;AAChC,MAAA,SAAA,EAAA,CADgC;AAEhC,MAAA,MAAA,EAAQ,KAAK,SAAL,CAAe,MAAf,CAAsB;AAFE,KADxB,EAIP,CAJO,CAAZ;AAAA,UASM,CAAA,GAAa,CAHO,MAAA,KAAK,SAAL,CAAe,KAAf,CAAqB,CAArB,EAA0B,CAAA,CAAA,CAAA,CAAA,EAAA,EAAK,CAAL,CAAA,EAAA;AAClD,MAAA,IAAA,EAAM,KAAK,SAAL,CAAe,UAAf,CAA0B;AADkB,KAAA,CAA1B,CAGP,EAAY,CAAZ,CATnB;AAUA,QAAI,CAAJ;AACA,QAAI,CAAC,CAAD,IAAe,CAAC,CAAA,CAAW,cAA/B,EACE,MAAM,IAAI,CAAA,CAAgB,sBAApB,CACJ;AACE,MAAA,OAAA,EAAS,cAAc,CAAA,aAA2B,CAAA,iBADpD;AAEE,MAAA,UAAA,EAAY,CAFd;AAGE,MAAA,KAAA,EAAO;AAHT,KADI,CAAN;AAQF,WAAI,CAAA,CAAW,cAAX,KAA8B,aAA9B,GACF,CAAA,GAAQ,KAAK,cAAL,CAAoB,mBAApB,CAAwC,CAAxC,EAAmD,CAAnD,CADN,GAGF,CAAA,GAAQ,KAAK,cAAL,CAAoB,gBAApB,CAAqC,CAAA,CAAW,SAAhD,EAA2D,CAAA,CAAW,cAAtE,CAHN,EAMG,MAAM,KAAK,SAAL,CAAe,KAAf,CAAqB,CAArB,EAA4B,CAA5B,CANb;AAMyC;;AA3EI;;AAAjD,CAAA,CAAA,CAAA,EAAA,qBAAA,CAAA,EA+EA,OAAA,CAAQ,mBAAR,GAA8B,CA/E9B","sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"]},"metadata":{},"sourceType":"script"}