{"ast":null,"code":"\"use strict\";\n\nvar w = Object.defineProperty;\nvar E = Object.getOwnPropertySymbols;\nvar I = Object.prototype.hasOwnProperty,\n    C = Object.prototype.propertyIsEnumerable;\n\nvar R = (u, e, t) => e in u ? w(u, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : u[e] = t,\n    _ = (u, e) => {\n  for (var t in e || (e = {})) I.call(e, t) && R(u, t, e[t]);\n\n  if (E) for (var t of E(e)) C.call(e, t) && R(u, t, e[t]);\n  return u;\n};\n\nvar m = (u, e) => w(u, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst b = require(\"../abstract/query\"),\n      d = require(\"../../errors\"),\n      p = require(\"lodash\"),\n      {\n  logger: x\n} = require(\"../../utils/logger\"),\n      K = 1062,\n      q = 1213,\n      Q = 1451,\n      N = 1452,\n      S = x.debugContext(\"sql:mysql\");\n\nclass y extends b {\n  constructor(e, t, n) {\n    super(e, t, _({\n      showWarnings: !1\n    }, n));\n  }\n\n  static formatBindParameters(e, t, n) {\n    const s = [],\n          r = m((i, o, h) => {\n      if (h[o] !== void 0) return s.push(h[o]), \"?\";\n    }, \"replacementFunc\");\n    return e = b.formatBindParameters(e, t, n, r)[0], [e, s.length > 0 ? s : void 0];\n  }\n\n  async run(e, t) {\n    this.sql = e;\n\n    const {\n      connection: n,\n      options: s\n    } = this,\n          r = this.sequelize.options.showWarnings || s.showWarnings,\n          i = this._logQuery(e, S, t);\n\n    t && S(\"parameters(%j)\", t);\n    let o;\n    const h = new Error();\n\n    try {\n      t && t.length ? o = await new Promise((l, a) => {\n        n.execute(e, t, (c, f) => c ? a(c) : l(f)).setMaxListeners(100);\n      }) : o = await new Promise((l, a) => {\n        n.query({\n          sql: e\n        }, (c, f) => c ? a(c) : l(f)).setMaxListeners(100);\n      });\n    } catch (l) {\n      if (s.transaction && l.errno === q) {\n        try {\n          await s.transaction.rollback();\n        } catch (a) {}\n\n        s.transaction.finished = \"rollback\";\n      }\n\n      throw l.sql = e, l.parameters = t, this.formatError(l, h.stack);\n    } finally {\n      i();\n    }\n\n    return r && o && o.warningStatus > 0 && (await this.logWarnings(o)), this.formatResults(o);\n  }\n\n  formatResults(e) {\n    let t = this.instance;\n    if (this.isInsertQuery(e) && (this.handleInsertQuery(e), !this.instance)) if (e.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n      const n = e[this.getInsertIdField()];\n      t = [];\n\n      for (let s = n; s < n + e.affectedRows; s++) t.push({\n        [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: s\n      });\n    } else t = e[this.getInsertIdField()];\n    if (this.isSelectQuery()) return this.handleSelectQuery(e);\n    if (this.isShowTablesQuery()) return this.handleShowTablesQuery(e);\n\n    if (this.isDescribeQuery()) {\n      t = {};\n\n      for (const n of e) {\n        const s = /^enum/i;\n        t[n.Field] = {\n          type: s.test(n.Type) ? n.Type.replace(s, \"ENUM\") : n.Type.toUpperCase(),\n          allowNull: n.Null === \"YES\",\n          defaultValue: n.Default,\n          primaryKey: n.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(n, \"Extra\") && n.Extra.toLowerCase() === \"auto_increment\",\n          comment: n.Comment ? n.Comment : null\n        };\n      }\n\n      return t;\n    }\n\n    return this.isShowIndexesQuery() ? this.handleShowIndexesQuery(e) : this.isCallQuery() ? e[0] : this.isBulkUpdateQuery() || this.isBulkDeleteQuery() ? e.affectedRows : this.isVersionQuery() ? e[0].version : this.isForeignKeysQuery() ? e : this.isUpsertQuery() ? [t, e.affectedRows === 1] : this.isInsertQuery() || this.isUpdateQuery() ? [t, e.affectedRows] : this.isShowConstraintsQuery() ? e : this.isRawQuery() ? [e, e] : t;\n  }\n\n  async logWarnings(e) {\n    const t = await this.run(\"SHOW WARNINGS\"),\n          n = `MySQL Warnings (${this.connection.uuid || \"default\"}): `,\n          s = [];\n\n    for (const r of t) if (!(r === void 0 || typeof r[Symbol.iterator] != \"function\")) for (const i of r) if (Object.prototype.hasOwnProperty.call(i, \"Message\")) s.push(i.Message);else for (const o of i.keys()) s.push([o, i[o]].join(\": \"));\n\n    return this.sequelize.log(n + s.join(\"; \"), this.options), e;\n  }\n\n  formatError(e, t) {\n    const n = e.errno || e.code;\n\n    switch (n) {\n      case K:\n        {\n          const s = e.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let r = {},\n              i = \"Validation error\";\n          const o = s ? s[1].split(\"-\") : void 0,\n                h = s ? s[2].split(\".\").pop() : void 0,\n                l = s ? s[1] : void 0,\n                a = this.model && this.model.uniqueKeys[h];\n          a ? (a.msg && (i = a.msg), r = p.zipObject(a.fields, o)) : r[h] = l;\n          const c = [];\n          return p.forOwn(r, (f, g) => {\n            c.push(new d.ValidationErrorItem(this.getUniqueConstraintErrorMessage(g), \"unique violation\", g, f, this.instance, \"not_unique\"));\n          }), new d.UniqueConstraintError({\n            message: i,\n            errors: c,\n            parent: e,\n            fields: r,\n            stack: t\n          });\n        }\n\n      case Q:\n      case N:\n        {\n          const s = e.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/),\n                r = s ? s[1] : \"`\",\n                i = s ? s[3].split(new RegExp(`${r}, *${r}`)) : void 0;\n          return new d.ForeignKeyConstraintError({\n            reltype: String(n) === String(Q) ? \"parent\" : \"child\",\n            table: s ? s[4] : void 0,\n            fields: i,\n            value: i && i.length && this.instance && this.instance[i[0]] || void 0,\n            index: s ? s[2] : void 0,\n            parent: e,\n            stack: t\n          });\n        }\n\n      default:\n        return new d.DatabaseError(e, {\n          stack: t\n        });\n    }\n  }\n\n  handleShowIndexesQuery(e) {\n    return e = e.reduce((t, n) => (n.Key_name in t || (t[n.Key_name] = n, n.fields = []), t[n.Key_name].fields[n.Seq_in_index - 1] = {\n      attribute: n.Column_name,\n      length: n.Sub_part || void 0,\n      order: n.Collation === \"A\" ? \"ASC\" : void 0\n    }, delete n.column_name, t), {}), p.map(e, t => ({\n      primary: t.Key_name === \"PRIMARY\",\n      fields: t.fields,\n      name: t.Key_name,\n      tableName: t.Table,\n      unique: t.Non_unique !== 1,\n      type: t.Index_type\n    }));\n  }\n\n}\n\nm(y, \"Query\"), module.exports = y, module.exports.Query = y, module.exports.default = y;","map":{"version":3,"sources":["../../../../lib/dialects/mysql/query.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"]},"metadata":{},"sourceType":"script"}