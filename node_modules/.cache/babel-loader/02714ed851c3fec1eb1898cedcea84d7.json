{"ast":null,"code":"\"use strict\";\n\nvar l = Object.defineProperty;\n\nvar r = (s, t) => l(s, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst {\n  classToInvokable: n\n} = require(\"./utils\");\n\nclass e {\n  static toString() {\n    return new this().toString(...arguments);\n  }\n\n  toString() {\n    return this.toSql(...arguments);\n  }\n\n  toSql() {\n    throw new Error(\"toSql implementation missing\");\n  }\n\n}\n\nr(e, \"ABSTRACT\");\n\nclass o extends e {\n  toSql() {\n    return \"DEFERRABLE INITIALLY DEFERRED\";\n  }\n\n}\n\nr(o, \"INITIALLY_DEFERRED\");\n\nclass E extends e {\n  toSql() {\n    return \"DEFERRABLE INITIALLY IMMEDIATE\";\n  }\n\n}\n\nr(E, \"INITIALLY_IMMEDIATE\");\n\nclass i extends e {\n  toSql() {\n    return \"NOT DEFERRABLE\";\n  }\n\n}\n\nr(i, \"NOT\");\n\nclass I extends e {\n  constructor(t) {\n    super();\n    this.constraints = t;\n  }\n\n  toSql(t) {\n    return t.setDeferredQuery(this.constraints);\n  }\n\n}\n\nr(I, \"SET_DEFERRED\");\n\nclass c extends e {\n  constructor(t) {\n    super();\n    this.constraints = t;\n  }\n\n  toSql(t) {\n    return t.setImmediateQuery(this.constraints);\n  }\n\n}\n\nr(c, \"SET_IMMEDIATE\");\nconst a = {\n  INITIALLY_DEFERRED: n(o),\n  INITIALLY_IMMEDIATE: n(E),\n  NOT: n(i),\n  SET_DEFERRED: n(I),\n  SET_IMMEDIATE: n(c)\n};\nmodule.exports = a;","map":{"version":3,"sources":["../../lib/deferrable.js"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM;AAAE,EAAA,gBAAA,EAAA;AAAF,IAAuB,OAAA,CAAQ,SAAR,CAA7B;;AAEA,MAAA,CAAA,CAAe;AACN,SAAA,QAAA,GAAkB;AACvB,WAAO,IAAI,IAAJ,GAAW,QAAX,CAAoB,YAApB,CAAP;AAGF;;AAAA,EAAA,QAAA,GAAkB;AAChB,WAAO,KAAK,KAAL,CAAW,YAAX,CAAP;AAGF;;AAAA,EAAA,KAAA,GAAQ;AACN,UAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AAAgB;;AAVL;;AAAf,CAAA,CAAA,CAAA,EAAA,UAAA,CAAA;;AAcA,MAAA,CAAA,SAAiC,CAAjC,CAA0C;AACxC,EAAA,KAAA,GAAQ;AACN,WAAO,+BAAP;AAAO;;AAF+B;;AAA1C,CAAA,CAAA,CAAA,EAAA,oBAAA,CAAA;;AAMA,MAAA,CAAA,SAAkC,CAAlC,CAA2C;AACzC,EAAA,KAAA,GAAQ;AACN,WAAO,gCAAP;AAAO;;AAFgC;;AAA3C,CAAA,CAAA,CAAA,EAAA,qBAAA,CAAA;;AAMA,MAAA,CAAA,SAAkB,CAAlB,CAA2B;AACzB,EAAA,KAAA,GAAQ;AACN,WAAO,gBAAP;AAAO;;AAFgB;;AAA3B,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA;;AAMA,MAAA,CAAA,SAA2B,CAA3B,CAAoC;AAClC,EAAA,WAAA,CAAY,CAAZ,EAAyB;AACvB;AACA,SAAK,WAAL,GAAmB,CAAnB;AAGF;;AAAA,EAAA,KAAA,CAAM,CAAN,EAAsB;AACpB,WAAO,CAAA,CAAe,gBAAf,CAAgC,KAAK,WAArC,CAAP;AAA4C;;AAPZ;;AAApC,CAAA,CAAA,CAAA,EAAA,cAAA,CAAA;;AAWA,MAAA,CAAA,SAA4B,CAA5B,CAAqC;AACnC,EAAA,WAAA,CAAY,CAAZ,EAAyB;AACvB;AACA,SAAK,WAAL,GAAmB,CAAnB;AAGF;;AAAA,EAAA,KAAA,CAAM,CAAN,EAAsB;AACpB,WAAO,CAAA,CAAe,iBAAf,CAAiC,KAAK,WAAtC,CAAP;AAA6C;;AAPZ;;AAArC,CAAA,CAAA,CAAA,EAAA,eAAA,CAAA;AAiDA,MAAM,CAAA,GAAa;AACjB,EAAA,kBAAA,EAAoB,CAAA,CAAiB,CAAjB,CADH;AAEjB,EAAA,mBAAA,EAAqB,CAAA,CAAiB,CAAjB,CAFJ;AAGjB,EAAA,GAAA,EAAK,CAAA,CAAiB,CAAjB,CAHY;AAIjB,EAAA,YAAA,EAAc,CAAA,CAAiB,CAAjB,CAJG;AAKjB,EAAA,aAAA,EAAe,CAAA,CAAiB,CAAjB;AALE,CAAnB;AAQA,MAAA,CAAO,OAAP,GAAiB,CAAjB","sourcesContent":["'use strict';\n\nconst { classToInvokable } = require('./utils');\n\nclass ABSTRACT {\n  static toString(...args) {\n    return new this().toString(...args);\n  }\n\n  toString(...args) {\n    return this.toSql(...args);\n  }\n\n  toSql() {\n    throw new Error('toSql implementation missing');\n  }\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY DEFERRED';\n  }\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY IMMEDIATE';\n  }\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return 'NOT DEFERRABLE';\n  }\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n}\n\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED    Use when declaring a constraint. Allow and enable by default this constraint's checks to be deferred at the end of transactions.\n * @property INITIALLY_IMMEDIATE   Use when declaring a constraint. Allow the constraint's checks to be deferred at the end of transactions.\n * @property NOT                   Use when declaring a constraint. Set the constraint to not deferred. This is the default in PostgreSQL and makes it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED          Use when declaring a transaction. Defer the deferrable checks involved in this transaction at commit.\n * @property SET_IMMEDIATE         Use when declaring a transaction. Execute the deferrable checks involved in this transaction immediately.\n */\n\nconst Deferrable = {\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\n\nmodule.exports = Deferrable;\n"]},"metadata":{},"sourceType":"script"}