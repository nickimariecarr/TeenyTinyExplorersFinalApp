{"ast":null,"code":"\"use strict\";\n\nvar F = Object.defineProperty;\nvar q = Object.getOwnPropertySymbols;\nvar j = Object.prototype.hasOwnProperty,\n    P = Object.prototype.propertyIsEnumerable;\n\nvar B = (O, e, t) => e in O ? F(O, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : O[e] = t,\n    g = (O, e) => {\n  for (var t in e || (e = {})) j.call(e, t) && B(O, t, e[t]);\n\n  if (q) for (var t of q(e)) P.call(e, t) && B(O, t, e[t]);\n  return O;\n};\n\nvar M = (O, e) => F(O, \"name\", {\n  value: e,\n  configurable: !0\n});\n\nconst L = require(\"lodash\"),\n      N = require(\"../../utils\"),\n      K = require(\"../../data-types\"),\n      Q = require(\"../../table-hints\"),\n      Y = require(\"../abstract/query-generator\"),\n      W = require(\"crypto\").randomBytes,\n      p = require(\"semver\"),\n      J = require(\"../../operators\"),\n      y = M(function (O) {\n  throw new Error(`The method \"${O}\" is not defined! Please add it to your sql dialect.`);\n}, \"throwMethodUndefined\");\n\nclass H extends Y {\n  createDatabaseQuery(e, t) {\n    t = g({\n      collate: null\n    }, t);\n    const n = t.collate ? `COLLATE ${this.escape(t.collate)}` : \"\";\n    return [\"IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =\", I(e), \")\", \"BEGIN\", \"CREATE DATABASE\", this.quoteIdentifier(e), `${n};`, \"END;\"].join(\" \");\n  }\n\n  dropDatabaseQuery(e) {\n    return [\"IF EXISTS (SELECT * FROM sys.databases WHERE name =\", I(e), \")\", \"BEGIN\", \"DROP DATABASE\", this.quoteIdentifier(e), \";\", \"END;\"].join(\" \");\n  }\n\n  createSchema(e) {\n    return [\"IF NOT EXISTS (SELECT schema_name\", \"FROM information_schema.schemata\", \"WHERE schema_name =\", I(e), \")\", \"BEGIN\", \"EXEC sp_executesql N'CREATE SCHEMA\", this.quoteIdentifier(e), \";'\", \"END;\"].join(\" \");\n  }\n\n  dropSchema(e) {\n    const t = I(e);\n    return [\"IF EXISTS (SELECT schema_name\", \"FROM information_schema.schemata\", \"WHERE schema_name =\", t, \")\", \"BEGIN\", \"DECLARE @id INT, @ms_sql NVARCHAR(2000);\", \"DECLARE @cascade TABLE (\", \"id INT NOT NULL IDENTITY PRIMARY KEY,\", \"ms_sql NVARCHAR(2000) NOT NULL );\", \"INSERT INTO @cascade ( ms_sql )\", \"SELECT CASE WHEN o.type IN ('F','PK')\", \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\", \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\", \"FROM sys.objects o\", \"JOIN sys.schemas s on o.schema_id = s.schema_id\", \"LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id\", \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", t, \"ORDER BY o.type ASC;\", \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\", \"WHILE @id IS NOT NULL\", \"BEGIN\", \"BEGIN TRY EXEC sp_executesql @ms_sql; END TRY\", \"BEGIN CATCH BREAK; THROW; END CATCH;\", \"DELETE FROM @cascade WHERE id = @id;\", \"SELECT @id = NULL, @ms_sql = NULL;\", \"SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;\", \"END\", \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(e), \";'\", \"END;\"].join(\" \");\n  }\n\n  showSchemasQuery() {\n    return ['SELECT \"name\" as \"schema_name\" FROM sys.schemas as s', 'WHERE \"s\".\"name\" NOT IN (', \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\", \")\", \"AND\", '\"s\".\"name\" NOT LIKE', \"'db_%'\"].join(\" \");\n  }\n\n  versionQuery() {\n    return [\"DECLARE @ms_ver NVARCHAR(20);\", \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\", \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"].join(\" \");\n  }\n\n  createTableQuery(e, t, n) {\n    const i = [],\n          r = {},\n          s = [];\n    let c = \"\";\n\n    for (const E in t) if (Object.prototype.hasOwnProperty.call(t, E)) {\n      let o = t[E],\n          u;\n\n      if (o.includes(\"COMMENT \")) {\n        const S = o.match(/^(.+) (COMMENT.*)$/),\n              h = S[2].replace(\"COMMENT\", \"\").trim();\n        c += this.commentTemplate(h, e, E), o = S[1];\n      }\n\n      o.includes(\"PRIMARY KEY\") ? (i.push(E), o.includes(\"REFERENCES\") ? (u = o.match(/^(.+) (REFERENCES.*)$/), s.push(`${this.quoteIdentifier(E)} ${u[1].replace(\"PRIMARY KEY\", \"\")}`), r[E] = u[2]) : s.push(`${this.quoteIdentifier(E)} ${o.replace(\"PRIMARY KEY\", \"\")}`)) : o.includes(\"REFERENCES\") ? (u = o.match(/^(.+) (REFERENCES.*)$/), s.push(`${this.quoteIdentifier(E)} ${u[1]}`), r[E] = u[2]) : s.push(`${this.quoteIdentifier(E)} ${o}`);\n    }\n\n    const T = i.map(E => this.quoteIdentifier(E)).join(\", \");\n    n.uniqueKeys && L.each(n.uniqueKeys, (E, o) => {\n      E.customIndex && (typeof o != \"string\" && (o = `uniq_${e}_${E.fields.join(\"_\")}`), s.push(`CONSTRAINT ${this.quoteIdentifier(o)} UNIQUE (${E.fields.map(u => this.quoteIdentifier(u)).join(\", \")})`));\n    }), T.length > 0 && s.push(`PRIMARY KEY (${T})`);\n\n    for (const E in r) Object.prototype.hasOwnProperty.call(r, E) && s.push(`FOREIGN KEY (${this.quoteIdentifier(E)}) ${r[E]}`);\n\n    const A = this.quoteTable(e);\n    return N.joinSQLFragments([`IF OBJECT_ID('${A}', 'U') IS NULL`, `CREATE TABLE ${A} (${s.join(\", \")})`, \";\", c]);\n  }\n\n  describeTableQuery(e, t) {\n    let n = [\"SELECT\", \"c.COLUMN_NAME AS 'Name',\", \"c.DATA_TYPE AS 'Type',\", \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\", \"c.IS_NULLABLE as 'IsNull',\", \"COLUMN_DEFAULT AS 'Default',\", \"pk.CONSTRAINT_TYPE AS 'Constraint',\", \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\", \"CAST(prop.value AS NVARCHAR) AS 'Comment'\", \"FROM\", \"INFORMATION_SCHEMA.TABLES t\", \"INNER JOIN\", \"INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA\", \"LEFT JOIN (SELECT tc.table_schema, tc.table_name, \", \"cu.column_name, tc.CONSTRAINT_TYPE \", \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc \", \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu \", \"ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name \", \"and tc.constraint_name=cu.constraint_name \", \"and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk \", \"ON pk.table_schema=c.table_schema \", \"AND pk.table_name=c.table_name \", \"AND pk.column_name=c.column_name \", \"INNER JOIN sys.columns AS sc\", \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\", \"LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id\", \"AND prop.minor_id = sc.column_id\", \"AND prop.name = 'MS_Description'\", \"WHERE t.TABLE_NAME =\", I(e)].join(\" \");\n    return t && (n += `AND t.TABLE_SCHEMA =${I(t)}`), n;\n  }\n\n  renameTableQuery(e, t) {\n    return `EXEC sp_rename ${this.quoteTable(e)}, ${this.quoteTable(t)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(e) {\n    const t = this.quoteTable(e);\n    return N.joinSQLFragments([`IF OBJECT_ID('${t}', 'U') IS NOT NULL`, \"DROP TABLE\", t, \";\"]);\n  }\n\n  addColumnQuery(e, t, n) {\n    n.field = t;\n    let i = \"\";\n    return n.comment && L.isString(n.comment) && (i = this.commentTemplate(n.comment, e, t), delete n.comment), N.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"ADD\", this.quoteIdentifier(t), this.attributeToSQL(n, {\n      context: \"addColumn\"\n    }), \";\", i]);\n  }\n\n  commentTemplate(e, t, n) {\n    return ` EXEC sp_addextendedproperty @name = N'MS_Description', @value = ${this.escape(e)}, @level0type = N'Schema', @level0name = 'dbo', @level1type = N'Table', @level1name = ${this.quoteIdentifier(t)}, @level2type = N'Column', @level2name = ${this.quoteIdentifier(n)};`;\n  }\n\n  removeColumnQuery(e, t) {\n    return N.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"DROP COLUMN\", this.quoteIdentifier(t), \";\"]);\n  }\n\n  changeColumnQuery(e, t) {\n    const n = [],\n          i = [];\n    let r = \"\";\n\n    for (const s in t) {\n      const c = this.quoteIdentifier(s);\n      let T = t[s];\n\n      if (T.includes(\"COMMENT \")) {\n        const A = T.match(/^(.+) (COMMENT.*)$/),\n              E = A[2].replace(\"COMMENT\", \"\").trim();\n        r += this.commentTemplate(E, e, s), T = A[1];\n      }\n\n      T.includes(\"REFERENCES\") ? i.push(`FOREIGN KEY (${c}) ${T.replace(/.+?(?=REFERENCES)/, \"\")}`) : n.push(`${c} ${T}`);\n    }\n\n    return N.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), n.length && `ALTER COLUMN ${n.join(\", \")}`, i.length && `ADD ${i.join(\", \")}`, \";\", r]);\n  }\n\n  renameColumnQuery(e, t, n) {\n    const i = Object.keys(n)[0];\n    return N.joinSQLFragments([\"EXEC sp_rename\", `'${this.quoteTable(e)}.${t}',`, `'${i}',`, \"'COLUMN'\", \";\"]);\n  }\n\n  bulkInsertQuery(e, t, n, i) {\n    const r = this.quoteTable(e);\n    n = n || {}, i = i || {};\n    const s = [],\n          c = [],\n          T = [];\n    let A = !1,\n        E = \"\";\n    n.returning && (E = this.generateReturnValues(i, n).outputFragment);\n    const o = `INSERT INTO ${r}${E} DEFAULT VALUES`;\n\n    if (t.forEach(d => {\n      const l = Object.keys(d),\n            R = i[l[0]];\n\n      if (l.length === 1 && R && R.autoIncrement && d[l[0]] === null) {\n        T.push(o);\n        return;\n      }\n\n      L.forOwn(d, (f, C) => {\n        if (f !== null && i[C] && i[C].autoIncrement && (A = !0), !c.includes(C)) {\n          if (f === null && i[C] && i[C].autoIncrement) return;\n          c.push(C);\n        }\n      });\n    }), c.length > 0) {\n      t.forEach(l => {\n        s.push(`(${c.map(R => this.escape(l[R])).join(\",\")})`);\n      });\n      const d = c.map(l => this.quoteIdentifier(l)).join(\",\");\n      T.push(l => `INSERT INTO ${r} (${d})${E} VALUES ${l};`);\n    }\n\n    const u = [];\n    let S = 0;\n    const h = Math.floor(250 / (c.length + 1)) + 1;\n\n    for (; S < Math.max(s.length, 1);) {\n      const d = s.slice(S, Math.min(s.length, S + h));\n      let l = T.map(R => typeof R == \"string\" ? R : R(d)).join(\";\");\n      A && (l = `SET IDENTITY_INSERT ${r} ON; ${l}; SET IDENTITY_INSERT ${r} OFF;`), u.push(l), S += h;\n    }\n\n    return u.join(\";\");\n  }\n\n  updateQuery(e, t, n, i, r) {\n    const s = super.updateQuery(e, t, n, i, r);\n\n    if (i.limit) {\n      const c = `UPDATE TOP(${this.escape(i.limit)})`;\n      s.query = s.query.replace(\"UPDATE\", c);\n    }\n\n    return s;\n  }\n\n  upsertQuery(e, t, n, i, r) {\n    const s = this.quoteTable(`${e}_target`),\n          c = this.quoteTable(`${e}_source`),\n          T = [],\n          A = [],\n          E = [],\n          o = this.quoteTable(e);\n    let u = !1;\n\n    for (const a in r.rawAttributes) r.rawAttributes[a].primaryKey && T.push(r.rawAttributes[a].field || a), r.rawAttributes[a].unique && E.push(r.rawAttributes[a].field || a), r.rawAttributes[a].autoIncrement && A.push(r.rawAttributes[a].field || a);\n\n    for (const a of r._indexes) if (a.unique && a.fields) for (const m of a.fields) {\n      const _ = typeof m == \"string\" ? m : m.name || m.attribute;\n\n      !E.includes(_) && r.rawAttributes[_] && E.push(_);\n    }\n\n    const S = Object.keys(n),\n          h = Object.keys(t),\n          d = h.map(a => this.quoteIdentifier(a)).join(\", \"),\n          l = h.map(a => this.escape(t[a])).join(\", \"),\n          R = `VALUES(${l})`;\n    let f;\n    A.forEach(a => {\n      n[a] && n[a] !== null && (u = !0);\n    });\n    const C = i[J.or].filter(a => {\n      let m = !0;\n\n      for (const _ in a) if (typeof a[_] == \"undefined\" || a[_] == null) {\n        m = !1;\n        break;\n      }\n\n      return m;\n    }),\n          D = M(a => a.map(m => (m = this.quoteIdentifier(m), `${s}.${m} = ${c}.${m}`)), \"getJoinSnippet\");\n    if (C.length === 0) throw new Error(\"Primary Key or Unique key should be passed to upsert query\");\n\n    for (const a in C) {\n      const m = Object.keys(C[a]);\n\n      if (T.includes(m[0])) {\n        f = D(T).join(\" AND \");\n        break;\n      }\n    }\n\n    f || (f = D(E).join(\" AND \"));\n    const b = S.filter(a => !A.includes(a)).map(a => {\n      const m = this.escape(n[a]);\n      return a = this.quoteIdentifier(a), `${s}.${a} = ${m}`;\n    }).join(\", \"),\n          U = `(${d}) VALUES(${l})`;\n    let $ = `MERGE INTO ${o} WITH(HOLDLOCK) AS ${s} USING (${R}) AS ${c}(${d}) ON ${f}`;\n    return $ += ` WHEN MATCHED THEN UPDATE SET ${b} WHEN NOT MATCHED THEN INSERT ${U} OUTPUT $action, INSERTED.*;`, u && ($ = `SET IDENTITY_INSERT ${o} ON; ${$} SET IDENTITY_INSERT ${o} OFF;`), $;\n  }\n\n  truncateTableQuery(e) {\n    return `TRUNCATE TABLE ${this.quoteTable(e)}`;\n  }\n\n  deleteQuery(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let i = arguments.length > 3 ? arguments[3] : undefined;\n    const r = this.quoteTable(e),\n          s = this.getWhereConditions(t, null, i, n);\n    return N.joinSQLFragments([\"DELETE\", n.limit && `TOP(${this.escape(n.limit)})`, \"FROM\", r, s && `WHERE ${s}`, \";\", \"SELECT @@ROWCOUNT AS AFFECTEDROWS\", \";\"]);\n  }\n\n  showIndexesQuery(e) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(e)}';`;\n  }\n\n  showConstraintsQuery(e) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(e))};`;\n  }\n\n  removeIndexQuery(e, t) {\n    let n = t;\n    return typeof n != \"string\" && (n = N.underscore(`${e}_${t.join(\"_\")}`)), `DROP INDEX ${this.quoteIdentifiers(n)} ON ${this.quoteIdentifiers(e)}`;\n  }\n\n  attributeToSQL(e) {\n    L.isPlainObject(e) || (e = {\n      type: e\n    }), e.references && e.Model && e.Model.tableName === e.references.model && (this.sequelize.log(\"MSSQL does not support self referencial constraints, we will remove it but we recommend restructuring your query\"), e.onDelete = \"\", e.onUpdate = \"\");\n    let t;\n    return e.type instanceof K.ENUM ? (e.type.values && !e.values && (e.values = e.type.values), t = e.type.toSql(), t += ` CHECK (${this.quoteIdentifier(e.field)} IN(${e.values.map(n => this.escape(n)).join(\", \")}))`, t) : (t = e.type.toString(), e.allowNull === !1 ? t += \" NOT NULL\" : !e.primaryKey && !N.defaultValueSchemable(e.defaultValue) && (t += \" NULL\"), e.autoIncrement && (t += \" IDENTITY(1,1)\"), e.type !== \"TEXT\" && e.type._binary !== !0 && N.defaultValueSchemable(e.defaultValue) && (t += ` DEFAULT ${this.escape(e.defaultValue)}`), e.unique === !0 && (t += \" UNIQUE\"), e.primaryKey && (t += \" PRIMARY KEY\"), e.references && (t += ` REFERENCES ${this.quoteTable(e.references.model)}`, e.references.key ? t += ` (${this.quoteIdentifier(e.references.key)})` : t += ` (${this.quoteIdentifier(\"id\")})`, e.onDelete && (t += ` ON DELETE ${e.onDelete.toUpperCase()}`), e.onUpdate && (t += ` ON UPDATE ${e.onUpdate.toUpperCase()}`)), e.comment && typeof e.comment == \"string\" && (t += ` COMMENT ${e.comment}`), t);\n  }\n\n  attributesToSQL(e, t) {\n    const n = {},\n          i = [];\n    let r, s;\n\n    for (r in e) s = e[r], s.references && (i.includes(s.references.model.toString()) ? (s.onDelete = \"\", s.onUpdate = \"\") : (i.push(s.references.model.toString()), s.onUpdate = \"\")), r && !s.field && (s.field = r), n[s.field || r] = this.attributeToSQL(s, t);\n\n    return n;\n  }\n\n  createTrigger() {\n    y(\"createTrigger\");\n  }\n\n  dropTrigger() {\n    y(\"dropTrigger\");\n  }\n\n  renameTrigger() {\n    y(\"renameTrigger\");\n  }\n\n  createFunction() {\n    y(\"createFunction\");\n  }\n\n  dropFunction() {\n    y(\"dropFunction\");\n  }\n\n  renameFunction() {\n    y(\"renameFunction\");\n  }\n\n  _getForeignKeysQueryPrefix(e) {\n    return `SELECT constraint_name = OBJ.NAME, constraintName = OBJ.NAME, ${e ? `constraintCatalog = '${e}', ` : \"\"}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), tableName = TB.NAME, tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${e ? `tableCatalog = '${e}', ` : \"\"}columnName = COL.NAME, referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${e ? `referencedCatalog = '${e}', ` : \"\"}referencedTableName = RTB.NAME, referencedColumnName = RCOL.NAME FROM sys.foreign_key_columns FKC INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID`;\n  }\n\n  getForeignKeysQuery(e, t) {\n    const n = e.tableName || e;\n    let i = `${this._getForeignKeysQueryPrefix(t)} WHERE TB.NAME =${I(n)}`;\n    return e.schema && (i += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${I(e.schema)}`), i;\n  }\n\n  getForeignKeyQuery(e, t) {\n    const n = e.tableName || e;\n    return N.joinSQLFragments([this._getForeignKeysQueryPrefix(), \"WHERE\", `TB.NAME =${I(n)}`, \"AND\", `COL.NAME =${I(t)}`, e.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${I(e.schema)}`]);\n  }\n\n  getPrimaryKeyConstraintQuery(e, t) {\n    const n = I(e.tableName || e);\n    return N.joinSQLFragments([\"SELECT K.TABLE_NAME AS tableName,\", \"K.COLUMN_NAME AS columnName,\", \"K.CONSTRAINT_NAME AS constraintName\", \"FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C\", \"JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K\", \"ON C.TABLE_NAME = K.TABLE_NAME\", \"AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG\", \"AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA\", \"AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME\", \"WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'\", `AND K.COLUMN_NAME = ${I(t)}`, `AND K.TABLE_NAME = ${n}`, \";\"]);\n  }\n\n  dropForeignKeyQuery(e, t) {\n    return N.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"DROP\", this.quoteIdentifier(t)]);\n  }\n\n  getDefaultConstraintQuery(e, t) {\n    const n = this.quoteTable(e);\n    return N.joinSQLFragments([\"SELECT name FROM sys.default_constraints\", `WHERE PARENT_OBJECT_ID = OBJECT_ID('${n}', 'U')`, `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${t}')`, `AND object_id = OBJECT_ID('${n}', 'U'))`, \";\"]);\n  }\n\n  dropConstraintQuery(e, t) {\n    return N.joinSQLFragments([\"ALTER TABLE\", this.quoteTable(e), \"DROP CONSTRAINT\", this.quoteIdentifier(t), \";\"]);\n  }\n\n  setIsolationLevelQuery() {}\n\n  generateTransactionId() {\n    return W(10).toString(\"hex\");\n  }\n\n  startTransactionQuery(e) {\n    return e.parent ? `SAVE TRANSACTION ${this.quoteIdentifier(e.name)};` : \"BEGIN TRANSACTION;\";\n  }\n\n  commitTransactionQuery(e) {\n    if (!e.parent) return \"COMMIT TRANSACTION;\";\n  }\n\n  rollbackTransactionQuery(e) {\n    return e.parent ? `ROLLBACK TRANSACTION ${this.quoteIdentifier(e.name)};` : \"ROLLBACK TRANSACTION;\";\n  }\n\n  selectFromTableFragment(e, t, n, i, r, s) {\n    this._throwOnEmptyAttributes(n, {\n      modelName: t && t.name,\n      as: r\n    });\n\n    const c = this.sequelize.options.databaseVersion,\n          T = p.valid(c) && p.lt(c, \"11.0.0\");\n\n    if (T && e.offset) {\n      const A = e.offset || 0,\n            E = e.hasIncludeWhere || e.hasIncludeRequired || e.hasMultiAssociation;\n      let o = {\n        mainQueryOrder: []\n      };\n      e.order && (o = this.getQueryOrders(e, t, E)), o.mainQueryOrder.length === 0 && o.mainQueryOrder.push(this.quoteIdentifier(t.primaryKeyField));\n      const u = r || \"OffsetTable\";\n\n      if (e.include) {\n        const S = e.subQuery === void 0 ? e.limit && e.hasMultiAssociation : e.subQuery,\n              d = {\n          names: {\n            name: r,\n            quotedName: null,\n            as: null,\n            model: t\n          },\n          options: e,\n          subQuery: S\n        };\n        let l = [];\n\n        for (const R of e.include) {\n          if (R.separate) continue;\n          const f = this.generateInclude(R, {\n            externalAs: r,\n            internalAs: r\n          }, d);\n          l = l.concat(f.mainQuery);\n        }\n\n        return N.joinSQLFragments([\"SELECT TOP 100 PERCENT\", n.join(\", \"), \"FROM (\", [\"SELECT\", e.limit && `TOP ${e.limit}`, \"* FROM (\", [\"SELECT ROW_NUMBER() OVER (\", [\"ORDER BY\", o.mainQueryOrder.join(\", \")], `) as row_num, ${u}.* FROM (`, [\"SELECT DISTINCT\", `${u}.* FROM ${i} AS ${u}`, l, s && `WHERE ${s}`], `) AS ${u}`], `) AS ${u} WHERE row_num > ${A}`], `) AS ${u}`]);\n      }\n\n      return N.joinSQLFragments([\"SELECT TOP 100 PERCENT\", n.join(\", \"), \"FROM (\", [\"SELECT\", e.limit && `TOP ${e.limit}`, \"* FROM (\", [\"SELECT ROW_NUMBER() OVER (\", [\"ORDER BY\", o.mainQueryOrder.join(\", \")], `) as row_num, * FROM ${i} AS ${u}`, s && `WHERE ${s}`], `) AS ${u} WHERE row_num > ${A}`], `) AS ${u}`]);\n    }\n\n    return N.joinSQLFragments([\"SELECT\", T && e.limit && `TOP ${e.limit}`, n.join(\", \"), `FROM ${i}`, r && `AS ${r}`, e.tableHint && Q[e.tableHint] && `WITH (${Q[e.tableHint]})`]);\n  }\n\n  addLimitAndOffset(e, t) {\n    if (p.valid(this.sequelize.options.databaseVersion) && p.lt(this.sequelize.options.databaseVersion, \"11.0.0\")) return \"\";\n    const n = e.offset || 0,\n          i = e.subQuery === void 0 ? e.hasIncludeWhere || e.hasIncludeRequired || e.hasMultiAssociation : e.subQuery;\n    let r = \"\",\n        s = {};\n\n    if (e.order && (s = this.getQueryOrders(e, t, i)), e.limit || e.offset) {\n      if (!e.order || !e.order.length || e.include && !s.subQueryOrder.length) {\n        const c = `${this.quoteTable(e.tableAs || t.name)}.${this.quoteIdentifier(t.primaryKeyField)}`;\n        if (!e.order || !e.order.length) r += ` ORDER BY ${c}`;else {\n          const T = L.map(e.order, E => E[0]);\n          L.includes(T, t.primaryKeyField) || (r += e.order && !i ? \", \" : \" ORDER BY \", r += c);\n        }\n      }\n\n      (e.offset || e.limit) && (r += ` OFFSET ${this.escape(n)} ROWS`), e.limit && (r += ` FETCH NEXT ${this.escape(e.limit)} ROWS ONLY`);\n    }\n\n    return r;\n  }\n\n  booleanValue(e) {\n    return e ? 1 : 0;\n  }\n\n}\n\nM(H, \"MSSQLQueryGenerator\");\n\nfunction I(O) {\n  return N.addTicks(N.removeTicks(O, \"'\"), \"'\");\n}\n\nM(I, \"wrapSingleQuote\"), module.exports = H;","map":{"version":3,"sources":["../../../../lib/dialects/mssql/query-generator.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = { collate: null, ...options };\n\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n\n    return [\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\n      `${collation};`,\n      'END;'\n    ].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\n      'END;'\n    ].join(' ');\n  }\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [],\n      foreignKeys = {},\n      attributesClauseParts = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          // remove comment related substring from dataType\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClauseParts.push(`CONSTRAINT ${\n            this.quoteIdentifier(indexName)\n          } UNIQUE (${\n            columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\n          })`);\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\n      }\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`,\n      ';',\n      commentStr\n    ]);\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"CAST(prop.value AS NVARCHAR) AS 'Comment'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'INNER JOIN sys.columns AS sc',\n      \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\",\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      \"AND prop.name = 'MS_Description'\",\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const quoteTbl = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\n      'DROP TABLE',\n      quoteTbl,\n      ';'\n    ]);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n      delete dataType['comment'];\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(table),\n      'ADD',\n      this.quoteIdentifier(key),\n      this.attributeToSQL(dataType, { context: 'addColumn' }),\n      ';',\n      commentStr\n    ]);\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' +\n        `@name = N'MS_Description', @value = ${this.escape(comment)}, ` +\n        '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' +\n        `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` +\n        `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      this.quoteIdentifier(attributeName),\n      ';'\n    ]);\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        // remove comment related substring from dataType\n        definition = commentMatch[1];\n      }\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      attrString.length && `ALTER COLUMN ${attrString.join(', ')}`,\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\n      ';',\n      commentString\n    ]);\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return Utils.joinSQLFragments([\n      'EXEC sp_rename',\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\n      `'${newName}',`,\n      \"'COLUMN'\",\n      ';'\n    ]);\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n    let needIdentityInsertWrapper = false,\n      outputFragment = '';\n\n    if (options.returning) {\n      const returnValues = this.generateReturnValues(attributes, options);\n\n      outputFragment = returnValues.outputFragment;\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',')\n        })`);\n      });\n\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (typeof clause[key] === 'undefined' || clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const updateSnippet = updateKeys.filter(key => !identityAttrs.includes(key))\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    const whereClause = this.getWhereConditions(where, null, model, options);\n\n    return Utils.joinSQLFragments([\n      'DELETE',\n      options.limit && `TOP(${this.escape(options.limit)})`,\n      'FROM',\n      table,\n      whereClause && `WHERE ${whereClause}`,\n      ';',\n      'SELECT @@ROWCOUNT AS AFFECTEDROWS',\n      ';'\n    ]);\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n      return template;\n    }\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, '}${\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` +\n        'tableName = TB.NAME, ' +\n        `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\n          catalogName ? `tableCatalog = '${catalogName}', ` : ''\n        }columnName = COL.NAME, ` +\n        `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\n          catalogName ? `referencedCatalog = '${catalogName}', ` : ''\n        }referencedTableName = RTB.NAME, ` +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM sys.foreign_key_columns FKC ' +\n        'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    return Utils.joinSQLFragments([\n      this._getForeignKeysQueryPrefix(),\n      'WHERE',\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\n      'AND',\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`\n    ]);\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return Utils.joinSQLFragments([\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName}`,\n      ';'\n    ]);\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP',\n      this.quoteIdentifier(foreignKey)\n    ]);\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return Utils.joinSQLFragments([\n      'SELECT name FROM sys.default_constraints',\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\n      ';'\n    ]);\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return Utils.joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      this.quoteIdentifier(constraintName),\n      ';'\n    ]);\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\n\n    const dbVersion = this.sequelize.options.databaseVersion;\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\n\n    if (isSQLServer2008 && options.offset) {\n      // For earlier versions of SQL server, we need to nest several queries\n      // in order to emulate the OFFSET behavior.\n      //\n      // 1. The outermost query selects all items from the inner query block.\n      //    This is due to a limitation in SQL server with the use of computed\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\n      //    the TOP N rows of the query where the row number is > OFFSET\n      // 3. The innermost query is the actual set we want information from\n\n      const offset = options.offset || 0;\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n      let orders = { mainQueryOrder: [] };\n      if (options.order) {\n        orders = this.getQueryOrders(options, model, isSubQuery);\n      }\n\n      if (orders.mainQueryOrder.length === 0) {\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n      }\n\n      const tmpTable = mainTableAs || 'OffsetTable';\n\n      if (options.include) {\n        const subQuery = options.subQuery === undefined ? options.limit && options.hasMultiAssociation : options.subQuery;\n        const mainTable = {\n          name: mainTableAs,\n          quotedName: null,\n          as: null,\n          model\n        };\n        const topLevelInfo = {\n          names: mainTable,\n          options,\n          subQuery\n        };\n\n        let mainJoinQueries = [];\n        for (const include of options.include) {\n          if (include.separate) {\n            continue;\n          }\n          const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\n        }\n\n        return Utils.joinSQLFragments([\n          'SELECT TOP 100 PERCENT',\n          attributes.join(', '),\n          'FROM (',\n          [\n            'SELECT',\n            options.limit && `TOP ${options.limit}`,\n            '* FROM (',\n            [\n              'SELECT ROW_NUMBER() OVER (',\n              [\n                'ORDER BY',\n                orders.mainQueryOrder.join(', ')\n              ],\n              `) as row_num, ${tmpTable}.* FROM (`,\n              [\n                'SELECT DISTINCT',\n                `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,\n                mainJoinQueries,\n                where && `WHERE ${where}`\n              ],\n              `) AS ${tmpTable}`\n            ],\n            `) AS ${tmpTable} WHERE row_num > ${offset}`\n          ],\n          `) AS ${tmpTable}`\n        ]);\n      }\n      return Utils.joinSQLFragments([\n        'SELECT TOP 100 PERCENT',\n        attributes.join(', '),\n        'FROM (',\n        [\n          'SELECT',\n          options.limit && `TOP ${options.limit}`,\n          '* FROM (',\n          [\n            'SELECT ROW_NUMBER() OVER (',\n            [\n              'ORDER BY',\n              orders.mainQueryOrder.join(', ')\n            ],\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\n            where && `WHERE ${where}`\n          ],\n          `) AS ${tmpTable} WHERE row_num > ${offset}`\n        ],\n        `) AS ${tmpTable}`\n      ]);\n    }\n\n    return Utils.joinSQLFragments([\n      'SELECT',\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\n      attributes.join(', '),\n      `FROM ${tables}`,\n      mainTableAs && `AS ${mainTableAs}`,\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`\n    ]);\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\n      : options.subQuery;\n\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || !options.order.length || options.include && !orders.subQueryOrder.length) {\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n        if (!options.order || !options.order.length) {\n          fragment += ` ORDER BY ${tablePkFragment}`;\n        } else {\n          const orderFieldNames = _.map(options.order, order => order[0]);\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\n\n          if (!primaryKeyFieldAlreadyPresent) {\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n            fragment += tablePkFragment;\n          }\n        }\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;\n"]},"metadata":{},"sourceType":"script"}