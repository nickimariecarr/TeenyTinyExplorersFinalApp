{"ast":null,"code":"\"use strict\";\n\nvar g = Object.defineProperty,\n    d = Object.defineProperties;\nvar m = Object.getOwnPropertyDescriptors;\nvar l = Object.getOwnPropertySymbols;\nvar O = Object.prototype.hasOwnProperty,\n    j = Object.prototype.propertyIsEnumerable;\n\nvar K = (r, t, e) => t in r ? g(r, t, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: e\n}) : r[t] = e,\n    u = (r, t) => {\n  for (var e in t || (t = {})) O.call(t, e) && K(r, e, t[e]);\n\n  if (l) for (var e of l(t)) j.call(t, e) && K(r, e, t[e]);\n  return r;\n},\n    y = (r, t) => d(r, m(t));\n\nvar p = (r, t) => g(r, \"name\", {\n  value: t,\n  configurable: !0\n});\n\nconst a = require(\"./../utils\"),\n      c = require(\"./helpers\"),\n      A = require(\"lodash\"),\n      D = require(\"./base\"),\n      b = require(\"../operators\");\n\nclass w extends D {\n  constructor(t, e, i) {\n    super(t, e, i);\n    if (this.associationType = \"HasOne\", this.isSingleAssociation = !0, this.foreignKeyAttribute = {}, this.as ? (this.isAliased = !0, this.options.name = {\n      singular: this.as\n    }) : (this.as = this.target.options.name.singular, this.options.name = this.target.options.name), A.isObject(this.options.foreignKey) ? (this.foreignKeyAttribute = this.options.foreignKey, this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName) : this.options.foreignKey && (this.foreignKey = this.options.foreignKey), this.foreignKey || (this.foreignKey = a.camelize([a.singularize(this.options.as || this.source.name), this.source.primaryKeyAttribute].join(\"_\"))), this.options.sourceKey && !this.source.rawAttributes[this.options.sourceKey]) throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute, this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey, this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute, this.associationAccessor = this.as, this.options.useHooks = i.useHooks, this.target.rawAttributes[this.foreignKey] && (this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey);\n    const s = A.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${s}`,\n      set: `set${s}`,\n      create: `create${s}`\n    };\n  }\n\n  _injectAttributes() {\n    const t = {\n      [this.foreignKey]: u({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: !0\n      }, this.foreignKeyAttribute)\n    };\n\n    if (this.options.constraints !== !1) {\n      const e = this.target.rawAttributes[this.foreignKey] || t[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (e.allowNull ? \"SET NULL\" : \"CASCADE\"), this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n\n    return c.addForeignKeyConstraints(t[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField), a.mergeDefaults(this.target.rawAttributes, t), this.target.refreshAttributes(), this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey, c.checkNamingCollision(this), this;\n  }\n\n  mixin(t) {\n    const e = [\"get\", \"set\", \"create\"];\n    c.mixinMethods(this, t, e);\n  }\n\n  async get(t, e) {\n    const i = {};\n    let s = this.target,\n        h;\n\n    if (e = a.cloneDeep(e), Object.prototype.hasOwnProperty.call(e, \"scope\") && (e.scope ? s = s.scope(e.scope) : s = s.unscoped()), Object.prototype.hasOwnProperty.call(e, \"schema\") && (s = s.schema(e.schema, e.schemaDelimiter)), Array.isArray(t) || (h = t, t = void 0), t ? i[this.foreignKey] = {\n      [b.in]: t.map(o => o.get(this.sourceKey))\n    } : i[this.foreignKey] = h.get(this.sourceKey), this.scope && Object.assign(i, this.scope), e.where = e.where ? {\n      [b.and]: [i, e.where]\n    } : i, t) {\n      const o = await s.findAll(e),\n            f = {};\n\n      for (const n of t) f[n.get(this.sourceKey, {\n        raw: !0\n      })] = null;\n\n      for (const n of o) f[n.get(this.foreignKey, {\n        raw: !0\n      })] = n;\n\n      return f;\n    }\n\n    return s.findOne(e);\n  }\n\n  async set(t, e, i) {\n    i = y(u({}, i), {\n      scope: !1\n    });\n    const s = await t[this.accessors.get](i),\n          h = s && e && this.target.primaryKeyAttributes.every(o => s.get(o, {\n      raw: !0\n    }) === (e.get ? e.get(o, {\n      raw: !0\n    }) : e));\n\n    if (s && !h && (s[this.foreignKey] = null, await s.save(y(u({}, i), {\n      fields: [this.foreignKey],\n      allowNull: [this.foreignKey],\n      association: !0\n    }))), e && !h) {\n      if (!(e instanceof this.target)) {\n        const o = {};\n        o[this.target.primaryKeyAttribute] = e, e = this.target.build(o, {\n          isNewRecord: !1\n        });\n      }\n\n      return Object.assign(e, this.scope), e.set(this.foreignKey, t.get(this.sourceKeyAttribute)), e.save(i);\n    }\n\n    return null;\n  }\n\n  async create(t, e, i) {\n    if (e = e || {}, i = i || {}, this.scope) for (const s of Object.keys(this.scope)) e[s] = this.scope[s], i.fields && i.fields.push(s);\n    return e[this.foreignKey] = t.get(this.sourceKeyAttribute), i.fields && i.fields.push(this.foreignKey), await this.target.create(e, i);\n  }\n\n  verifyAssociationAlias(t) {\n    return typeof t == \"string\" ? this.as === t : t && t.singular ? this.as === t.singular : !this.isAliased;\n  }\n\n}\n\np(w, \"HasOne\"), module.exports = w;","map":{"version":3,"sources":["../../../lib/associations/has-one.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          Utils.singularize(this.options.as || this.source.name),\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (\n      this.options.sourceKey\n      && !this.source.rawAttributes[this.options.sourceKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the target table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?<Model>|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options] Options passed to getAssociation and `target.save`\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options) {\n    options = { ...options, scope: false };\n\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    // TODO Use equals method once #5605 is resolved\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute =>\n      oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance)\n    );\n\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n\n      await oldInstance.save({\n        ...options,\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      });\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n\n      return associatedInstance.save(options);\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create} for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasOne;\n"]},"metadata":{},"sourceType":"script"}